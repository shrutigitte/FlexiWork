"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/drizzle-orm";
exports.ids = ["vendor-chunks/drizzle-orm"];
exports.modules = {

/***/ "(action-browser)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/drizzle-orm/alias-cf8e03cd.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ PgArrayBuilder),\n/* harmony export */   A: () => (/* binding */ getOrderByOperators),\n/* harmony export */   B: () => (/* binding */ normalizeRelation),\n/* harmony export */   C: () => (/* binding */ ColumnBuilder),\n/* harmony export */   D: () => (/* binding */ DrizzleError),\n/* harmony export */   E: () => (/* binding */ and),\n/* harmony export */   F: () => (/* binding */ eq),\n/* harmony export */   G: () => (/* binding */ aliasedTable),\n/* harmony export */   H: () => (/* binding */ applyMixins),\n/* harmony export */   I: () => (/* binding */ getTableColumns),\n/* harmony export */   J: () => (/* binding */ TypedQueryBuilder),\n/* harmony export */   K: () => (/* binding */ getTableLikeName),\n/* harmony export */   L: () => (/* binding */ PgColumnBuilder),\n/* harmony export */   M: () => (/* binding */ Many),\n/* harmony export */   N: () => (/* binding */ PgColumn),\n/* harmony export */   O: () => (/* binding */ One),\n/* harmony export */   P: () => (/* binding */ PgDialect),\n/* harmony export */   Q: () => (/* binding */ QueryPromise),\n/* harmony export */   R: () => (/* binding */ pgTableWithSchema),\n/* harmony export */   S: () => (/* binding */ SQL),\n/* harmony export */   T: () => (/* binding */ Table),\n/* harmony export */   U: () => (/* binding */ pgViewWithSchema),\n/* harmony export */   V: () => (/* binding */ ViewBaseConfig),\n/* harmony export */   W: () => (/* binding */ WithSubquery),\n/* harmony export */   X: () => (/* binding */ pgMaterializedViewWithSchema),\n/* harmony export */   Y: () => (/* binding */ CheckBuilder),\n/* harmony export */   Z: () => (/* binding */ Check),\n/* harmony export */   _: () => (/* binding */ check),\n/* harmony export */   a: () => (/* binding */ extractTablesRelationalConfig),\n/* harmony export */   a$: () => (/* binding */ PgView),\n/* harmony export */   a0: () => (/* binding */ PgArray),\n/* harmony export */   a1: () => (/* binding */ PgDateBuilder),\n/* harmony export */   a2: () => (/* binding */ PgDate),\n/* harmony export */   a3: () => (/* binding */ PgDateStringBuilder),\n/* harmony export */   a4: () => (/* binding */ PgDateString),\n/* harmony export */   a5: () => (/* binding */ date),\n/* harmony export */   a6: () => (/* binding */ PgJsonBuilder),\n/* harmony export */   a7: () => (/* binding */ PgJson),\n/* harmony export */   a8: () => (/* binding */ json),\n/* harmony export */   a9: () => (/* binding */ PgJsonbBuilder),\n/* harmony export */   aA: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   aB: () => (/* binding */ PrimaryKey),\n/* harmony export */   aC: () => (/* binding */ PgSelectQueryBuilder),\n/* harmony export */   aD: () => (/* binding */ PgSelect),\n/* harmony export */   aE: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   aF: () => (/* binding */ PgTable),\n/* harmony export */   aG: () => (/* binding */ pgTable),\n/* harmony export */   aH: () => (/* binding */ pgTableCreator),\n/* harmony export */   aI: () => (/* binding */ unique),\n/* harmony export */   aJ: () => (/* binding */ uniqueKeyName),\n/* harmony export */   aK: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   aL: () => (/* binding */ UniqueOnConstraintBuilder),\n/* harmony export */   aM: () => (/* binding */ UniqueConstraint),\n/* harmony export */   aN: () => (/* binding */ getTableConfig),\n/* harmony export */   aO: () => (/* binding */ getViewConfig),\n/* harmony export */   aP: () => (/* binding */ getMaterializedViewConfig),\n/* harmony export */   aQ: () => (/* binding */ parsePgNestedArray),\n/* harmony export */   aR: () => (/* binding */ parsePgArray),\n/* harmony export */   aS: () => (/* binding */ makePgArray),\n/* harmony export */   aT: () => (/* binding */ DefaultViewBuilderCore),\n/* harmony export */   aU: () => (/* binding */ ViewBuilder),\n/* harmony export */   aV: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   aW: () => (/* binding */ MaterializedViewBuilderCore),\n/* harmony export */   aX: () => (/* binding */ MaterializedViewBuilder),\n/* harmony export */   aY: () => (/* binding */ ManualMaterializedViewBuilder),\n/* harmony export */   aZ: () => (/* binding */ PgViewBase),\n/* harmony export */   a_: () => (/* binding */ PgViewConfig),\n/* harmony export */   aa: () => (/* binding */ PgJsonb),\n/* harmony export */   ab: () => (/* binding */ jsonb),\n/* harmony export */   ac: () => (/* binding */ PgNumericBuilder),\n/* harmony export */   ad: () => (/* binding */ PgNumeric),\n/* harmony export */   ae: () => (/* binding */ numeric),\n/* harmony export */   af: () => (/* binding */ decimal),\n/* harmony export */   ag: () => (/* binding */ PgTimeBuilder),\n/* harmony export */   ah: () => (/* binding */ PgTime),\n/* harmony export */   ai: () => (/* binding */ time),\n/* harmony export */   aj: () => (/* binding */ PgTimestampBuilder),\n/* harmony export */   ak: () => (/* binding */ PgTimestamp),\n/* harmony export */   al: () => (/* binding */ PgTimestampStringBuilder),\n/* harmony export */   am: () => (/* binding */ PgTimestampString),\n/* harmony export */   an: () => (/* binding */ timestamp),\n/* harmony export */   ao: () => (/* binding */ PgUUIDBuilder),\n/* harmony export */   ap: () => (/* binding */ PgUUID),\n/* harmony export */   aq: () => (/* binding */ uuid),\n/* harmony export */   ar: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   as: () => (/* binding */ ForeignKey),\n/* harmony export */   at: () => (/* binding */ foreignKey),\n/* harmony export */   au: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   av: () => (/* binding */ IndexBuilder),\n/* harmony export */   aw: () => (/* binding */ Index),\n/* harmony export */   ax: () => (/* binding */ index),\n/* harmony export */   ay: () => (/* binding */ uniqueIndex),\n/* harmony export */   az: () => (/* binding */ primaryKey),\n/* harmony export */   b: () => (/* binding */ Param),\n/* harmony export */   b0: () => (/* binding */ PgMaterializedViewConfig),\n/* harmony export */   b1: () => (/* binding */ PgMaterializedView),\n/* harmony export */   b2: () => (/* binding */ pgView),\n/* harmony export */   b3: () => (/* binding */ pgMaterializedView),\n/* harmony export */   b4: () => (/* binding */ ColumnAliasProxyHandler),\n/* harmony export */   b5: () => (/* binding */ RelationTableAliasProxyHandler),\n/* harmony export */   b6: () => (/* binding */ aliasedRelation),\n/* harmony export */   b7: () => (/* binding */ hasOwnEntityKind),\n/* harmony export */   b8: () => (/* binding */ bindIfParam),\n/* harmony export */   b9: () => (/* binding */ ne),\n/* harmony export */   bA: () => (/* binding */ createOne),\n/* harmony export */   bB: () => (/* binding */ createMany),\n/* harmony export */   bC: () => (/* binding */ FakePrimitiveParam),\n/* harmony export */   bD: () => (/* binding */ isSQLWrapper),\n/* harmony export */   bE: () => (/* binding */ StringChunk),\n/* harmony export */   bF: () => (/* binding */ Name),\n/* harmony export */   bG: () => (/* binding */ name),\n/* harmony export */   bH: () => (/* binding */ isDriverValueEncoder),\n/* harmony export */   bI: () => (/* binding */ noopDecoder),\n/* harmony export */   bJ: () => (/* binding */ noopEncoder),\n/* harmony export */   bK: () => (/* binding */ noopMapper),\n/* harmony export */   bL: () => (/* binding */ param),\n/* harmony export */   bM: () => (/* binding */ Placeholder),\n/* harmony export */   bN: () => (/* binding */ placeholder),\n/* harmony export */   bO: () => (/* binding */ TableName),\n/* harmony export */   bP: () => (/* binding */ Schema),\n/* harmony export */   bQ: () => (/* binding */ Columns),\n/* harmony export */   bR: () => (/* binding */ OriginalName),\n/* harmony export */   bS: () => (/* binding */ BaseName),\n/* harmony export */   bT: () => (/* binding */ IsAlias),\n/* harmony export */   bU: () => (/* binding */ ExtraConfigBuilder),\n/* harmony export */   bV: () => (/* binding */ isTable),\n/* harmony export */   bW: () => (/* binding */ iife),\n/* harmony export */   ba: () => (/* binding */ or),\n/* harmony export */   bb: () => (/* binding */ not),\n/* harmony export */   bc: () => (/* binding */ gt),\n/* harmony export */   bd: () => (/* binding */ gte),\n/* harmony export */   be: () => (/* binding */ lt),\n/* harmony export */   bf: () => (/* binding */ lte),\n/* harmony export */   bg: () => (/* binding */ inArray),\n/* harmony export */   bh: () => (/* binding */ notInArray),\n/* harmony export */   bi: () => (/* binding */ isNull),\n/* harmony export */   bj: () => (/* binding */ isNotNull),\n/* harmony export */   bk: () => (/* binding */ exists),\n/* harmony export */   bl: () => (/* binding */ notExists),\n/* harmony export */   bm: () => (/* binding */ between),\n/* harmony export */   bn: () => (/* binding */ notBetween),\n/* harmony export */   bo: () => (/* binding */ like),\n/* harmony export */   bp: () => (/* binding */ notLike),\n/* harmony export */   bq: () => (/* binding */ ilike),\n/* harmony export */   br: () => (/* binding */ notIlike),\n/* harmony export */   bs: () => (/* binding */ arrayContains),\n/* harmony export */   bt: () => (/* binding */ arrayContained),\n/* harmony export */   bu: () => (/* binding */ arrayOverlaps),\n/* harmony export */   bv: () => (/* binding */ asc),\n/* harmony export */   bw: () => (/* binding */ desc),\n/* harmony export */   bx: () => (/* binding */ Relation),\n/* harmony export */   by: () => (/* binding */ Relations),\n/* harmony export */   bz: () => (/* binding */ relations),\n/* harmony export */   c: () => (/* binding */ createTableRelationsHelpers),\n/* harmony export */   d: () => (/* binding */ mapUpdateSet),\n/* harmony export */   e: () => (/* binding */ entityKind),\n/* harmony export */   f: () => (/* binding */ fillPlaceholders),\n/* harmony export */   g: () => (/* binding */ mapRelationalRow),\n/* harmony export */   h: () => (/* binding */ QueryBuilder),\n/* harmony export */   i: () => (/* binding */ is),\n/* harmony export */   j: () => (/* binding */ SelectionProxyHandler),\n/* harmony export */   k: () => (/* binding */ PgSelectBuilder),\n/* harmony export */   l: () => (/* binding */ TransactionRollbackError),\n/* harmony export */   m: () => (/* binding */ mapResultRow),\n/* harmony export */   n: () => (/* binding */ TableAliasProxyHandler),\n/* harmony export */   o: () => (/* binding */ orderSelectedFields),\n/* harmony export */   p: () => (/* binding */ Column),\n/* harmony export */   q: () => (/* binding */ getTableName),\n/* harmony export */   r: () => (/* binding */ Subquery),\n/* harmony export */   s: () => (/* binding */ sql),\n/* harmony export */   t: () => (/* binding */ tracer),\n/* harmony export */   u: () => (/* binding */ SubqueryConfig),\n/* harmony export */   v: () => (/* binding */ View),\n/* harmony export */   w: () => (/* binding */ aliasedTableColumn),\n/* harmony export */   x: () => (/* binding */ getOperators),\n/* harmony export */   y: () => (/* binding */ mapColumnsInSQLToAlias),\n/* harmony export */   z: () => (/* binding */ mapColumnsInAliasedSQLToAlias)\n/* harmony export */ });\nconst entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n    if (!value || typeof value !== \"object\") {\n        return false;\n    }\n    if (value instanceof type) {\n        return true;\n    }\n    if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n        throw new Error(`Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`);\n    }\n    let cls = value.constructor;\n    if (cls) {\n        // Traverse the prototype chain to find the entityKind\n        while(cls){\n            if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n                return true;\n            }\n            cls = Object.getPrototypeOf(cls);\n        }\n    }\n    return false;\n}\n/*\n    `Column` only accepts a full `ColumnConfig` as its generic.\n    To infer parts of the config, use `AnyColumn` that accepts a partial config.\n    See `GetColumnData` for example usage of inferring.\n*/ class Column {\n    static{\n        this[entityKind] = \"Column\";\n    }\n    constructor(table, config){\n        this.enumValues = undefined;\n        this.table = table;\n        this.config = config;\n        this.name = config.name;\n        this.notNull = config.notNull;\n        this.default = config.default;\n        this.defaultFn = config.defaultFn;\n        this.hasDefault = config.hasDefault;\n        this.primary = config.primaryKey;\n        this.isUnique = config.isUnique;\n        this.uniqueName = config.uniqueName;\n        this.uniqueType = config.uniqueType;\n        this.dataType = config.dataType;\n        this.columnType = config.columnType;\n    }\n    mapFromDriverValue(value) {\n        return value;\n    }\n    mapToDriverValue(value) {\n        return value;\n    }\n}\nconst ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nclass View {\n    static{\n        this[entityKind] = \"View\";\n    }\n    constructor({ name, schema, selectedFields, query }){\n        this[ViewBaseConfig] = {\n            name,\n            originalName: name,\n            schema,\n            selectedFields,\n            query: query,\n            isExisting: !query,\n            isAlias: false\n        };\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nconst SubqueryConfig = Symbol.for(\"drizzle:SubqueryConfig\");\nclass Subquery {\n    static{\n        this[entityKind] = \"Subquery\";\n    }\n    constructor(sql, selection, alias, isWith = false){\n        this[SubqueryConfig] = {\n            sql,\n            selection,\n            alias,\n            isWith\n        };\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nclass WithSubquery extends Subquery {\n    static{\n        this[entityKind] = \"WithSubquery\";\n    }\n}\nclass SelectionProxyHandler {\n    static{\n        this[entityKind] = \"SelectionProxyHandler\";\n    }\n    constructor(config){\n        this.config = {\n            ...config\n        };\n    }\n    get(subquery, prop) {\n        if (prop === SubqueryConfig) {\n            return {\n                ...subquery[SubqueryConfig],\n                selection: new Proxy(subquery[SubqueryConfig].selection, this)\n            };\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...subquery[ViewBaseConfig],\n                selectedFields: new Proxy(subquery[ViewBaseConfig].selectedFields, this)\n            };\n        }\n        if (typeof prop === \"symbol\") {\n            return subquery[prop];\n        }\n        const columns = is(subquery, Subquery) ? subquery[SubqueryConfig].selection : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;\n        const value = columns[prop];\n        if (is(value, SQL.Aliased)) {\n            // Never return the underlying SQL expression for a field previously selected in a subquery\n            if (this.config.sqlAliasedBehavior === \"sql\" && !value.isSelectionField) {\n                return value.sql;\n            }\n            const newValue = value.clone();\n            newValue.isSelectionField = true;\n            return newValue;\n        }\n        if (is(value, SQL)) {\n            if (this.config.sqlBehavior === \"sql\") {\n                return value;\n            }\n            throw new Error(`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`);\n        }\n        if (is(value, Column)) {\n            if (this.config.alias) {\n                return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(value.table, new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false))));\n            }\n            return value;\n        }\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        return new Proxy(value, new SelectionProxyHandler(this.config));\n    }\n}\n/** @internal */ function mapResultRow(columns, row, joinsNotNullableMap) {\n    // Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n    const nullifyMap = {};\n    const result = columns.reduce((result, { path, field }, columnIndex)=>{\n        let decoder;\n        if (is(field, Column)) {\n            decoder = field;\n        } else if (is(field, SQL)) {\n            decoder = field.decoder;\n        } else {\n            decoder = field.sql.decoder;\n        }\n        let node = result;\n        for (const [pathChunkIndex, pathChunk] of path.entries()){\n            if (pathChunkIndex < path.length - 1) {\n                if (!(pathChunk in node)) {\n                    node[pathChunk] = {};\n                }\n                node = node[pathChunk];\n            } else {\n                const rawValue = row[columnIndex];\n                const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n                if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n                    const objectName = path[0];\n                    if (!(objectName in nullifyMap)) {\n                        nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n                    } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n                        nullifyMap[objectName] = false;\n                    }\n                }\n            }\n        }\n        return result;\n    }, {});\n    // Nullify all nested objects from nullifyMap that are nullable\n    if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n        for (const [objectName, tableName] of Object.entries(nullifyMap)){\n            if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n                result[objectName] = null;\n            }\n        }\n    }\n    return result;\n}\n/** @internal */ function orderSelectedFields(fields, pathPrefix) {\n    return Object.entries(fields).reduce((result, [name, field])=>{\n        if (typeof name !== \"string\") {\n            return result;\n        }\n        const newPath = pathPrefix ? [\n            ...pathPrefix,\n            name\n        ] : [\n            name\n        ];\n        if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n            result.push({\n                path: newPath,\n                field\n            });\n        } else if (is(field, Table)) {\n            result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n        } else {\n            result.push(...orderSelectedFields(field, newPath));\n        }\n        return result;\n    }, []);\n}\n/** @internal */ function mapUpdateSet(table, values) {\n    const entries = Object.entries(values).filter(([, value])=>value !== undefined).map(([key, value])=>{\n        // eslint-disable-next-line unicorn/prefer-ternary\n        if (is(value, SQL)) {\n            return [\n                key,\n                value\n            ];\n        } else {\n            return [\n                key,\n                new Param(value, table[Table.Symbol.Columns][key])\n            ];\n        }\n    });\n    if (entries.length === 0) {\n        throw new Error(\"No values to set\");\n    }\n    return Object.fromEntries(entries);\n}\n/** @internal */ function applyMixins(baseClass, extendedClasses) {\n    for (const extendedClass of extendedClasses){\n        for (const name of Object.getOwnPropertyNames(extendedClass.prototype)){\n            Object.defineProperty(baseClass.prototype, name, Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null));\n        }\n    }\n}\nfunction getTableColumns(table) {\n    return table[Table.Symbol.Columns];\n}\n/** @internal */ function getTableLikeName(table) {\n    return is(table, Subquery) ? table[SubqueryConfig].alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? undefined : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction iife(fn, ...args) {\n    return fn(...args);\n}\n/** @internal */ const TableName = Symbol.for(\"drizzle:Name\");\n/** @internal */ const Schema = Symbol.for(\"drizzle:Schema\");\n/** @internal */ const Columns = Symbol.for(\"drizzle:Columns\");\n/** @internal */ const OriginalName = Symbol.for(\"drizzle:OriginalName\");\n/** @internal */ const BaseName = Symbol.for(\"drizzle:BaseName\");\n/** @internal */ const IsAlias = Symbol.for(\"drizzle:IsAlias\");\n/** @internal */ const ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n    static{\n        this[entityKind] = \"Table\";\n    }\n    static{\n        /** @internal */ this.Symbol = {\n            Name: TableName,\n            Schema: Schema,\n            OriginalName: OriginalName,\n            Columns: Columns,\n            BaseName: BaseName,\n            IsAlias: IsAlias,\n            ExtraConfigBuilder: ExtraConfigBuilder\n        };\n    }\n    constructor(name, schema, baseName){\n        /** @internal */ this[IsAlias] = false;\n        /** @internal */ this[ExtraConfigBuilder] = undefined;\n        this[IsDrizzleTable] = true;\n        this[TableName] = this[OriginalName] = name;\n        this[Schema] = schema;\n        this[BaseName] = baseName;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nfunction isTable(table) {\n    return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n    return table[TableName];\n}\nlet prop;\nclass QueryPromise {\n    static{\n        prop = Symbol.toStringTag;\n    }\n    static{\n        this[entityKind] = \"QueryPromise\";\n    }\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n    finally(onFinally) {\n        return this.then((value)=>{\n            onFinally?.();\n            return value;\n        }, (reason)=>{\n            onFinally?.();\n            throw reason;\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this.execute().then(onFulfilled, onRejected);\n    }\n    constructor(){\n        this[prop] = \"QueryPromise\";\n    }\n}\n/** @internal */ const tracer = {\n    startActiveSpan (name, fn) {\n        {\n            return fn();\n        }\n    }\n};\nclass DrizzleError extends Error {\n    static{\n        this[entityKind] = \"DrizzleError\";\n    }\n    constructor(message){\n        super(message);\n        this.name = \"DrizzleError\";\n    }\n    static wrap(error, message) {\n        return error instanceof Error // eslint-disable-line no-instanceof/no-instanceof\n         ? new DrizzleError(message ? `${message}: ${error.message}` : error.message) : new DrizzleError(message ?? String(error));\n    }\n}\nclass TransactionRollbackError extends DrizzleError {\n    static{\n        this[entityKind] = \"TransactionRollbackError\";\n    }\n    constructor(){\n        super(\"Rollback\");\n    }\n}\n/** @internal */ const InlineForeignKeys = Symbol.for(\"drizzle:PgInlineForeignKeys\");\nlet prop1;\nclass PgTable extends Table {\n    static{\n        prop1 = Table.Symbol.ExtraConfigBuilder;\n    }\n    static{\n        this[entityKind] = \"PgTable\";\n    }\n    static{\n        /** @internal */ this.Symbol = Object.assign({}, Table.Symbol, {\n            InlineForeignKeys: InlineForeignKeys\n        });\n    }\n    constructor(...args){\n        super(...args);\n        /**@internal */ this[InlineForeignKeys] = [];\n        /** @internal */ this[prop1] = undefined;\n    }\n}\n/** @internal */ function pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new PgTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilderBase])=>{\n        const colBuilder = colBuilderBase;\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [\n            name,\n            column\n        ];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[Table.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst pgTable = (name, columns, extraConfig)=>{\n    return pgTableWithSchema(name, columns, extraConfig, undefined);\n};\nfunction pgTableCreator(customizeTableName) {\n    return (name, columns, extraConfig)=>{\n        return pgTableWithSchema(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\nclass CheckBuilder {\n    static{\n        this[entityKind] = \"PgCheckBuilder\";\n    }\n    constructor(name, value){\n        this.name = name;\n        this.value = value;\n    }\n    /** @internal */ build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    static{\n        this[entityKind] = \"PgCheck\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\nclass ForeignKeyBuilder {\n    static{\n        this[entityKind] = \"PgForeignKeyBuilder\";\n    }\n    constructor(config, actions){\n        /** @internal */ this._onUpdate = \"no action\";\n        /** @internal */ this._onDelete = \"no action\";\n        this.reference = ()=>{\n            const { columns, foreignColumns } = config();\n            return {\n                columns,\n                foreignTable: foreignColumns[0].table,\n                foreignColumns\n            };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action === undefined ? \"no action\" : action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action === undefined ? \"no action\" : action;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    static{\n        this[entityKind] = \"PgForeignKey\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column)=>column.name);\n        const foreignColumnNames = foreignColumns.map((column)=>column.name);\n        const chunks = [\n            this.table[PgTable.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[PgTable.Symbol.Name],\n            ...foreignColumnNames\n        ];\n        return `${chunks.join(\"_\")}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config;\n        return {\n            columns,\n            foreignColumns\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\nclass IndexBuilderOn {\n    static{\n        this[entityKind] = \"PgIndexBuilderOn\";\n    }\n    constructor(unique, name){\n        this.unique = unique;\n        this.name = name;\n    }\n    on(...columns) {\n        return new IndexBuilder(columns, this.unique, false, this.name);\n    }\n    onOnly(...columns) {\n        return new IndexBuilder(columns, this.unique, true, this.name);\n    }\n}\nclass IndexBuilder {\n    static{\n        this[entityKind] = \"PgIndexBuilder\";\n    }\n    constructor(columns, unique, only, name){\n        this.config = {\n            name,\n            columns,\n            unique,\n            only\n        };\n    }\n    concurrently() {\n        this.config.concurrently = true;\n        return this;\n    }\n    using(method) {\n        this.config.using = method;\n        return this;\n    }\n    asc() {\n        this.config.order = \"asc\";\n        return this;\n    }\n    desc() {\n        this.config.order = \"desc\";\n        return this;\n    }\n    nullsFirst() {\n        this.config.nulls = \"first\";\n        return this;\n    }\n    nullsLast() {\n        this.config.nulls = \"last\";\n        return this;\n    }\n    where(condition) {\n        this.config.where = condition;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static{\n        this[entityKind] = \"PgIndex\";\n    }\n    constructor(config, table){\n        this.config = {\n            ...config,\n            table\n        };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(true, name);\n}\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static{\n        this[entityKind] = \"PgPrimaryKeyBuilder\";\n    }\n    constructor(columns){\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    static{\n        this[entityKind] = \"PgPrimaryKey\";\n    }\n    constructor(table, columns){\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column)=>column.name).join(\"_\")}_pk`;\n    }\n}\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[PgTable.Symbol.Name]}_${columns.join(\"_\")}_unique`;\n}\nclass UniqueConstraintBuilder {\n    static{\n        this[entityKind] = \"PgUniqueConstraintBuilder\";\n    }\n    constructor(columns, name){\n        /** @internal */ this.nullsNotDistinctConfig = false;\n        this.name = name;\n        this.columns = columns;\n    }\n    nullsNotDistinct() {\n        this.nullsNotDistinctConfig = true;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static{\n        this[entityKind] = \"PgUniqueOnConstraintBuilder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    static{\n        this[entityKind] = \"PgUniqueConstraint\";\n    }\n    constructor(table, columns, nullsNotDistinct, name){\n        this.nullsNotDistinct = false;\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column)=>column.name));\n        this.nullsNotDistinct = nullsNotDistinct;\n    }\n    getName() {\n        return this.name;\n    }\n}\nfunction getTableConfig(table) {\n    const columns = Object.values(table[Table.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const foreignKeys = Object.values(table[PgTable.Symbol.InlineForeignKeys]);\n    const uniqueConstraints = [];\n    const name = table[Table.Symbol.Name];\n    const schema = table[Table.Symbol.Schema];\n    const extraConfigBuilder = table[PgTable.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[Table.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)){\n            if (is(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            } else if (is(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            } else if (is(builder, UniqueConstraintBuilder)) {\n                uniqueConstraints.push(builder.build(table));\n            } else if (is(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            } else if (is(builder, ForeignKeyBuilder)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name,\n        schema\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgViewConfig]\n    };\n}\nfunction getMaterializedViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgMaterializedViewConfig]\n    };\n}\nfunction parsePgArrayValue(arrayString, startFrom, inQuotes) {\n    for(let i = startFrom; i < arrayString.length; i++){\n        const char = arrayString[i];\n        if (char === \"\\\\\") {\n            i++;\n            continue;\n        }\n        if (char === '\"') {\n            return [\n                arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"),\n                i + 1\n            ];\n        }\n        if (inQuotes) {\n            continue;\n        }\n        if (char === \",\" || char === \"}\") {\n            return [\n                arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"),\n                i\n            ];\n        }\n    }\n    return [\n        arrayString.slice(startFrom).replace(/\\\\/g, \"\"),\n        arrayString.length\n    ];\n}\nfunction parsePgNestedArray(arrayString, startFrom = 0) {\n    const result = [];\n    let i = startFrom;\n    let lastCharIsComma = false;\n    while(i < arrayString.length){\n        const char = arrayString[i];\n        if (char === \",\") {\n            if (lastCharIsComma || i === startFrom) {\n                result.push(\"\");\n            }\n            lastCharIsComma = true;\n            i++;\n            continue;\n        }\n        lastCharIsComma = false;\n        if (char === \"\\\\\") {\n            i += 2;\n            continue;\n        }\n        if (char === '\"') {\n            const [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        if (char === \"}\") {\n            return [\n                result,\n                i + 1\n            ];\n        }\n        if (char === \"{\") {\n            const [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n        result.push(value);\n        i = newStartFrom;\n    }\n    return [\n        result,\n        i\n    ];\n}\nfunction parsePgArray(arrayString) {\n    const [result] = parsePgNestedArray(arrayString, 1);\n    return result;\n}\nfunction makePgArray(array) {\n    return `{${array.map((item)=>{\n        if (Array.isArray(item)) {\n            return makePgArray(item);\n        }\n        if (typeof item === \"string\" && item.includes(\",\")) {\n            return `\"${item.replace(/\"/g, '\\\\\"')}\"`;\n        }\n        return `${item}`;\n    }).join(\",\")}}`;\n}\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nclass ColumnBuilder {\n    static{\n        this[entityKind] = \"ColumnBuilder\";\n    }\n    constructor(name, dataType, columnType){\n        /**\n     * Alias for {@link $defaultFn}.\n     */ this.$default = this.$defaultFn;\n        this.config = {\n            name,\n            notNull: false,\n            default: undefined,\n            hasDefault: false,\n            primaryKey: false,\n            isUnique: false,\n            uniqueName: undefined,\n            uniqueType: undefined,\n            dataType,\n            columnType\n        };\n    }\n    /**\n     * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n     *\n     * @example\n     * ```ts\n     * const users = pgTable('users', {\n     * \tid: integer('id').$type<UserId>().primaryKey(),\n     * \tdetails: json('details').$type<UserDetails>().notNull(),\n     * });\n     * ```\n     */ $type() {\n        return this;\n    }\n    /**\n     * Adds a `not null` clause to the column definition.\n     *\n     * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n     */ notNull() {\n        this.config.notNull = true;\n        return this;\n    }\n    /**\n     * Adds a `default <value>` clause to the column definition.\n     *\n     * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n     *\n     * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n     */ default(value) {\n        this.config.default = value;\n        this.config.hasDefault = true;\n        return this;\n    }\n    /**\n     * Adds a dynamic default value to the column.\n     * The function will be called when the row is inserted, and the returned value will be used as the column value.\n     *\n     * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n     */ $defaultFn(fn) {\n        this.config.defaultFn = fn;\n        this.config.hasDefault = true;\n        return this;\n    }\n    /**\n     * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n     *\n     * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n     */ primaryKey() {\n        this.config.primaryKey = true;\n        this.config.notNull = true;\n        return this;\n    }\n}\nclass PgColumnBuilder extends ColumnBuilder {\n    static{\n        this[entityKind] = \"PgColumnBuilder\";\n    }\n    array(size) {\n        return new PgArrayBuilder(this.config.name, this, size);\n    }\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({\n            ref,\n            actions\n        });\n        return this;\n    }\n    unique(name, config) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        this.config.uniqueType = config?.nulls;\n        return this;\n    }\n    /** @internal */ buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions })=>{\n            return iife((ref, actions)=>{\n                const builder = new ForeignKeyBuilder(()=>{\n                    const foreignColumn = ref();\n                    return {\n                        columns: [\n                            column\n                        ],\n                        foreignColumns: [\n                            foreignColumn\n                        ]\n                    };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            }, ref, actions);\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.foreignKeyConfigs = [];\n    }\n}\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nclass PgColumn extends Column {\n    static{\n        this[entityKind] = \"PgColumn\";\n    }\n    constructor(table, config){\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [\n                config.name\n            ]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\nclass PgArrayBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgArrayBuilder\";\n    }\n    constructor(name, baseBuilder, size){\n        super(name, \"array\", \"PgArray\");\n        this.config.baseBuilder = baseBuilder;\n        this.config.size = size;\n    }\n    /** @internal */ build(table) {\n        const baseColumn = this.config.baseBuilder.build(table);\n        return new PgArray(table, this.config, baseColumn);\n    }\n}\nclass PgArray extends PgColumn {\n    static{\n        this[entityKind] = \"PgArray\";\n    }\n    constructor(table, config, baseColumn, range){\n        super(table, config);\n        this.baseColumn = baseColumn;\n        this.range = range;\n        this.size = config.size;\n    }\n    getSQLType() {\n        return `${this.baseColumn.getSQLType()}[${typeof this.size === \"number\" ? this.size : \"\"}]`;\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            // Thank you node-postgres for not parsing enum arrays\n            value = parsePgArray(value);\n        }\n        return value.map((v)=>this.baseColumn.mapFromDriverValue(v));\n    }\n    mapToDriverValue(value, isNestedArray = false) {\n        const a = value.map((v)=>v === null ? null : is(this.baseColumn, PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v));\n        if (isNestedArray) return a;\n        return makePgArray(a);\n    }\n}\nclass PgDateColumnBaseBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgDateColumnBaseBuilder\";\n    }\n    defaultNow() {\n        return this.default(sql`now()`);\n    }\n}\nclass PgDateBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgDateBuilder\";\n    }\n    constructor(name){\n        super(name, \"date\", \"PgDate\");\n    }\n    /** @internal */ build(table) {\n        return new PgDate(table, this.config);\n    }\n}\nclass PgDate extends PgColumn {\n    static{\n        this[entityKind] = \"PgDate\";\n    }\n    getSQLType() {\n        return \"date\";\n    }\n    mapFromDriverValue(value) {\n        return new Date(value);\n    }\n    mapToDriverValue(value) {\n        return value.toISOString();\n    }\n}\nclass PgDateStringBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgDateStringBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgDateString\");\n    }\n    /** @internal */ build(table) {\n        return new PgDateString(table, this.config);\n    }\n}\nclass PgDateString extends PgColumn {\n    static{\n        this[entityKind] = \"PgDateString\";\n    }\n    getSQLType() {\n        return \"date\";\n    }\n}\nfunction date(name, config) {\n    if (config?.mode === \"date\") {\n        return new PgDateBuilder(name);\n    }\n    return new PgDateStringBuilder(name);\n}\nclass PgJsonBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgJsonBuilder\";\n    }\n    constructor(name){\n        super(name, \"json\", \"PgJson\");\n    }\n    /** @internal */ build(table) {\n        return new PgJson(table, this.config);\n    }\n}\nclass PgJson extends PgColumn {\n    static{\n        this[entityKind] = \"PgJson\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return \"json\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch  {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction json(name) {\n    return new PgJsonBuilder(name);\n}\nclass PgJsonbBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgJsonbBuilder\";\n    }\n    constructor(name){\n        super(name, \"json\", \"PgJsonb\");\n    }\n    /** @internal */ build(table) {\n        return new PgJsonb(table, this.config);\n    }\n}\nclass PgJsonb extends PgColumn {\n    static{\n        this[entityKind] = \"PgJsonb\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return \"jsonb\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch  {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction jsonb(name) {\n    return new PgJsonbBuilder(name);\n}\nclass PgNumericBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgNumericBuilder\";\n    }\n    constructor(name, precision, scale){\n        super(name, \"string\", \"PgNumeric\");\n        this.config.precision = precision;\n        this.config.scale = scale;\n    }\n    /** @internal */ build(table) {\n        return new PgNumeric(table, this.config);\n    }\n}\nclass PgNumeric extends PgColumn {\n    static{\n        this[entityKind] = \"PgNumeric\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.precision = config.precision;\n        this.scale = config.scale;\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `numeric(${this.precision}, ${this.scale})`;\n        } else if (this.precision === undefined) {\n            return \"numeric\";\n        } else {\n            return `numeric(${this.precision})`;\n        }\n    }\n}\nfunction numeric(name, config) {\n    return new PgNumericBuilder(name, config?.precision, config?.scale);\n}\nconst decimal = numeric;\nclass PgTimeBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimeBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name, \"string\", \"PgTime\");\n        this.withTimezone = withTimezone;\n        this.precision = precision;\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTime(table, this.config);\n    }\n}\nclass PgTime extends PgColumn {\n    static{\n        this[entityKind] = \"PgTime\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : `(${this.precision})`;\n        return `time${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nfunction time(name, config = {}) {\n    return new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\nclass PgTimestampBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimestampBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name, \"date\", \"PgTimestamp\");\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTimestamp(table, this.config);\n    }\n}\nclass PgTimestamp extends PgColumn {\n    static{\n        this[entityKind] = \"PgTimestamp\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.mapFromDriverValue = (value)=>{\n            return new Date(this.withTimezone ? value : value + \"+0000\");\n        };\n        this.mapToDriverValue = (value)=>{\n            return this.withTimezone ? value.toUTCString() : value.toISOString();\n        };\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : ` (${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nclass PgTimestampStringBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimestampStringBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name, \"string\", \"PgTimestampString\");\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTimestampString(table, this.config);\n    }\n}\nclass PgTimestampString extends PgColumn {\n    static{\n        this[entityKind] = \"PgTimestampString\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : `(${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nfunction timestamp(name, config = {}) {\n    if (config.mode === \"string\") {\n        return new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n    }\n    return new PgTimestampBuilder(name, config.withTimezone ?? false, config.precision);\n}\nclass PgUUIDBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgUUIDBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgUUID\");\n    }\n    /**\n     * Adds `default gen_random_uuid()` to the column definition.\n     */ defaultRandom() {\n        return this.default(sql`gen_random_uuid()`);\n    }\n    /** @internal */ build(table) {\n        return new PgUUID(table, this.config);\n    }\n}\nclass PgUUID extends PgColumn {\n    static{\n        this[entityKind] = \"PgUUID\";\n    }\n    getSQLType() {\n        return \"uuid\";\n    }\n}\nfunction uuid(name) {\n    return new PgUUIDBuilder(name);\n}\nclass PgDialect {\n    static{\n        this[entityKind] = \"PgDialect\";\n    }\n    async migrate(migrations, session) {\n        const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS \"drizzle\".\"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n        await session.execute(sql`CREATE SCHEMA IF NOT EXISTS \"drizzle\"`);\n        await session.execute(migrationTableCreate);\n        const dbMigrations = await session.all(sql`select id, hash, created_at from \"drizzle\".\"__drizzle_migrations\" order by created_at desc limit 1`);\n        const lastDbMigration = dbMigrations[0];\n        await session.transaction(async (tx)=>{\n            for await (const migration of migrations){\n                if (!lastDbMigration || Number(lastDbMigration.created_at) < migration.folderMillis) {\n                    for (const stmt of migration.sql){\n                        await tx.execute(sql.raw(stmt));\n                    }\n                    await tx.execute(sql`insert into \"drizzle\".\"__drizzle_migrations\" (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n    escapeName(name) {\n        return `\"${name}\"`;\n    }\n    escapeParam(num) {\n        return `$${num + 1}`;\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? sql` where ${where}` : undefined;\n        return sql`delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return sql.join(setEntries.flatMap(([colName, value], i)=>{\n            const col = table[Table.Symbol.Columns][colName];\n            const res = sql`${sql.identifier(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [\n                    res,\n                    sql.raw(\", \")\n                ];\n            }\n            return [\n                res\n            ];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? sql` where ${where}` : undefined;\n        return sql`update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */ buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields.flatMap(({ field }, i)=>{\n            const chunk = [];\n            if (is(field, SQL.Aliased) && field.isSelectionField) {\n                chunk.push(sql.identifier(field.fieldAlias));\n            } else if (is(field, SQL.Aliased) || is(field, SQL)) {\n                const query = is(field, SQL.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new SQL(query.queryChunks.map((c)=>{\n                        if (is(c, PgColumn)) {\n                            return sql.identifier(c.name);\n                        }\n                        return c;\n                    })));\n                } else {\n                    chunk.push(query);\n                }\n                if (is(field, SQL.Aliased)) {\n                    chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n                }\n            } else if (is(field, Column)) {\n                if (isSingleTable) {\n                    chunk.push(sql.identifier(field.name));\n                } else {\n                    chunk.push(field);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push(sql`, `);\n            }\n            return chunk;\n        });\n        return sql.join(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, lockingClauses, distinct }) {\n        const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n        for (const f of fieldsList){\n            if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table[SubqueryConfig].alias : is(table, PgViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? undefined : getTableName(table)) && !((table)=>joins?.some(({ alias })=>alias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])))(f.field.table)) {\n                const tableName = getTableName(f.field.table);\n                throw new Error(`Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = !joins || joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [\n                sql`with `\n            ];\n            for (const [i, w] of withList.entries()){\n                withSqlChunks.push(sql`${sql.identifier(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push(sql`, `);\n                }\n            }\n            withSqlChunks.push(sql` `);\n            withSql = sql.join(withSqlChunks);\n        }\n        let distinctSql;\n        if (distinct) {\n            distinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, \", \")})`;\n        }\n        const selection = this.buildSelection(fieldsList, {\n            isSingleTable\n        });\n        const tableSql = (()=>{\n            if (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n                let fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n                if (table[Table.Symbol.Schema]) {\n                    fullName = sql`${sql.identifier(table[Table.Symbol.Schema])}.${fullName}`;\n                }\n                return sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        if (joins) {\n            for (const [index, joinMeta] of joins.entries()){\n                if (index === 0) {\n                    joinsArray.push(sql` `);\n                }\n                const table = joinMeta.table;\n                const lateralSql = joinMeta.lateral ? sql` lateral` : undefined;\n                if (is(table, PgTable)) {\n                    const tableName = table[PgTable.Symbol.Name];\n                    const tableSchema = table[PgTable.Symbol.Schema];\n                    const origTableName = table[PgTable.Symbol.OriginalName];\n                    const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                    joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`);\n                } else if (is(table, View)) {\n                    const viewName = table[ViewBaseConfig].name;\n                    const viewSchema = table[ViewBaseConfig].schema;\n                    const origViewName = table[ViewBaseConfig].originalName;\n                    const alias = viewName === origViewName ? undefined : joinMeta.alias;\n                    joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? sql`${sql.identifier(viewSchema)}.` : undefined}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`);\n                } else {\n                    joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`);\n                }\n                if (index < joins.length - 1) {\n                    joinsArray.push(sql` `);\n                }\n            }\n        }\n        const joinsSql = sql.join(joinsArray);\n        const whereSql = where ? sql` where ${where}` : undefined;\n        const havingSql = having ? sql` having ${having}` : undefined;\n        let orderBySql;\n        if (orderBy && orderBy.length > 0) {\n            orderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n        }\n        let groupBySql;\n        if (groupBy && groupBy.length > 0) {\n            groupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n        }\n        const limitSql = limit ? sql` limit ${limit}` : undefined;\n        const offsetSql = offset ? sql` offset ${offset}` : undefined;\n        const lockingClausesSql = sql.empty();\n        if (lockingClauses) {\n            for (const { strength, config } of lockingClauses){\n                const clauseSql = sql` for ${sql.raw(strength)}`;\n                if (config.of) {\n                    clauseSql.append(sql` of ${config.of}`);\n                }\n                if (config.noWait) {\n                    clauseSql.append(sql` no wait`);\n                } else if (config.skipLocked) {\n                    clauseSql.append(sql` skip locked`);\n                }\n                lockingClausesSql.append(clauseSql);\n            }\n        }\n        return sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n    }\n    buildInsertQuery({ table, values, onConflict, returning }) {\n        const valuesSqlList = [];\n        const columns = table[Table.Symbol.Columns];\n        const colEntries = Object.entries(columns);\n        const insertOrder = colEntries.map(([, column])=>sql.identifier(column.name));\n        for (const [valueIndex, value] of values.entries()){\n            const valueList = [];\n            for (const [fieldName, col] of colEntries){\n                const colValue = value[fieldName];\n                if (colValue === undefined || is(colValue, Param) && colValue.value === undefined) {\n                    // eslint-disable-next-line unicorn/no-negated-condition\n                    if (col.defaultFn !== undefined) {\n                        const defaultFnResult = col.defaultFn();\n                        const defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n                        valueList.push(defaultValue);\n                    } else {\n                        valueList.push(sql`default`);\n                    }\n                } else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push(sql`, `);\n            }\n        }\n        const valuesSql = sql.join(valuesSqlList);\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n        return sql`insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n    }\n    buildRefreshMaterializedViewQuery({ view, concurrently, withNoData }) {\n        const concurrentlySql = concurrently ? sql` concurrently` : undefined;\n        const withNoDataSql = withNoData ? sql` with no data` : undefined;\n        return sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n    }\n    prepareTyping(encoder) {\n        if (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n            return \"json\";\n        } else if (is(encoder, PgNumeric)) {\n            return \"decimal\";\n        } else if (is(encoder, PgTime)) {\n            return \"time\";\n        } else if (is(encoder, PgTimestamp)) {\n            return \"timestamp\";\n        } else if (is(encoder, PgDate)) {\n            return \"date\";\n        } else if (is(encoder, PgUUID)) {\n            return \"uuid\";\n        } else {\n            return \"none\";\n        }\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString,\n            prepareTyping: this.prepareTyping\n        });\n    }\n    // buildRelationalQueryWithPK({\n    // \tfullSchema,\n    // \tschema,\n    // \ttableNamesMap,\n    // \ttable,\n    // \ttableConfig,\n    // \tqueryConfig: config,\n    // \ttableAlias,\n    // \tisRoot = false,\n    // \tjoinOn,\n    // }: {\n    // \tfullSchema: Record<string, unknown>;\n    // \tschema: TablesRelationalConfig;\n    // \ttableNamesMap: Record<string, string>;\n    // \ttable: PgTable;\n    // \ttableConfig: TableRelationalConfig;\n    // \tqueryConfig: true | DBQueryConfig<'many', true>;\n    // \ttableAlias: string;\n    // \tisRoot?: boolean;\n    // \tjoinOn?: SQL;\n    // }): BuildRelationalQueryResult<PgTable, PgColumn> {\n    // \t// For { \"<relation>\": true }, return a table with selection of all columns\n    // \tif (config === true) {\n    // \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n    // \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n    // \t\t\t[key, value],\n    // \t\t) => ({\n    // \t\t\tdbKey: value.name,\n    // \t\t\ttsKey: key,\n    // \t\t\tfield: value as PgColumn,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t\treturn {\n    // \t\t\ttableTsKey: tableConfig.tsName,\n    // \t\t\tsql: table,\n    // \t\t\tselection,\n    // \t\t};\n    // \t}\n    // \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n    // \t// let selectionForBuild = selection;\n    // \tconst aliasedColumns = Object.fromEntries(\n    // \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n    // \t);\n    // \tconst aliasedRelations = Object.fromEntries(\n    // \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n    // \t);\n    // \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n    // \tlet where, hasUserDefinedWhere;\n    // \tif (config.where) {\n    // \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n    // \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n    // \t\thasUserDefinedWhere = !!where;\n    // \t}\n    // \twhere = and(joinOn, where);\n    // \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n    // \tlet joins: Join[] = [];\n    // \tlet selectedColumns: string[] = [];\n    // \t// Figure out which columns to select\n    // \tif (config.columns) {\n    // \t\tlet isIncludeMode = false;\n    // \t\tfor (const [field, value] of Object.entries(config.columns)) {\n    // \t\t\tif (value === undefined) {\n    // \t\t\t\tcontinue;\n    // \t\t\t}\n    // \t\t\tif (field in tableConfig.columns) {\n    // \t\t\t\tif (!isIncludeMode && value === true) {\n    // \t\t\t\t\tisIncludeMode = true;\n    // \t\t\t\t}\n    // \t\t\t\tselectedColumns.push(field);\n    // \t\t\t}\n    // \t\t}\n    // \t\tif (selectedColumns.length > 0) {\n    // \t\t\tselectedColumns = isIncludeMode\n    // \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n    // \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n    // \t\t}\n    // \t} else {\n    // \t\t// Select all columns if selection is not specified\n    // \t\tselectedColumns = Object.keys(tableConfig.columns);\n    // \t}\n    // \t// for (const field of selectedColumns) {\n    // \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n    // \t// \tfieldsSelection.push({ tsKey: field, value: column });\n    // \t// }\n    // \tlet initiallySelectedRelations: {\n    // \t\ttsKey: string;\n    // \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n    // \t\trelation: Relation;\n    // \t}[] = [];\n    // \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n    // \t// Figure out which relations to select\n    // \tif (config.with) {\n    // \t\tinitiallySelectedRelations = Object.entries(config.with)\n    // \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n    // \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n    // \t}\n    // \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n    // \t\tis(r.relation, Many)\n    // \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n    // \t);\n    // \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n    // \tconst isInnermostQuery = manyRelations.length < 2;\n    // \tconst selectedExtras: {\n    // \t\ttsKey: string;\n    // \t\tvalue: SQL.Aliased;\n    // \t}[] = [];\n    // \t// Figure out which extras to select\n    // \tif (isInnermostQuery && config.extras) {\n    // \t\tconst extras = typeof config.extras === 'function'\n    // \t\t\t? config.extras(aliasedFields, { sql })\n    // \t\t\t: config.extras;\n    // \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n    // \t\t\tselectedExtras.push({\n    // \t\t\t\ttsKey,\n    // \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n    // \t\t\t});\n    // \t\t}\n    // \t}\n    // \t// Transform `fieldsSelection` into `selection`\n    // \t// `fieldsSelection` shouldn't be used after this point\n    // \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n    // \t// \tselection.push({\n    // \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n    // \t// \t\ttsKey,\n    // \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n    // \t// \t\trelationTableTsKey: undefined,\n    // \t// \t\tisJson: false,\n    // \t// \t\tisExtra,\n    // \t// \t\tselection: [],\n    // \t// \t});\n    // \t// }\n    // \tlet orderByOrig = typeof config.orderBy === 'function'\n    // \t\t? config.orderBy(aliasedFields, orderByOperators)\n    // \t\t: config.orderBy ?? [];\n    // \tif (!Array.isArray(orderByOrig)) {\n    // \t\torderByOrig = [orderByOrig];\n    // \t}\n    // \tconst orderBy = orderByOrig.map((orderByValue) => {\n    // \t\tif (is(orderByValue, Column)) {\n    // \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n    // \t\t}\n    // \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n    // \t});\n    // \tconst limit = isInnermostQuery ? config.limit : undefined;\n    // \tconst offset = isInnermostQuery ? config.offset : undefined;\n    // \t// For non-root queries without additional config except columns, return a table with selection\n    // \tif (\n    // \t\t!isRoot\n    // \t\t&& initiallySelectedRelations.length === 0\n    // \t\t&& selectedExtras.length === 0\n    // \t\t&& !where\n    // \t\t&& orderBy.length === 0\n    // \t\t&& limit === undefined\n    // \t\t&& offset === undefined\n    // \t) {\n    // \t\treturn {\n    // \t\t\ttableTsKey: tableConfig.tsName,\n    // \t\t\tsql: table,\n    // \t\t\tselection: selectedColumns.map((key) => ({\n    // \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n    // \t\t\t\ttsKey: key,\n    // \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n    // \t\t\t\trelationTableTsKey: undefined,\n    // \t\t\t\tisJson: false,\n    // \t\t\t\tselection: [],\n    // \t\t\t})),\n    // \t\t};\n    // \t}\n    // \tconst selectedRelationsWithoutPK:\n    // \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n    // \tfor (\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\trelation,\n    // \t\t} of initiallySelectedRelations\n    // \t) {\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTable = schema[relationTableTsName]!;\n    // \t\tif (relationTable.primaryKey.length > 0) {\n    // \t\t\tcontinue;\n    // \t\t}\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t\tnestedQueryRelation: relation,\n    // \t\t});\n    // \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n    // \t\tjoins.push({\n    // \t\t\ton: sql`true`,\n    // \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: true,\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelation.selection,\n    // \t\t});\n    // \t}\n    // \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n    // \t\tis(r.relation, One)\n    // \t);\n    // \t// Process all One relations with PKs, because they can all be joined on the same level\n    // \tfor (\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\trelation,\n    // \t\t} of oneRelations\n    // \t) {\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst relationTable = schema[relationTableTsName]!;\n    // \t\tif (relationTable.primaryKey.length === 0) {\n    // \t\t\tcontinue;\n    // \t\t}\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t});\n    // \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n    // \t\t\tsql.join(\n    // \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n    // \t\t\t\t\tis(field, SQL.Aliased)\n    // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n    // \t\t\t\t\t\t: is(field, Column)\n    // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n    // \t\t\t\t\t\t: field\n    // \t\t\t\t),\n    // \t\t\t\tsql`, `,\n    // \t\t\t)\n    // \t\t}) end`.as(selectedRelationTsKey);\n    // \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n    // \t\tjoins.push({\n    // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n    // \t\t\ttable: is(builtRelation.sql, SQL)\n    // \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n    // \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: is(builtRelation.sql, SQL),\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelation.selection,\n    // \t\t});\n    // \t}\n    // \tlet distinct: PgSelectConfig['distinct'];\n    // \tlet tableFrom: PgTable | Subquery = table;\n    // \t// Process first Many relation - each one requires a nested subquery\n    // \tconst manyRelation = manyRelations[0];\n    // \tif (manyRelation) {\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationQueryConfig,\n    // \t\t\trelation,\n    // \t\t} = manyRelation;\n    // \t\tdistinct = {\n    // \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n    // \t\t};\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationQueryConfig,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t});\n    // \t\tconst builtRelationSelectionField = sql`case when ${\n    // \t\t\tsql.identifier(relationTableAlias)\n    // \t\t} is null then '[]' else json_agg(json_build_array(${\n    // \t\t\tsql.join(\n    // \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n    // \t\t\t\t\tis(field, SQL.Aliased)\n    // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n    // \t\t\t\t\t\t: is(field, Column)\n    // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n    // \t\t\t\t\t\t: field\n    // \t\t\t\t),\n    // \t\t\t\tsql`, `,\n    // \t\t\t)\n    // \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n    // \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n    // \t\tjoins.push({\n    // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n    // \t\t\ttable: isLateralJoin\n    // \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n    // \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: isLateralJoin,\n    // \t\t});\n    // \t\t// Build the \"from\" subquery with the remaining Many relations\n    // \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable,\n    // \t\t\ttableConfig,\n    // \t\t\tqueryConfig: {\n    // \t\t\t\t...config,\n    // \t\t\t\twhere: undefined,\n    // \t\t\t\torderBy: undefined,\n    // \t\t\t\tlimit: undefined,\n    // \t\t\t\toffset: undefined,\n    // \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n    // \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n    // \t\t\t\t\t\tresult[tsKey] = configValue;\n    // \t\t\t\t\t\treturn result;\n    // \t\t\t\t\t},\n    // \t\t\t\t\t{},\n    // \t\t\t\t),\n    // \t\t\t},\n    // \t\t\ttableAlias,\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield: builtRelationSelectionField,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelationJoin.selection,\n    // \t\t});\n    // \t\t// selection = builtTableFrom.selection.map((item) =>\n    // \t\t// \tis(item.field, SQL.Aliased)\n    // \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n    // \t\t// \t\t: item\n    // \t\t// );\n    // \t\t// selectionForBuild = [{\n    // \t\t// \tdbKey: '*',\n    // \t\t// \ttsKey: '*',\n    // \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n    // \t\t// \tselection: [],\n    // \t\t// \tisJson: false,\n    // \t\t// \trelationTableTsKey: undefined,\n    // \t\t// }];\n    // \t\t// const newSelectionItem: (typeof selection)[number] = {\n    // \t\t// \tdbKey: selectedRelationTsKey,\n    // \t\t// \ttsKey: selectedRelationTsKey,\n    // \t\t// \tfield,\n    // \t\t// \trelationTableTsKey: relationTableTsName,\n    // \t\t// \tisJson: true,\n    // \t\t// \tselection: builtRelationJoin.selection,\n    // \t\t// };\n    // \t\t// selection.push(newSelectionItem);\n    // \t\t// selectionForBuild.push(newSelectionItem);\n    // \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n    // \t\t\t? builtTableFrom.sql\n    // \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n    // \t}\n    // \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n    // \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n    // \t}\n    // \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n    // \tfunction prepareSelectedColumns() {\n    // \t\treturn selectedColumns.map((key) => ({\n    // \t\t\tdbKey: tableConfig.columns[key]!.name,\n    // \t\t\ttsKey: key,\n    // \t\t\tfield: tableConfig.columns[key] as PgColumn,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t}\n    // \tfunction prepareSelectedExtras() {\n    // \t\treturn selectedExtras.map((item) => ({\n    // \t\t\tdbKey: item.value.fieldAlias,\n    // \t\t\ttsKey: item.tsKey,\n    // \t\t\tfield: item.value,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t}\n    // \tif (isRoot) {\n    // \t\tselection = [\n    // \t\t\t...prepareSelectedColumns(),\n    // \t\t\t...prepareSelectedExtras(),\n    // \t\t];\n    // \t}\n    // \tif (hasUserDefinedWhere || orderBy.length > 0) {\n    // \t\ttableFrom = new Subquery(\n    // \t\t\tthis.buildSelectQuery({\n    // \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n    // \t\t\t\tfields: {},\n    // \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n    // \t\t\t\t\tpath: [],\n    // \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n    // \t\t\t\t})),\n    // \t\t\t\tjoins,\n    // \t\t\t\tdistinct,\n    // \t\t\t}),\n    // \t\t\t{},\n    // \t\t\ttableAlias,\n    // \t\t);\n    // \t\tselectionForBuild = selection.map((item) =>\n    // \t\t\tis(item.field, SQL.Aliased)\n    // \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n    // \t\t\t\t: item\n    // \t\t);\n    // \t\tjoins = [];\n    // \t\tdistinct = undefined;\n    // \t}\n    // \tconst result = this.buildSelectQuery({\n    // \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n    // \t\tfields: {},\n    // \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n    // \t\t\tpath: [],\n    // \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n    // \t\t})),\n    // \t\twhere,\n    // \t\tlimit,\n    // \t\toffset,\n    // \t\tjoins,\n    // \t\torderBy,\n    // \t\tdistinct,\n    // \t});\n    // \treturn {\n    // \t\ttableTsKey: tableConfig.tsName,\n    // \t\tsql: result,\n    // \t\tselection,\n    // \t};\n    // }\n    buildRelationalQueryWithoutPK({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn }) {\n        let selection = [];\n        let limit, offset, orderBy = [], where;\n        const joins = [];\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value])=>({\n                    dbKey: value.name,\n                    tsKey: key,\n                    field: aliasedTableColumn(value, tableAlias),\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                }));\n        } else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value])=>[\n                    key,\n                    aliasedTableColumn(value, tableAlias)\n                ]));\n            if (config.where) {\n                const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, getOperators()) : config.where;\n                where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)){\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode ? selectedColumns.filter((c)=>config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key)=>!selectedColumns.includes(key));\n                }\n            } else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns){\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({\n                    tsKey: field,\n                    value: column\n                });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with).filter((entry)=>!!entry[1]).map(([tsKey, queryConfig])=>({\n                        tsKey,\n                        queryConfig,\n                        relation: tableConfig.relations[tsKey]\n                    }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, {\n                    sql\n                }) : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)){\n                    fieldsSelection.push({\n                        tsKey,\n                        value: mapColumnsInAliasedSQLToAlias(value, tableAlias)\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection){\n                selection.push({\n                    dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                });\n            }\n            let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [\n                    orderByOrig\n                ];\n            }\n            orderBy = orderByOrig.map((orderByValue)=>{\n                if (is(orderByValue, Column)) {\n                    return aliasedTableColumn(orderByValue, tableAlias);\n                }\n                return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation } of selectedRelations){\n                const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[Table.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = and(...normalizedRelation.fields.map((field, i)=>eq(aliasedTableColumn(normalizedRelation.references[i], relationTableAlias), aliasedTableColumn(field, tableAlias))));\n                const builtRelation = this.buildRelationalQueryWithoutPK({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? {\n                        limit: 1\n                    } : {\n                        ...selectedRelationConfigValue,\n                        limit: 1\n                    } : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation\n                });\n                const field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier(\"data\")}`.as(selectedRelationTsKey);\n                joins.push({\n                    on: sql`true`,\n                    table: new Subquery(builtRelation.sql, {}, relationTableAlias),\n                    alias: relationTableAlias,\n                    joinType: \"left\",\n                    lateral: true\n                });\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n        }\n        let result;\n        where = and(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = sql`json_build_array(${sql.join(selection.map(({ field, tsKey, isJson })=>isJson ? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier(\"data\")}` : is(field, SQL.Aliased) ? field.sql : field), sql`, `)})`;\n            if (is(nestedQueryRelation, Many)) {\n                field = sql`coalesce(json_agg(${field}${orderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : undefined}), '[]'::json)`;\n            // orderBy = [];\n            }\n            const nestedSelection = [\n                {\n                    dbKey: \"data\",\n                    tsKey: \"data\",\n                    field: field.as(\"data\"),\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection\n                }\n            ];\n            const needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: aliasedTable(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [\n                        {\n                            path: [],\n                            field: sql.raw(\"*\")\n                        }\n                    ],\n                    where,\n                    limit,\n                    offset,\n                    orderBy\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = [];\n            } else {\n                result = aliasedTable(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field })=>({\n                        path: [],\n                        field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n                    })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        } else {\n            result = this.buildSelectQuery({\n                table: aliasedTable(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field })=>({\n                        path: [],\n                        field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n                    })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection\n        };\n    }\n}\nclass TypedQueryBuilder {\n    static{\n        this[entityKind] = \"TypedQueryBuilder\";\n    }\n    /** @internal */ getSelectedFields() {\n        return this._.selectedFields;\n    }\n}\nclass PgSelectBuilder {\n    static{\n        this[entityKind] = \"PgSelectBuilder\";\n    }\n    constructor(config){\n        this.withList = [];\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        if (config.withList) {\n            this.withList = config.withList;\n        }\n        this.distinct = config.distinct;\n    }\n    /**\n     * Specify the table, subquery, or other target that you're\n     * building a select query against.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM|Postgres from documentation}\n     */ from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        } else if (is(source, Subquery)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[SubqueryConfig].selection).map((key)=>[\n                    key,\n                    source[key]\n                ]));\n        } else if (is(source, PgViewBase)) {\n            fields = source[ViewBaseConfig].selectedFields;\n        } else if (is(source, SQL)) {\n            fields = {};\n        } else {\n            fields = getTableColumns(source);\n        }\n        return new PgSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct\n        });\n    }\n}\nclass PgSelectQueryBuilder extends TypedQueryBuilder {\n    static{\n        this[entityKind] = \"PgSelectQueryBuilder\";\n    }\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }){\n        super();\n        /**\n     * For each row of the table, include\n     * values from a matching row of the joined\n     * table, if there is a matching row. If not,\n     * all of the columns of the joined table\n     * will be set to null.\n     */ this.leftJoin = this.createJoin(\"left\");\n        /**\n     * Includes all of the rows of the joined table.\n     * If there is no matching row in the main table,\n     * all the columns of the main table will be\n     * set to null.\n     */ this.rightJoin = this.createJoin(\"right\");\n        /**\n     * This is the default type of join.\n     *\n     * For each row of the table, the joined table\n     * needs to have a matching row, or it will\n     * be excluded from results.\n     */ this.innerJoin = this.createJoin(\"inner\");\n        /**\n     * Rows from both the main & joined are included,\n     * regardless of whether or not they have matching\n     * rows in the other table.\n     */ this.fullJoin = this.createJoin(\"full\");\n        this.config = {\n            withList,\n            table,\n            fields: {\n                ...fields\n            },\n            distinct\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields\n        };\n        this.tableName = getTableLikeName(table);\n        this.joinsNotNullableMap = typeof this.tableName === \"string\" ? {\n            [this.tableName]: true\n        } : {};\n    }\n    createJoin(joinType) {\n        return (table, on)=>{\n            const baseTableName = this.tableName;\n            const tableName = getTableLikeName(table);\n            if (typeof tableName === \"string\" && this.config.joins?.some((join)=>join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields\n                    };\n                }\n                if (typeof tableName === \"string\" && !is(table, SQL)) {\n                    const selection = is(table, Subquery) ? table[SubqueryConfig].selection : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === \"function\") {\n                on = on(new Proxy(this.config.fields, new SelectionProxyHandler({\n                    sqlAliasedBehavior: \"sql\",\n                    sqlBehavior: \"sql\"\n                })));\n            }\n            if (!this.config.joins) {\n                this.config.joins = [];\n            }\n            this.config.joins.push({\n                on,\n                table,\n                joinType,\n                alias: tableName\n            });\n            if (typeof tableName === \"string\") {\n                switch(joinType){\n                    case \"left\":\n                        {\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                    case \"right\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"inner\":\n                        {\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"full\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                }\n            }\n            return this;\n        };\n    }\n    /**\n     * Specify a condition to narrow the result set. Multiple\n     * conditions can be combined with the `and` and `or`\n     * functions.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Find cars made in the year 2000\n     * db.select().from(cars).where(eq(cars.year, 2000));\n     * ```\n     */ where(where) {\n        if (typeof where === \"function\") {\n            where = where(new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    /**\n     * Sets the HAVING clause of this query, which often\n     * used with GROUP BY and filters rows after they've been\n     * grouped together and combined.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-HAVING|Postgres having clause documentation}\n     */ having(having) {\n        if (typeof having === \"function\") {\n            having = having(new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const groupBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [\n                groupBy\n            ];\n        } else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const orderBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [\n                orderBy\n            ];\n        } else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    /**\n     * Set the maximum number of rows that will be\n     * returned by this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the first 10 people from this query.\n     * db.select().from(people).limit(10);\n     * ```\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-LIMIT|Postgres LIMIT documentation}\n     */ limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    /**\n     * Skip a number of rows when returning results\n     * from this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the 10th-20th people from this query.\n     * db.select().from(people).offset(10).limit(10);\n     * ```\n     */ offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    /**\n     * The FOR clause specifies a lock strength for this query\n     * that controls how strictly it acquires exclusive access to\n     * the rows being queried.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE|Postgres locking clause documentation}\n     */ for(strength, config = {}) {\n        if (!this.config.lockingClauses) {\n            this.config.lockingClauses = [];\n        }\n        this.config.lockingClauses.push({\n            strength,\n            config\n        });\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new Subquery(this.getSQL(), this.config.fields, alias), new SelectionProxyHandler({\n            alias,\n            sqlAliasedBehavior: \"alias\",\n            sqlBehavior: \"error\"\n        }));\n    }\n}\nclass PgSelect extends PgSelectQueryBuilder {\n    static{\n        this[entityKind] = \"PgSelect\";\n    }\n    _prepare(name) {\n        const { session, config, dialect, joinsNotNullableMap } = this;\n        if (!session) {\n            throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n        }\n        return tracer.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            const fieldsList = orderSelectedFields(config.fields);\n            const query = session.prepareQuery(dialect.sqlToQuery(this.getSQL()), fieldsList, name);\n            query.joinsNotNullableMap = joinsNotNullableMap;\n            return query;\n        });\n    }\n    /**\n     * Create a prepared statement for this query. This allows\n     * the database to remember this query for the given session\n     * and call it by name, rather than specifying the full query.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-prepare.html|Postgres prepare documentation}\n     */ prepare(name) {\n        return this._prepare(name);\n    }\n    constructor(...args){\n        super(...args);\n        this.execute = (placeholderValues)=>{\n            return tracer.startActiveSpan(\"drizzle.operation\", ()=>{\n                return this._prepare().execute(placeholderValues);\n            });\n        };\n    }\n}\napplyMixins(PgSelect, [\n    QueryPromise\n]);\nclass QueryBuilder {\n    static{\n        this[entityKind] = \"PgQueryBuilder\";\n    }\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true), new SelectionProxyHandler({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: true\n            });\n        }\n        function selectDistinctOn(on, fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: {\n                    on\n                }\n            });\n        }\n        return {\n            select,\n            selectDistinct,\n            selectDistinctOn\n        };\n    }\n    select(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect()\n        });\n    }\n    selectDistinct(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true\n        });\n    }\n    selectDistinctOn(on, fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: {\n                on\n            }\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new PgDialect();\n        }\n        return this.dialect;\n    }\n}\nclass DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgDefaultViewBuilderCore\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n}\nclass ViewBuilder extends DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgManualViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgMaterializedViewBuilderCore\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    using(using) {\n        this.config.using = using;\n        return this;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n    tablespace(tablespace) {\n        this.config.tablespace = tablespace;\n        return this;\n    }\n    withNoData() {\n        this.config.withNoData = true;\n        return this;\n    }\n}\nclass MaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgMaterializedViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgMaterializedView({\n            pgConfig: {\n                with: this.config.with,\n                using: this.config.using,\n                tablespace: this.config.tablespace,\n                withNoData: this.config.withNoData\n            },\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualMaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgManualMaterializedViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass PgViewBase extends View {\n    static{\n        this[entityKind] = \"PgViewBase\";\n    }\n}\nconst PgViewConfig = Symbol.for(\"drizzle:PgViewConfig\");\nclass PgView extends PgViewBase {\n    static{\n        this[entityKind] = \"PgView\";\n    }\n    constructor({ pgConfig, config }){\n        super(config);\n        if (pgConfig) {\n            this[PgViewConfig] = {\n                with: pgConfig.with\n            };\n        }\n    }\n}\nconst PgMaterializedViewConfig = Symbol.for(\"drizzle:PgMaterializedViewConfig\");\nclass PgMaterializedView extends PgViewBase {\n    static{\n        this[entityKind] = \"PgMaterializedView\";\n    }\n    constructor({ pgConfig, config }){\n        super(config);\n        this[PgMaterializedViewConfig] = {\n            with: pgConfig?.with,\n            using: pgConfig?.using,\n            tablespace: pgConfig?.tablespace,\n            withNoData: pgConfig?.withNoData\n        };\n    }\n}\n/** @internal */ function pgViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection, schema);\n    }\n    return new ViewBuilder(name, schema);\n}\n/** @internal */ function pgMaterializedViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualMaterializedViewBuilder(name, selection, schema);\n    }\n    return new MaterializedViewBuilder(name, schema);\n}\nfunction pgView(name, columns) {\n    return pgViewWithSchema(name, columns, undefined);\n}\nfunction pgMaterializedView(name, columns) {\n    return pgMaterializedViewWithSchema(name, columns, undefined);\n}\nclass Relation {\n    static{\n        this[entityKind] = \"Relation\";\n    }\n    constructor(sourceTable, referencedTable, relationName){\n        this.sourceTable = sourceTable;\n        this.referencedTable = referencedTable;\n        this.relationName = relationName;\n        this.referencedTableName = referencedTable[Table.Symbol.Name];\n    }\n}\nclass Relations {\n    static{\n        this[entityKind] = \"Relations\";\n    }\n    constructor(table, config){\n        this.table = table;\n        this.config = config;\n    }\n}\nclass One extends Relation {\n    static{\n        this[entityKind] = \"One\";\n    }\n    constructor(sourceTable, referencedTable, config, isNullable){\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n        this.isNullable = isNullable;\n    }\n    withFieldName(fieldName) {\n        const relation = new One(this.sourceTable, this.referencedTable, this.config, this.isNullable);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nclass Many extends Relation {\n    static{\n        this[entityKind] = \"Many\";\n    }\n    constructor(sourceTable, referencedTable, config){\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n    }\n    withFieldName(fieldName) {\n        const relation = new Many(this.sourceTable, this.referencedTable, this.config);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nfunction getOperators() {\n    return {\n        and,\n        between,\n        eq,\n        exists,\n        gt,\n        gte,\n        ilike,\n        inArray,\n        isNull,\n        isNotNull,\n        like,\n        lt,\n        lte,\n        ne,\n        not,\n        notBetween,\n        notExists,\n        notLike,\n        notIlike,\n        notInArray,\n        or,\n        sql\n    };\n}\nfunction getOrderByOperators() {\n    return {\n        sql,\n        asc,\n        desc\n    };\n}\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n    if (Object.keys(schema).length === 1 && \"default\" in schema && !is(schema[\"default\"], Table)) {\n        schema = schema[\"default\"];\n    }\n    // table DB name -> schema table key\n    const tableNamesMap = {};\n    // Table relations found before their tables - need to buffer them until we know the schema table key\n    const relationsBuffer = {};\n    const tablesConfig = {};\n    for (const [key, value] of Object.entries(schema)){\n        if (isTable(value)) {\n            const dbName = value[Table.Symbol.Name];\n            const bufferedRelations = relationsBuffer[dbName];\n            tableNamesMap[dbName] = key;\n            tablesConfig[key] = {\n                tsName: key,\n                dbName: value[Table.Symbol.Name],\n                columns: value[Table.Symbol.Columns],\n                relations: bufferedRelations?.relations ?? {},\n                primaryKey: bufferedRelations?.primaryKey ?? []\n            };\n            // Fill in primary keys\n            for (const column of Object.values(value[Table.Symbol.Columns])){\n                if (column.primary) {\n                    tablesConfig[key].primaryKey.push(column);\n                }\n            }\n            const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value);\n            if (extraConfig) {\n                for (const configEntry of Object.values(extraConfig)){\n                    if (is(configEntry, PrimaryKeyBuilder)) {\n                        tablesConfig[key].primaryKey.push(...configEntry.columns);\n                    }\n                }\n            }\n        } else if (is(value, Relations)) {\n            const dbName = value.table[Table.Symbol.Name];\n            const tableName = tableNamesMap[dbName];\n            const relations = value.config(configHelpers(value.table));\n            let primaryKey;\n            for (const [relationName, relation] of Object.entries(relations)){\n                if (tableName) {\n                    const tableConfig = tablesConfig[tableName];\n                    tableConfig.relations[relationName] = relation;\n                } else {\n                    if (!(dbName in relationsBuffer)) {\n                        relationsBuffer[dbName] = {\n                            relations: {},\n                            primaryKey\n                        };\n                    }\n                    relationsBuffer[dbName].relations[relationName] = relation;\n                }\n            }\n        }\n    }\n    return {\n        tables: tablesConfig,\n        tableNamesMap\n    };\n}\nfunction relations(table, relations) {\n    return new Relations(table, (helpers)=>Object.fromEntries(Object.entries(relations(helpers)).map(([key, value])=>[\n                key,\n                value.withFieldName(key)\n            ])));\n}\nfunction createOne(sourceTable) {\n    return function one(table, config) {\n        return new One(sourceTable, table, config, config?.fields.reduce((res, f)=>res && f.notNull, true) ?? false);\n    };\n}\nfunction createMany(sourceTable) {\n    return function many(referencedTable, config) {\n        return new Many(sourceTable, referencedTable, config);\n    };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n    if (is(relation, One) && relation.config) {\n        return {\n            fields: relation.config.fields,\n            references: relation.config.references\n        };\n    }\n    const referencedTableTsName = tableNamesMap[relation.referencedTable[Table.Symbol.Name]];\n    if (!referencedTableTsName) {\n        throw new Error(`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const referencedTableConfig = schema[referencedTableTsName];\n    if (!referencedTableConfig) {\n        throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n    }\n    const sourceTable = relation.sourceTable;\n    const sourceTableTsName = tableNamesMap[sourceTable[Table.Symbol.Name]];\n    if (!sourceTableTsName) {\n        throw new Error(`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const reverseRelations = [];\n    for (const referencedTableRelation of Object.values(referencedTableConfig.relations)){\n        if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {\n            reverseRelations.push(referencedTableRelation);\n        }\n    }\n    if (reverseRelations.length > 1) {\n        throw relation.relationName ? new Error(`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`) : new Error(`There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`);\n    }\n    if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {\n        return {\n            fields: reverseRelations[0].config.references,\n            references: reverseRelations[0].config.fields\n        };\n    }\n    throw new Error(`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`);\n}\nfunction createTableRelationsHelpers(sourceTable) {\n    return {\n        one: createOne(sourceTable),\n        many: createMany(sourceTable)\n    };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value)=>value) {\n    const result = {};\n    for (const [selectionItemIndex, selectionItem] of buildQueryResultSelection.entries()){\n        if (selectionItem.isJson) {\n            const relation = tableConfig.relations[selectionItem.tsKey];\n            const rawSubRows = row[selectionItemIndex];\n            const subRows = typeof rawSubRows === \"string\" ? JSON.parse(rawSubRows) : rawSubRows;\n            result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(tablesConfig, tablesConfig[selectionItem.relationTableTsKey], subRows, selectionItem.selection, mapColumnValue) : subRows.map((subRow)=>mapRelationalRow(tablesConfig, tablesConfig[selectionItem.relationTableTsKey], subRow, selectionItem.selection, mapColumnValue));\n        } else {\n            const value = mapColumnValue(row[selectionItemIndex]);\n            const field = selectionItem.field;\n            let decoder;\n            if (is(field, Column)) {\n                decoder = field;\n            } else if (is(field, SQL)) {\n                decoder = field.decoder;\n            } else {\n                decoder = field.sql.decoder;\n            }\n            result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n        }\n    }\n    return result;\n}\nfunction bindIfParam(value, column) {\n    if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n        return new Param(value, column);\n    }\n    return value;\n}\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */ const eq = (left, right)=>{\n    return sql`${left} = ${bindIfParam(right, left)}`;\n};\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */ const ne = (left, right)=>{\n    return sql`${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c)=>c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return new SQL(conditions);\n    }\n    return new SQL([\n        new StringChunk(\"(\"),\n        sql.join(conditions, new StringChunk(\" and \")),\n        new StringChunk(\")\")\n    ]);\n}\nfunction or(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c)=>c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return new SQL(conditions);\n    }\n    return new SQL([\n        new StringChunk(\"(\"),\n        sql.join(conditions, new StringChunk(\" or \")),\n        new StringChunk(\")\")\n    ]);\n}\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */ function not(condition) {\n    return sql`not ${condition}`;\n}\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */ const gt = (left, right)=>{\n    return sql`${left} > ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */ const gte = (left, right)=>{\n    return sql`${left} >= ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for greater-than-or-equal\n */ const lt = (left, right)=>{\n    return sql`${left} < ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */ const lte = (left, right)=>{\n    return sql`${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"inArray requires at least one value\");\n        }\n        return sql`${column} in ${values.map((v)=>bindIfParam(v, column))}`;\n    }\n    return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"notInArray requires at least one value\");\n        }\n        return sql`${column} not in ${values.map((v)=>bindIfParam(v, column))}`;\n    }\n    return sql`${column} not in ${bindIfParam(values, column)}`;\n}\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */ function isNull(value) {\n    return sql`${value} is null`;\n}\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */ function isNotNull(value) {\n    return sql`${value} is not null`;\n}\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */ function exists(subquery) {\n    return sql`exists (${subquery})`;\n}\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */ function notExists(subquery) {\n    return sql`not exists (${subquery})`;\n}\nfunction between(column, min, max) {\n    return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\nfunction notBetween(column, min, max) {\n    return sql`${column} not between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */ function like(column, value) {\n    return sql`${column} like ${value}`;\n}\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */ function notLike(column, value) {\n    return sql`${column} not like ${value}`;\n}\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */ function ilike(column, value) {\n    return sql`${column} ilike ${value}`;\n}\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */ function notIlike(column, value) {\n    return sql`${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"arrayContains requires at least one value\");\n        }\n        const array = sql`${bindIfParam(values, column)}`;\n        return sql`${column} @> ${array}`;\n    }\n    return sql`${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"arrayContained requires at least one value\");\n        }\n        const array = sql`${bindIfParam(values, column)}`;\n        return sql`${column} <@ ${array}`;\n    }\n    return sql`${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"arrayOverlaps requires at least one value\");\n        }\n        const array = sql`${bindIfParam(values, column)}`;\n        return sql`${column} && ${array}`;\n    }\n    return sql`${column} && ${bindIfParam(values, column)}`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */ function asc(column) {\n    return sql`${column} asc`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */ function desc(column) {\n    return sql`${column} desc`;\n}\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */ class FakePrimitiveParam {\n    static{\n        this[entityKind] = \"FakePrimitiveParam\";\n    }\n}\nfunction isSQLWrapper(value) {\n    return typeof value === \"object\" && value !== null && \"getSQL\" in value && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n    const result = {\n        sql: \"\",\n        params: []\n    };\n    for (const query of queries){\n        result.sql += query.sql;\n        result.params.push(...query.params);\n        if (query.typings?.length) {\n            if (!result.typings) {\n                result.typings = [];\n            }\n            result.typings.push(...query.typings);\n        }\n    }\n    return result;\n}\nclass StringChunk {\n    static{\n        this[entityKind] = \"StringChunk\";\n    }\n    constructor(value){\n        this.value = Array.isArray(value) ? value : [\n            value\n        ];\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\nclass SQL {\n    static{\n        this[entityKind] = \"SQL\";\n    }\n    constructor(queryChunks){\n        /** @internal */ this.decoder = noopDecoder;\n        this.shouldInlineParams = false;\n        this.queryChunks = queryChunks;\n    }\n    append(query) {\n        this.queryChunks.push(...query.queryChunks);\n        return this;\n    }\n    toQuery(config) {\n        return tracer.startActiveSpan(\"drizzle.buildSQL\", (span)=>{\n            const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n            span?.setAttributes({\n                \"drizzle.query.text\": query.sql,\n                \"drizzle.query.params\": JSON.stringify(query.params)\n            });\n            return query;\n        });\n    }\n    buildQueryFromSourceParams(chunks, _config) {\n        const config = Object.assign({}, _config, {\n            inlineParams: _config.inlineParams || this.shouldInlineParams,\n            paramStartIndex: _config.paramStartIndex || {\n                value: 0\n            }\n        });\n        const { escapeName, escapeParam, prepareTyping, inlineParams, paramStartIndex } = config;\n        return mergeQueries(chunks.map((chunk)=>{\n            if (is(chunk, StringChunk)) {\n                return {\n                    sql: chunk.value.join(\"\"),\n                    params: []\n                };\n            }\n            if (is(chunk, Name)) {\n                return {\n                    sql: escapeName(chunk.value),\n                    params: []\n                };\n            }\n            if (chunk === undefined) {\n                return {\n                    sql: \"\",\n                    params: []\n                };\n            }\n            if (Array.isArray(chunk)) {\n                const result = [\n                    new StringChunk(\"(\")\n                ];\n                for (const [i, p] of chunk.entries()){\n                    result.push(p);\n                    if (i < chunk.length - 1) {\n                        result.push(new StringChunk(\", \"));\n                    }\n                }\n                result.push(new StringChunk(\")\"));\n                return this.buildQueryFromSourceParams(result, config);\n            }\n            if (is(chunk, SQL)) {\n                return this.buildQueryFromSourceParams(chunk.queryChunks, {\n                    ...config,\n                    inlineParams: inlineParams || chunk.shouldInlineParams\n                });\n            }\n            if (is(chunk, Table)) {\n                const schemaName = chunk[Table.Symbol.Schema];\n                const tableName = chunk[Table.Symbol.Name];\n                return {\n                    sql: schemaName === undefined ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n                    params: []\n                };\n            }\n            if (is(chunk, Column)) {\n                return {\n                    sql: escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(chunk.name),\n                    params: []\n                };\n            }\n            if (is(chunk, View)) {\n                const schemaName = chunk[ViewBaseConfig].schema;\n                const viewName = chunk[ViewBaseConfig].name;\n                return {\n                    sql: schemaName === undefined ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n                    params: []\n                };\n            }\n            if (is(chunk, Param)) {\n                const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n                if (is(mappedValue, SQL)) {\n                    return this.buildQueryFromSourceParams([\n                        mappedValue\n                    ], config);\n                }\n                if (inlineParams) {\n                    return {\n                        sql: this.mapInlineParam(mappedValue, config),\n                        params: []\n                    };\n                }\n                let typings;\n                if (prepareTyping !== undefined) {\n                    typings = [\n                        prepareTyping(chunk.encoder)\n                    ];\n                }\n                return {\n                    sql: escapeParam(paramStartIndex.value++, mappedValue),\n                    params: [\n                        mappedValue\n                    ],\n                    typings\n                };\n            }\n            if (is(chunk, Placeholder)) {\n                return {\n                    sql: escapeParam(paramStartIndex.value++, chunk),\n                    params: [\n                        chunk\n                    ]\n                };\n            }\n            if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n                return {\n                    sql: escapeName(chunk.fieldAlias),\n                    params: []\n                };\n            }\n            if (is(chunk, Subquery)) {\n                if (chunk[SubqueryConfig].isWith) {\n                    return {\n                        sql: escapeName(chunk[SubqueryConfig].alias),\n                        params: []\n                    };\n                }\n                return this.buildQueryFromSourceParams([\n                    new StringChunk(\"(\"),\n                    chunk[SubqueryConfig].sql,\n                    new StringChunk(\") \"),\n                    new Name(chunk[SubqueryConfig].alias)\n                ], config);\n            }\n            // if (is(chunk, Placeholder)) {\n            // \treturn {sql: escapeParam}\n            if (isSQLWrapper(chunk)) {\n                return this.buildQueryFromSourceParams([\n                    new StringChunk(\"(\"),\n                    chunk.getSQL(),\n                    new StringChunk(\")\")\n                ], config);\n            }\n            if (is(chunk, Relation)) {\n                return this.buildQueryFromSourceParams([\n                    chunk.sourceTable,\n                    new StringChunk(\".\"),\n                    sql.identifier(chunk.fieldName)\n                ], config);\n            }\n            if (inlineParams) {\n                return {\n                    sql: this.mapInlineParam(chunk, config),\n                    params: []\n                };\n            }\n            return {\n                sql: escapeParam(paramStartIndex.value++, chunk),\n                params: [\n                    chunk\n                ]\n            };\n        }));\n    }\n    mapInlineParam(chunk, { escapeString }) {\n        if (chunk === null) {\n            return \"null\";\n        }\n        if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n            return chunk.toString();\n        }\n        if (typeof chunk === \"string\") {\n            return escapeString(chunk);\n        }\n        if (typeof chunk === \"object\") {\n            const mappedValueAsString = chunk.toString();\n            if (mappedValueAsString === \"[object Object]\") {\n                return escapeString(JSON.stringify(chunk));\n            }\n            return escapeString(mappedValueAsString);\n        }\n        throw new Error(\"Unexpected param value: \" + chunk);\n    }\n    getSQL() {\n        return this;\n    }\n    as(alias) {\n        // TODO: remove with deprecated overloads\n        if (alias === undefined) {\n            return this;\n        }\n        return new SQL.Aliased(this, alias);\n    }\n    mapWith(decoder) {\n        this.decoder = typeof decoder === \"function\" ? {\n            mapFromDriverValue: decoder\n        } : decoder;\n        return this;\n    }\n    inlineParams() {\n        this.shouldInlineParams = true;\n        return this;\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n */ class Name {\n    static{\n        this[entityKind] = \"Name\";\n    }\n    constructor(value){\n        this.value = value;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */ function name(value) {\n    return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n    return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n    mapFromDriverValue: (value)=>value\n};\nconst noopEncoder = {\n    mapToDriverValue: (value)=>value\n};\nconst noopMapper = {\n    ...noopDecoder,\n    ...noopEncoder\n};\n/** Parameter value that is optionally bound to an encoder (for example, a column). */ class Param {\n    static{\n        this[entityKind] = \"Param\";\n    }\n    /**\n     * @param value - Parameter value\n     * @param encoder - Encoder to convert the value to a driver parameter\n     */ constructor(value, encoder = noopEncoder){\n        this.value = value;\n        this.encoder = encoder;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\n/** @deprecated Use `sql.param` instead. */ function param(value, encoder) {\n    return new Param(value, encoder);\n}\n/*\n    The type of `params` is specified as `SQLSourceParam[]`, but that's slightly incorrect -\n    in runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n    which will be wrapped in `Param` using `buildChunksFromParam(...)`. That's why the overload\n    specify `params` as `any[]` and not as `SQLSourceParam[]`. This type is used to make our lives easier and\n    the type checker happy.\n*/ function sql(strings, ...params) {\n    const queryChunks = [];\n    if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n        queryChunks.push(new StringChunk(strings[0]));\n    }\n    for (const [paramIndex, param] of params.entries()){\n        queryChunks.push(param, new StringChunk(strings[paramIndex + 1]));\n    }\n    return new SQL(queryChunks);\n}\n(function(sql) {\n    function empty() {\n        return new SQL([]);\n    }\n    sql.empty = empty;\n    /** @deprecated - use `sql.join()` */ function fromList(list) {\n        return new SQL(list);\n    }\n    sql.fromList = fromList;\n    /**\n     * Convenience function to create an SQL query from a raw string.\n     * @param str The raw SQL query string.\n     */ function raw(str) {\n        return new SQL([\n            new StringChunk(str)\n        ]);\n    }\n    sql.raw = raw;\n    /**\n     * Join a list of SQL chunks with a separator.\n     * @example\n     * ```ts\n     * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n     * // sql`abc`\n     * ```\n     * @example\n     * ```ts\n     * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n     * // sql`a, b, c`\n     * ```\n     */ function join(chunks, separator) {\n        const result = [];\n        for (const [i, chunk] of chunks.entries()){\n            if (i > 0 && separator !== undefined) {\n                result.push(separator);\n            }\n            result.push(chunk);\n        }\n        return new SQL(result);\n    }\n    sql.join = join;\n    /**\n     * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n     * When used in a query, the identifier will be escaped based on the DB engine.\n     * For example, in PostgreSQL, identifiers are escaped with double quotes.\n     *\n     * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n     *\n     * @example ```ts\n     * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n     * // 'SELECT * FROM \"my-table\"'\n     * ```\n     */ function identifier(value) {\n        return new Name(value);\n    }\n    sql.identifier = identifier;\n    function placeholder(name) {\n        return new Placeholder(name);\n    }\n    sql.placeholder = placeholder;\n    function param(value, encoder) {\n        return new Param(value, encoder);\n    }\n    sql.param = param;\n})(sql || (sql = {}));\n(function(SQL) {\n    class Aliased {\n        static{\n            this[entityKind] = \"SQL.Aliased\";\n        }\n        constructor(sql, fieldAlias){\n            /** @internal */ this.isSelectionField = false;\n            this.sql = sql;\n            this.fieldAlias = fieldAlias;\n        }\n        getSQL() {\n            return this.sql;\n        }\n        /** @internal */ clone() {\n            return new Aliased(this.sql, this.fieldAlias);\n        }\n    }\n    SQL.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n    static{\n        this[entityKind] = \"Placeholder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    getSQL() {\n        return new SQL([\n            this\n        ]);\n    }\n}\n/** @deprecated Use `sql.placeholder` instead. */ function placeholder(name) {\n    return new Placeholder(name);\n}\nfunction fillPlaceholders(params, values) {\n    return params.map((p)=>{\n        if (is(p, Placeholder)) {\n            if (!(p.name in values)) {\n                throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n            }\n            return values[p.name];\n        }\n        return p;\n    });\n}\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n    return new SQL([\n        this\n    ]);\n};\nclass ColumnAliasProxyHandler {\n    static{\n        this[entityKind] = \"ColumnAliasProxyHandler\";\n    }\n    constructor(table){\n        this.table = table;\n    }\n    get(columnObj, prop) {\n        if (prop === \"table\") {\n            return this.table;\n        }\n        return columnObj[prop];\n    }\n}\nclass TableAliasProxyHandler {\n    static{\n        this[entityKind] = \"TableAliasProxyHandler\";\n    }\n    constructor(alias, replaceOriginalName){\n        this.alias = alias;\n        this.replaceOriginalName = replaceOriginalName;\n    }\n    get(target, prop) {\n        if (prop === Table.Symbol.IsAlias) {\n            return true;\n        }\n        if (prop === Table.Symbol.Name) {\n            return this.alias;\n        }\n        if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n            return this.alias;\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...target[ViewBaseConfig],\n                name: this.alias,\n                isAlias: true\n            };\n        }\n        if (prop === Table.Symbol.Columns) {\n            const columns = target[Table.Symbol.Columns];\n            if (!columns) {\n                return columns;\n            }\n            const proxiedColumns = {};\n            Object.keys(columns).map((key)=>{\n                proxiedColumns[key] = new Proxy(columns[key], new ColumnAliasProxyHandler(new Proxy(target, this)));\n            });\n            return proxiedColumns;\n        }\n        const value = target[prop];\n        if (is(value, Column)) {\n            return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n        }\n        return value;\n    }\n}\nclass RelationTableAliasProxyHandler {\n    static{\n        this[entityKind] = \"RelationTableAliasProxyHandler\";\n    }\n    constructor(alias){\n        this.alias = alias;\n    }\n    get(target, prop) {\n        if (prop === \"sourceTable\") {\n            return aliasedTable(target.sourceTable, this.alias);\n        }\n        return target[prop];\n    }\n}\nfunction aliasedTable(table, tableAlias) {\n    return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n    return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n    return new Proxy(column, new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))));\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n    return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n    return sql.join(query.queryChunks.map((c)=>{\n        if (is(c, Column)) {\n            return aliasedTableColumn(c, alias);\n        }\n        if (is(c, SQL)) {\n            return mapColumnsInSQLToAlias(c, alias);\n        }\n        if (is(c, SQL.Aliased)) {\n            return mapColumnsInAliasedSQLToAlias(c, alias);\n        }\n        return c;\n    }));\n}\n //# sourceMappingURL=alias-cf8e03cd.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/drizzle-orm/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/drizzle-orm/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bS),\n/* harmony export */   Column: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   ColumnAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b4),\n/* harmony export */   ColumnBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   Columns: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bQ),\n/* harmony export */   ConsoleLogWriter: () => (/* binding */ ConsoleLogWriter),\n/* harmony export */   DefaultLogger: () => (/* binding */ DefaultLogger),\n/* harmony export */   DrizzleError: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   ExtraConfigBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bU),\n/* harmony export */   FakePrimitiveParam: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bC),\n/* harmony export */   IsAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bT),\n/* harmony export */   Many: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   Name: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bF),\n/* harmony export */   NoopLogger: () => (/* binding */ NoopLogger),\n/* harmony export */   One: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O),\n/* harmony export */   OriginalName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bR),\n/* harmony export */   Param: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   Placeholder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bM),\n/* harmony export */   QueryPromise: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   Relation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bx),\n/* harmony export */   RelationTableAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b5),\n/* harmony export */   Relations: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.by),\n/* harmony export */   SQL: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   Schema: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bP),\n/* harmony export */   SelectionProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   StringChunk: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bE),\n/* harmony export */   Subquery: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   SubqueryConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   Table: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   TableAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   TableName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bO),\n/* harmony export */   TransactionRollbackError: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   View: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   ViewBaseConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   WithSubquery: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W),\n/* harmony export */   aliasedRelation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b6),\n/* harmony export */   aliasedTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   aliasedTableColumn: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   and: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   applyMixins: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   arrayContained: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bt),\n/* harmony export */   arrayContains: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bs),\n/* harmony export */   arrayOverlaps: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bu),\n/* harmony export */   asc: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bv),\n/* harmony export */   between: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bm),\n/* harmony export */   bindIfParam: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b8),\n/* harmony export */   createMany: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bB),\n/* harmony export */   createOne: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bA),\n/* harmony export */   createTableRelationsHelpers: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   desc: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bw),\n/* harmony export */   entityKind: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   eq: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   exists: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bk),\n/* harmony export */   extractTablesRelationalConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   fillPlaceholders: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   getOperators: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   getOrderByOperators: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   getTableColumns: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   getTableLikeName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K),\n/* harmony export */   getTableName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   gt: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bc),\n/* harmony export */   gte: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bd),\n/* harmony export */   hasOwnEntityKind: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b7),\n/* harmony export */   iife: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bW),\n/* harmony export */   ilike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bq),\n/* harmony export */   inArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bg),\n/* harmony export */   is: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   isDriverValueEncoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bH),\n/* harmony export */   isNotNull: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bj),\n/* harmony export */   isNull: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bi),\n/* harmony export */   isSQLWrapper: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bD),\n/* harmony export */   isTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bV),\n/* harmony export */   like: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bo),\n/* harmony export */   lt: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.be),\n/* harmony export */   lte: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bf),\n/* harmony export */   mapColumnsInAliasedSQLToAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   mapColumnsInSQLToAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   mapRelationalRow: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   mapResultRow: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mapUpdateSet: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   name: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bG),\n/* harmony export */   ne: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b9),\n/* harmony export */   noopDecoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bI),\n/* harmony export */   noopEncoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bJ),\n/* harmony export */   noopMapper: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bK),\n/* harmony export */   normalizeRelation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   not: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bb),\n/* harmony export */   notBetween: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bn),\n/* harmony export */   notExists: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bl),\n/* harmony export */   notIlike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.br),\n/* harmony export */   notInArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bh),\n/* harmony export */   notLike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bp),\n/* harmony export */   or: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ba),\n/* harmony export */   orderSelectedFields: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   param: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bL),\n/* harmony export */   placeholder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bN),\n/* harmony export */   relations: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bz),\n/* harmony export */   sql: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-cf8e03cd.mjs */ \"(action-browser)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n\nclass ConsoleLogWriter {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"ConsoleLogWriter\";\n    }\n    write(message) {\n        console.log(message);\n    }\n}\nclass DefaultLogger {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"DefaultLogger\";\n    }\n    constructor(config){\n        this.writer = config?.writer ?? new ConsoleLogWriter();\n    }\n    logQuery(query, params) {\n        const stringifiedParams = params.map((p)=>{\n            try {\n                return JSON.stringify(p);\n            } catch  {\n                return String(p);\n            }\n        });\n        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(\", \")}]` : \"\";\n        this.writer.write(`Query: ${query}${paramsStr}`);\n    }\n}\nclass NoopLogger {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"NoopLogger\";\n    }\n    logQuery() {\n    // noop\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kcml6emxlLW9ybS9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVEO0FBQ29xRDtBQUUzdEQsTUFBTThMOztZQUNLLENBQUM3TCxrREFBVUEsQ0FBQyxHQUFHOztJQUN0QjhMLE1BQU1DLE9BQU8sRUFBRTtRQUNYQyxRQUFRQyxHQUFHLENBQUNGO0lBQ2hCO0FBQ0o7QUFDQSxNQUFNRzs7WUFDSyxDQUFDbE0sa0RBQVVBLENBQUMsR0FBRzs7SUFFdEJtTSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdELFFBQVFDLFVBQVUsSUFBSVI7SUFDeEM7SUFDQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNLEVBQUU7UUFDcEIsTUFBTUMsb0JBQW9CRCxPQUFPRSxHQUFHLENBQUMsQ0FBQ3ZNO1lBQ2xDLElBQUk7Z0JBQ0EsT0FBT3dNLEtBQUtDLFNBQVMsQ0FBQ3pNO1lBQzFCLEVBQ0EsT0FBTTtnQkFDRixPQUFPME0sT0FBTzFNO1lBQ2xCO1FBQ0o7UUFDQSxNQUFNMk0sWUFBWUwsa0JBQWtCTSxNQUFNLEdBQUcsQ0FBQyxhQUFhLEVBQUVOLGtCQUFrQk8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUc7UUFDL0YsSUFBSSxDQUFDWCxNQUFNLENBQUNQLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRVMsTUFBTSxFQUFFTyxVQUFVLENBQUM7SUFDbkQ7QUFDSjtBQUNBLE1BQU1HOztZQUNLLENBQUNqTixrREFBVUEsQ0FBQyxHQUFHOztJQUN0QnNNLFdBQVc7SUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUVtRSxDQUNuRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwcm9kaWdpZXMtY3lwcmVzcy8uL25vZGVfbW9kdWxlcy9kcml6emxlLW9ybS9pbmRleC5tanM/Y2Y0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudGl0eUtpbmQgfSBmcm9tICcuL2FsaWFzLWNmOGUwM2NkLm1qcyc7XG5leHBvcnQgeyBiUyBhcyBCYXNlTmFtZSwgcCBhcyBDb2x1bW4sIGI0IGFzIENvbHVtbkFsaWFzUHJveHlIYW5kbGVyLCBDIGFzIENvbHVtbkJ1aWxkZXIsIGJRIGFzIENvbHVtbnMsIEQgYXMgRHJpenpsZUVycm9yLCBiVSBhcyBFeHRyYUNvbmZpZ0J1aWxkZXIsIGJDIGFzIEZha2VQcmltaXRpdmVQYXJhbSwgYlQgYXMgSXNBbGlhcywgTSBhcyBNYW55LCBiRiBhcyBOYW1lLCBPIGFzIE9uZSwgYlIgYXMgT3JpZ2luYWxOYW1lLCBiIGFzIFBhcmFtLCBiTSBhcyBQbGFjZWhvbGRlciwgUSBhcyBRdWVyeVByb21pc2UsIGJ4IGFzIFJlbGF0aW9uLCBiNSBhcyBSZWxhdGlvblRhYmxlQWxpYXNQcm94eUhhbmRsZXIsIGJ5IGFzIFJlbGF0aW9ucywgUyBhcyBTUUwsIGJQIGFzIFNjaGVtYSwgaiBhcyBTZWxlY3Rpb25Qcm94eUhhbmRsZXIsIGJFIGFzIFN0cmluZ0NodW5rLCByIGFzIFN1YnF1ZXJ5LCB1IGFzIFN1YnF1ZXJ5Q29uZmlnLCBUIGFzIFRhYmxlLCBuIGFzIFRhYmxlQWxpYXNQcm94eUhhbmRsZXIsIGJPIGFzIFRhYmxlTmFtZSwgbCBhcyBUcmFuc2FjdGlvblJvbGxiYWNrRXJyb3IsIHYgYXMgVmlldywgViBhcyBWaWV3QmFzZUNvbmZpZywgVyBhcyBXaXRoU3VicXVlcnksIGI2IGFzIGFsaWFzZWRSZWxhdGlvbiwgRyBhcyBhbGlhc2VkVGFibGUsIHcgYXMgYWxpYXNlZFRhYmxlQ29sdW1uLCBFIGFzIGFuZCwgSCBhcyBhcHBseU1peGlucywgYnQgYXMgYXJyYXlDb250YWluZWQsIGJzIGFzIGFycmF5Q29udGFpbnMsIGJ1IGFzIGFycmF5T3ZlcmxhcHMsIGJ2IGFzIGFzYywgYm0gYXMgYmV0d2VlbiwgYjggYXMgYmluZElmUGFyYW0sIGJCIGFzIGNyZWF0ZU1hbnksIGJBIGFzIGNyZWF0ZU9uZSwgYyBhcyBjcmVhdGVUYWJsZVJlbGF0aW9uc0hlbHBlcnMsIGJ3IGFzIGRlc2MsIEYgYXMgZXEsIGJrIGFzIGV4aXN0cywgYSBhcyBleHRyYWN0VGFibGVzUmVsYXRpb25hbENvbmZpZywgZiBhcyBmaWxsUGxhY2Vob2xkZXJzLCB4IGFzIGdldE9wZXJhdG9ycywgQSBhcyBnZXRPcmRlckJ5T3BlcmF0b3JzLCBJIGFzIGdldFRhYmxlQ29sdW1ucywgSyBhcyBnZXRUYWJsZUxpa2VOYW1lLCBxIGFzIGdldFRhYmxlTmFtZSwgYmMgYXMgZ3QsIGJkIGFzIGd0ZSwgYjcgYXMgaGFzT3duRW50aXR5S2luZCwgYlcgYXMgaWlmZSwgYnEgYXMgaWxpa2UsIGJnIGFzIGluQXJyYXksIGkgYXMgaXMsIGJIIGFzIGlzRHJpdmVyVmFsdWVFbmNvZGVyLCBiaiBhcyBpc05vdE51bGwsIGJpIGFzIGlzTnVsbCwgYkQgYXMgaXNTUUxXcmFwcGVyLCBiViBhcyBpc1RhYmxlLCBibyBhcyBsaWtlLCBiZSBhcyBsdCwgYmYgYXMgbHRlLCB6IGFzIG1hcENvbHVtbnNJbkFsaWFzZWRTUUxUb0FsaWFzLCB5IGFzIG1hcENvbHVtbnNJblNRTFRvQWxpYXMsIGcgYXMgbWFwUmVsYXRpb25hbFJvdywgbSBhcyBtYXBSZXN1bHRSb3csIGQgYXMgbWFwVXBkYXRlU2V0LCBiRyBhcyBuYW1lLCBiOSBhcyBuZSwgYkkgYXMgbm9vcERlY29kZXIsIGJKIGFzIG5vb3BFbmNvZGVyLCBiSyBhcyBub29wTWFwcGVyLCBCIGFzIG5vcm1hbGl6ZVJlbGF0aW9uLCBiYiBhcyBub3QsIGJuIGFzIG5vdEJldHdlZW4sIGJsIGFzIG5vdEV4aXN0cywgYnIgYXMgbm90SWxpa2UsIGJoIGFzIG5vdEluQXJyYXksIGJwIGFzIG5vdExpa2UsIGJhIGFzIG9yLCBvIGFzIG9yZGVyU2VsZWN0ZWRGaWVsZHMsIGJMIGFzIHBhcmFtLCBiTiBhcyBwbGFjZWhvbGRlciwgYnogYXMgcmVsYXRpb25zLCBzIGFzIHNxbCB9IGZyb20gJy4vYWxpYXMtY2Y4ZTAzY2QubWpzJztcblxuY2xhc3MgQ29uc29sZUxvZ1dyaXRlciB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdDb25zb2xlTG9nV3JpdGVyJztcbiAgICB3cml0ZShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIH1cbn1cbmNsYXNzIERlZmF1bHRMb2dnZXIge1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnRGVmYXVsdExvZ2dlcic7XG4gICAgd3JpdGVyO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLndyaXRlciA9IGNvbmZpZz8ud3JpdGVyID8/IG5ldyBDb25zb2xlTG9nV3JpdGVyKCk7XG4gICAgfVxuICAgIGxvZ1F1ZXJ5KHF1ZXJ5LCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3Qgc3RyaW5naWZpZWRQYXJhbXMgPSBwYXJhbXMubWFwKChwKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGFyYW1zU3RyID0gc3RyaW5naWZpZWRQYXJhbXMubGVuZ3RoID8gYCAtLSBwYXJhbXM6IFske3N0cmluZ2lmaWVkUGFyYW1zLmpvaW4oJywgJyl9XWAgOiAnJztcbiAgICAgICAgdGhpcy53cml0ZXIud3JpdGUoYFF1ZXJ5OiAke3F1ZXJ5fSR7cGFyYW1zU3RyfWApO1xuICAgIH1cbn1cbmNsYXNzIE5vb3BMb2dnZXIge1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnTm9vcExvZ2dlcic7XG4gICAgbG9nUXVlcnkoKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbnNvbGVMb2dXcml0ZXIsIERlZmF1bHRMb2dnZXIsIE5vb3BMb2dnZXIsIGVudGl0eUtpbmQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJlIiwiZW50aXR5S2luZCIsImJTIiwiQmFzZU5hbWUiLCJwIiwiQ29sdW1uIiwiYjQiLCJDb2x1bW5BbGlhc1Byb3h5SGFuZGxlciIsIkMiLCJDb2x1bW5CdWlsZGVyIiwiYlEiLCJDb2x1bW5zIiwiRCIsIkRyaXp6bGVFcnJvciIsImJVIiwiRXh0cmFDb25maWdCdWlsZGVyIiwiYkMiLCJGYWtlUHJpbWl0aXZlUGFyYW0iLCJiVCIsIklzQWxpYXMiLCJNIiwiTWFueSIsImJGIiwiTmFtZSIsIk8iLCJPbmUiLCJiUiIsIk9yaWdpbmFsTmFtZSIsImIiLCJQYXJhbSIsImJNIiwiUGxhY2Vob2xkZXIiLCJRIiwiUXVlcnlQcm9taXNlIiwiYngiLCJSZWxhdGlvbiIsImI1IiwiUmVsYXRpb25UYWJsZUFsaWFzUHJveHlIYW5kbGVyIiwiYnkiLCJSZWxhdGlvbnMiLCJTIiwiU1FMIiwiYlAiLCJTY2hlbWEiLCJqIiwiU2VsZWN0aW9uUHJveHlIYW5kbGVyIiwiYkUiLCJTdHJpbmdDaHVuayIsInIiLCJTdWJxdWVyeSIsInUiLCJTdWJxdWVyeUNvbmZpZyIsIlQiLCJUYWJsZSIsIm4iLCJUYWJsZUFsaWFzUHJveHlIYW5kbGVyIiwiYk8iLCJUYWJsZU5hbWUiLCJsIiwiVHJhbnNhY3Rpb25Sb2xsYmFja0Vycm9yIiwidiIsIlZpZXciLCJWIiwiVmlld0Jhc2VDb25maWciLCJXIiwiV2l0aFN1YnF1ZXJ5IiwiYjYiLCJhbGlhc2VkUmVsYXRpb24iLCJHIiwiYWxpYXNlZFRhYmxlIiwidyIsImFsaWFzZWRUYWJsZUNvbHVtbiIsIkUiLCJhbmQiLCJIIiwiYXBwbHlNaXhpbnMiLCJidCIsImFycmF5Q29udGFpbmVkIiwiYnMiLCJhcnJheUNvbnRhaW5zIiwiYnUiLCJhcnJheU92ZXJsYXBzIiwiYnYiLCJhc2MiLCJibSIsImJldHdlZW4iLCJiOCIsImJpbmRJZlBhcmFtIiwiYkIiLCJjcmVhdGVNYW55IiwiYkEiLCJjcmVhdGVPbmUiLCJjIiwiY3JlYXRlVGFibGVSZWxhdGlvbnNIZWxwZXJzIiwiYnciLCJkZXNjIiwiRiIsImVxIiwiYmsiLCJleGlzdHMiLCJhIiwiZXh0cmFjdFRhYmxlc1JlbGF0aW9uYWxDb25maWciLCJmIiwiZmlsbFBsYWNlaG9sZGVycyIsIngiLCJnZXRPcGVyYXRvcnMiLCJBIiwiZ2V0T3JkZXJCeU9wZXJhdG9ycyIsIkkiLCJnZXRUYWJsZUNvbHVtbnMiLCJLIiwiZ2V0VGFibGVMaWtlTmFtZSIsInEiLCJnZXRUYWJsZU5hbWUiLCJiYyIsImd0IiwiYmQiLCJndGUiLCJiNyIsImhhc093bkVudGl0eUtpbmQiLCJiVyIsImlpZmUiLCJicSIsImlsaWtlIiwiYmciLCJpbkFycmF5IiwiaSIsImlzIiwiYkgiLCJpc0RyaXZlclZhbHVlRW5jb2RlciIsImJqIiwiaXNOb3ROdWxsIiwiYmkiLCJpc051bGwiLCJiRCIsImlzU1FMV3JhcHBlciIsImJWIiwiaXNUYWJsZSIsImJvIiwibGlrZSIsImJlIiwibHQiLCJiZiIsImx0ZSIsInoiLCJtYXBDb2x1bW5zSW5BbGlhc2VkU1FMVG9BbGlhcyIsInkiLCJtYXBDb2x1bW5zSW5TUUxUb0FsaWFzIiwiZyIsIm1hcFJlbGF0aW9uYWxSb3ciLCJtIiwibWFwUmVzdWx0Um93IiwiZCIsIm1hcFVwZGF0ZVNldCIsImJHIiwibmFtZSIsImI5IiwibmUiLCJiSSIsIm5vb3BEZWNvZGVyIiwiYkoiLCJub29wRW5jb2RlciIsImJLIiwibm9vcE1hcHBlciIsIkIiLCJub3JtYWxpemVSZWxhdGlvbiIsImJiIiwibm90IiwiYm4iLCJub3RCZXR3ZWVuIiwiYmwiLCJub3RFeGlzdHMiLCJiciIsIm5vdElsaWtlIiwiYmgiLCJub3RJbkFycmF5IiwiYnAiLCJub3RMaWtlIiwiYmEiLCJvciIsIm8iLCJvcmRlclNlbGVjdGVkRmllbGRzIiwiYkwiLCJwYXJhbSIsImJOIiwicGxhY2Vob2xkZXIiLCJieiIsInJlbGF0aW9ucyIsInMiLCJzcWwiLCJDb25zb2xlTG9nV3JpdGVyIiwid3JpdGUiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsIkRlZmF1bHRMb2dnZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIndyaXRlciIsImxvZ1F1ZXJ5IiwicXVlcnkiLCJwYXJhbXMiLCJzdHJpbmdpZmllZFBhcmFtcyIsIm1hcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJTdHJpbmciLCJwYXJhbXNTdHIiLCJsZW5ndGgiLCJqb2luIiwiTm9vcExvZ2dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/drizzle-orm/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/drizzle-orm/pg-core/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/drizzle-orm/pg-core/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Check: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Z),\n/* harmony export */   CheckBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Y),\n/* harmony export */   DefaultViewBuilderCore: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aT),\n/* harmony export */   ForeignKey: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.as),\n/* harmony export */   ForeignKeyBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ar),\n/* harmony export */   Index: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aw),\n/* harmony export */   IndexBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.av),\n/* harmony export */   IndexBuilderOn: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.au),\n/* harmony export */   InlineForeignKeys: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aE),\n/* harmony export */   ManualMaterializedViewBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aY),\n/* harmony export */   ManualViewBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aV),\n/* harmony export */   MaterializedViewBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aX),\n/* harmony export */   MaterializedViewBuilderCore: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aW),\n/* harmony export */   PgArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a0),\n/* harmony export */   PgArrayBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.$),\n/* harmony export */   PgBigInt53: () => (/* binding */ PgBigInt53),\n/* harmony export */   PgBigInt53Builder: () => (/* binding */ PgBigInt53Builder),\n/* harmony export */   PgBigInt64: () => (/* binding */ PgBigInt64),\n/* harmony export */   PgBigInt64Builder: () => (/* binding */ PgBigInt64Builder),\n/* harmony export */   PgBigSerial53: () => (/* binding */ PgBigSerial53),\n/* harmony export */   PgBigSerial53Builder: () => (/* binding */ PgBigSerial53Builder),\n/* harmony export */   PgBigSerial64: () => (/* binding */ PgBigSerial64),\n/* harmony export */   PgBigSerial64Builder: () => (/* binding */ PgBigSerial64Builder),\n/* harmony export */   PgBoolean: () => (/* binding */ PgBoolean),\n/* harmony export */   PgBooleanBuilder: () => (/* binding */ PgBooleanBuilder),\n/* harmony export */   PgChar: () => (/* binding */ PgChar),\n/* harmony export */   PgCharBuilder: () => (/* binding */ PgCharBuilder),\n/* harmony export */   PgCidr: () => (/* binding */ PgCidr),\n/* harmony export */   PgCidrBuilder: () => (/* binding */ PgCidrBuilder),\n/* harmony export */   PgColumn: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N),\n/* harmony export */   PgColumnBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L),\n/* harmony export */   PgCustomColumn: () => (/* binding */ PgCustomColumn),\n/* harmony export */   PgCustomColumnBuilder: () => (/* binding */ PgCustomColumnBuilder),\n/* harmony export */   PgDatabase: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.c),\n/* harmony export */   PgDate: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a2),\n/* harmony export */   PgDateBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a1),\n/* harmony export */   PgDateString: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a4),\n/* harmony export */   PgDateStringBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a3),\n/* harmony export */   PgDelete: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.d),\n/* harmony export */   PgDialect: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.P),\n/* harmony export */   PgDoublePrecision: () => (/* binding */ PgDoublePrecision),\n/* harmony export */   PgDoublePrecisionBuilder: () => (/* binding */ PgDoublePrecisionBuilder),\n/* harmony export */   PgEnumColumn: () => (/* binding */ PgEnumColumn),\n/* harmony export */   PgEnumColumnBuilder: () => (/* binding */ PgEnumColumnBuilder),\n/* harmony export */   PgInet: () => (/* binding */ PgInet),\n/* harmony export */   PgInetBuilder: () => (/* binding */ PgInetBuilder),\n/* harmony export */   PgInsert: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.f),\n/* harmony export */   PgInsertBuilder: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.e),\n/* harmony export */   PgInteger: () => (/* binding */ PgInteger),\n/* harmony export */   PgIntegerBuilder: () => (/* binding */ PgIntegerBuilder),\n/* harmony export */   PgInterval: () => (/* binding */ PgInterval),\n/* harmony export */   PgIntervalBuilder: () => (/* binding */ PgIntervalBuilder),\n/* harmony export */   PgJson: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a7),\n/* harmony export */   PgJsonBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a6),\n/* harmony export */   PgJsonb: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aa),\n/* harmony export */   PgJsonbBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a9),\n/* harmony export */   PgMacaddr: () => (/* binding */ PgMacaddr),\n/* harmony export */   PgMacaddr8: () => (/* binding */ PgMacaddr8),\n/* harmony export */   PgMacaddr8Builder: () => (/* binding */ PgMacaddr8Builder),\n/* harmony export */   PgMacaddrBuilder: () => (/* binding */ PgMacaddrBuilder),\n/* harmony export */   PgMaterializedView: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b1),\n/* harmony export */   PgMaterializedViewConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b0),\n/* harmony export */   PgNumeric: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ad),\n/* harmony export */   PgNumericBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ac),\n/* harmony export */   PgReal: () => (/* binding */ PgReal),\n/* harmony export */   PgRealBuilder: () => (/* binding */ PgRealBuilder),\n/* harmony export */   PgRefreshMaterializedView: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   PgSchema: () => (/* binding */ PgSchema),\n/* harmony export */   PgSelect: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aD),\n/* harmony export */   PgSelectBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   PgSelectQueryBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aC),\n/* harmony export */   PgSerial: () => (/* binding */ PgSerial),\n/* harmony export */   PgSerialBuilder: () => (/* binding */ PgSerialBuilder),\n/* harmony export */   PgSession: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   PgSmallInt: () => (/* binding */ PgSmallInt),\n/* harmony export */   PgSmallIntBuilder: () => (/* binding */ PgSmallIntBuilder),\n/* harmony export */   PgSmallSerial: () => (/* binding */ PgSmallSerial),\n/* harmony export */   PgSmallSerialBuilder: () => (/* binding */ PgSmallSerialBuilder),\n/* harmony export */   PgTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aF),\n/* harmony export */   PgText: () => (/* binding */ PgText),\n/* harmony export */   PgTextBuilder: () => (/* binding */ PgTextBuilder),\n/* harmony export */   PgTime: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ah),\n/* harmony export */   PgTimeBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ag),\n/* harmony export */   PgTimestamp: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ak),\n/* harmony export */   PgTimestampBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aj),\n/* harmony export */   PgTimestampString: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.am),\n/* harmony export */   PgTimestampStringBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.al),\n/* harmony export */   PgTransaction: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.b),\n/* harmony export */   PgUUID: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ap),\n/* harmony export */   PgUUIDBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ao),\n/* harmony export */   PgUpdate: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.i),\n/* harmony export */   PgUpdateBuilder: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.h),\n/* harmony export */   PgVarchar: () => (/* binding */ PgVarchar),\n/* harmony export */   PgVarcharBuilder: () => (/* binding */ PgVarcharBuilder),\n/* harmony export */   PgView: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a$),\n/* harmony export */   PgViewBase: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aZ),\n/* harmony export */   PgViewConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a_),\n/* harmony export */   PreparedQuery: () => (/* reexport safe */ _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   PrimaryKey: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aB),\n/* harmony export */   PrimaryKeyBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aA),\n/* harmony export */   QueryBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   UniqueConstraint: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aM),\n/* harmony export */   UniqueConstraintBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aK),\n/* harmony export */   UniqueOnConstraintBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aL),\n/* harmony export */   ViewBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aU),\n/* harmony export */   alias: () => (/* binding */ alias),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   bigserial: () => (/* binding */ bigserial),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   char: () => (/* binding */ char),\n/* harmony export */   check: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   cidr: () => (/* binding */ cidr),\n/* harmony export */   customType: () => (/* binding */ customType),\n/* harmony export */   date: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a5),\n/* harmony export */   decimal: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.af),\n/* harmony export */   doublePrecision: () => (/* binding */ doublePrecision),\n/* harmony export */   foreignKey: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.at),\n/* harmony export */   getMaterializedViewConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aP),\n/* harmony export */   getTableConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aN),\n/* harmony export */   getViewConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aO),\n/* harmony export */   index: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ax),\n/* harmony export */   inet: () => (/* binding */ inet),\n/* harmony export */   integer: () => (/* binding */ integer),\n/* harmony export */   interval: () => (/* binding */ interval),\n/* harmony export */   isPgEnum: () => (/* binding */ isPgEnum),\n/* harmony export */   isPgSchema: () => (/* binding */ isPgSchema),\n/* harmony export */   json: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a8),\n/* harmony export */   jsonb: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ab),\n/* harmony export */   macaddr: () => (/* binding */ macaddr),\n/* harmony export */   macaddr8: () => (/* binding */ macaddr8),\n/* harmony export */   makePgArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aS),\n/* harmony export */   numeric: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ae),\n/* harmony export */   parsePgArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aR),\n/* harmony export */   parsePgNestedArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aQ),\n/* harmony export */   pgEnum: () => (/* binding */ pgEnum),\n/* harmony export */   pgMaterializedView: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b3),\n/* harmony export */   pgMaterializedViewWithSchema: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.X),\n/* harmony export */   pgSchema: () => (/* binding */ pgSchema),\n/* harmony export */   pgTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aG),\n/* harmony export */   pgTableCreator: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aH),\n/* harmony export */   pgTableWithSchema: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.R),\n/* harmony export */   pgView: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b2),\n/* harmony export */   pgViewWithSchema: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.U),\n/* harmony export */   primaryKey: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.az),\n/* harmony export */   real: () => (/* binding */ real),\n/* harmony export */   serial: () => (/* binding */ serial),\n/* harmony export */   smallint: () => (/* binding */ smallint),\n/* harmony export */   smallserial: () => (/* binding */ smallserial),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   time: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ai),\n/* harmony export */   timestamp: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.an),\n/* harmony export */   unique: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aI),\n/* harmony export */   uniqueIndex: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ay),\n/* harmony export */   uniqueKeyName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aJ),\n/* harmony export */   uuid: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.aq),\n/* harmony export */   varchar: () => (/* binding */ varchar)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../alias-cf8e03cd.mjs */ \"(action-browser)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n/* harmony import */ var _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../session-6ea797a6.mjs */ \"(action-browser)/./node_modules/drizzle-orm/session-6ea797a6.mjs\");\n\n\n\nclass PgBigInt53Builder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigInt53Builder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgBigInt53\");\n    }\n    /** @internal */ build(table) {\n        return new PgBigInt53(table, this.config);\n    }\n}\nclass PgBigInt53 extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigInt53\";\n    }\n    getSQLType() {\n        return \"bigint\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"number\") {\n            return value;\n        }\n        return Number(value);\n    }\n}\nclass PgBigInt64Builder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigInt64Builder\";\n    }\n    constructor(name){\n        super(name, \"bigint\", \"PgBigInt64\");\n    }\n    /** @internal */ build(table) {\n        return new PgBigInt64(table, this.config);\n    }\n}\nclass PgBigInt64 extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigInt64\";\n    }\n    getSQLType() {\n        return \"bigint\";\n    }\n    // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n    mapFromDriverValue(value) {\n        return BigInt(value);\n    }\n}\nfunction bigint(name, config) {\n    if (config.mode === \"number\") {\n        return new PgBigInt53Builder(name);\n    }\n    return new PgBigInt64Builder(name);\n}\nclass PgBigSerial53Builder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigSerial53Builder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgBigSerial53\");\n        this.config.hasDefault = true;\n        this.config.notNull = true;\n    }\n    /** @internal */ build(table) {\n        return new PgBigSerial53(table, this.config);\n    }\n}\nclass PgBigSerial53 extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigSerial53\";\n    }\n    getSQLType() {\n        return \"bigserial\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"number\") {\n            return value;\n        }\n        return Number(value);\n    }\n}\nclass PgBigSerial64Builder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigSerial64Builder\";\n    }\n    constructor(name){\n        super(name, \"bigint\", \"PgBigSerial64\");\n        this.config.hasDefault = true;\n    }\n    /** @internal */ build(table) {\n        return new PgBigSerial64(table, this.config);\n    }\n}\nclass PgBigSerial64 extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBigSerial64\";\n    }\n    getSQLType() {\n        return \"bigserial\";\n    }\n    // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n    mapFromDriverValue(value) {\n        return BigInt(value);\n    }\n}\nfunction bigserial(name, { mode }) {\n    if (mode === \"number\") {\n        return new PgBigSerial53Builder(name);\n    }\n    return new PgBigSerial64Builder(name);\n}\nclass PgBooleanBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBooleanBuilder\";\n    }\n    constructor(name){\n        super(name, \"boolean\", \"PgBoolean\");\n    }\n    /** @internal */ build(table) {\n        return new PgBoolean(table, this.config);\n    }\n}\nclass PgBoolean extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgBoolean\";\n    }\n    getSQLType() {\n        return \"boolean\";\n    }\n}\nfunction boolean(name) {\n    return new PgBooleanBuilder(name);\n}\nclass PgCharBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgCharBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"PgChar\");\n        this.config.length = config.length;\n        this.config.enumValues = config.enum;\n    }\n    /** @internal */ build(table) {\n        return new PgChar(table, this.config);\n    }\n}\nclass PgChar extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgChar\";\n    }\n    getSQLType() {\n        return this.length === undefined ? `char` : `char(${this.length})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.length = this.config.length;\n        this.enumValues = this.config.enumValues;\n    }\n}\nfunction char(name, config = {}) {\n    return new PgCharBuilder(name, config);\n}\nclass PgCidrBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgCidrBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgCidr\");\n    }\n    /** @internal */ build(table) {\n        return new PgCidr(table, this.config);\n    }\n}\nclass PgCidr extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgCidr\";\n    }\n    getSQLType() {\n        return \"cidr\";\n    }\n}\nfunction cidr(name) {\n    return new PgCidrBuilder(name);\n}\nclass PgCustomColumnBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgCustomColumnBuilder\";\n    }\n    constructor(name, fieldConfig, customTypeParams){\n        super(name, \"custom\", \"PgCustomColumn\");\n        this.config.fieldConfig = fieldConfig;\n        this.config.customTypeParams = customTypeParams;\n    }\n    /** @internal */ build(table) {\n        return new PgCustomColumn(table, this.config);\n    }\n}\nclass PgCustomColumn extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgCustomColumn\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n        this.mapTo = config.customTypeParams.toDriver;\n        this.mapFrom = config.customTypeParams.fromDriver;\n    }\n    getSQLType() {\n        return this.sqlName;\n    }\n    mapFromDriverValue(value) {\n        return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n    }\n    mapToDriverValue(value) {\n        return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n    }\n}\n/**\n * Custom pg database data type generator\n */ function customType(customTypeParams) {\n    return (dbName, fieldConfig)=>{\n        return new PgCustomColumnBuilder(dbName, fieldConfig, customTypeParams);\n    };\n}\nclass PgDoublePrecisionBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgDoublePrecisionBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgDoublePrecision\");\n    }\n    /** @internal */ build(table) {\n        return new PgDoublePrecision(table, this.config);\n    }\n}\nclass PgDoublePrecision extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgDoublePrecision\";\n    }\n    getSQLType() {\n        return \"double precision\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number.parseFloat(value);\n        }\n        return value;\n    }\n}\nfunction doublePrecision(name) {\n    return new PgDoublePrecisionBuilder(name);\n}\nconst isPgEnumSym = Symbol.for(\"drizzle:isPgEnum\");\nfunction isPgEnum(obj) {\n    return !!obj && typeof obj === \"function\" && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\nclass PgEnumColumnBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgEnumColumnBuilder\";\n    }\n    constructor(name, enumInstance){\n        super(name, \"string\", \"PgEnumColumn\");\n        this.config.enum = enumInstance;\n    }\n    /** @internal */ build(table) {\n        return new PgEnumColumn(table, this.config);\n    }\n}\nclass PgEnumColumn extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgEnumColumn\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.enum = this.config.enum;\n        this.enumValues = this.config.enum.enumValues;\n        this.enum = config.enum;\n    }\n    getSQLType() {\n        return this.enum.enumName;\n    }\n}\n// Gratitude to zod for the enum function types\nfunction pgEnum(enumName, values) {\n    const enumInstance = Object.assign((name)=>new PgEnumColumnBuilder(name, enumInstance), {\n        enumName,\n        enumValues: values,\n        [isPgEnumSym]: true\n    });\n    return enumInstance;\n}\nclass PgInetBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgInetBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgInet\");\n    }\n    /** @internal */ build(table) {\n        return new PgInet(table, this.config);\n    }\n}\nclass PgInet extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgInet\";\n    }\n    getSQLType() {\n        return \"inet\";\n    }\n}\nfunction inet(name) {\n    return new PgInetBuilder(name);\n}\nclass PgIntegerBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgIntegerBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgInteger\");\n    }\n    /** @internal */ build(table) {\n        return new PgInteger(table, this.config);\n    }\n}\nclass PgInteger extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgInteger\";\n    }\n    getSQLType() {\n        return \"integer\";\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            return Number.parseInt(value);\n        }\n        return value;\n    }\n}\nfunction integer(name) {\n    return new PgIntegerBuilder(name);\n}\nclass PgIntervalBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgIntervalBuilder\";\n    }\n    constructor(name, intervalConfig){\n        super(name, \"string\", \"PgInterval\");\n        this.config.intervalConfig = intervalConfig;\n    }\n    /** @internal */ build(table) {\n        return new PgInterval(table, this.config);\n    }\n}\nclass PgInterval extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgInterval\";\n    }\n    getSQLType() {\n        const fields = this.fields ? ` ${this.fields}` : \"\";\n        const precision = this.precision ? `(${this.precision})` : \"\";\n        return `interval${fields}${precision}`;\n    }\n    constructor(...args){\n        super(...args);\n        this.fields = this.config.intervalConfig.fields;\n        this.precision = this.config.intervalConfig.precision;\n    }\n}\nfunction interval(name, config = {}) {\n    return new PgIntervalBuilder(name, config);\n}\nclass PgMacaddrBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgMacaddrBuilder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgMacaddr\");\n    }\n    /** @internal */ build(table) {\n        return new PgMacaddr(table, this.config);\n    }\n}\nclass PgMacaddr extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgMacaddr\";\n    }\n    getSQLType() {\n        return \"macaddr\";\n    }\n}\nfunction macaddr(name) {\n    return new PgMacaddrBuilder(name);\n}\nclass PgMacaddr8Builder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgMacaddr8Builder\";\n    }\n    constructor(name){\n        super(name, \"string\", \"PgMacaddr8\");\n    }\n    /** @internal */ build(table) {\n        return new PgMacaddr8(table, this.config);\n    }\n}\nclass PgMacaddr8 extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgMacaddr8\";\n    }\n    getSQLType() {\n        return \"macaddr8\";\n    }\n}\nfunction macaddr8(name) {\n    return new PgMacaddr8Builder(name);\n}\nclass PgRealBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgRealBuilder\";\n    }\n    constructor(name, length){\n        super(name, \"number\", \"PgReal\");\n        this.config.length = length;\n    }\n    /** @internal */ build(table) {\n        return new PgReal(table, this.config);\n    }\n}\nclass PgReal extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgReal\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.mapFromDriverValue = (value)=>{\n            if (typeof value === \"string\") {\n                return Number.parseFloat(value);\n            }\n            return value;\n        };\n    }\n    getSQLType() {\n        return \"real\";\n    }\n}\nfunction real(name) {\n    return new PgRealBuilder(name);\n}\nclass PgSerialBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSerialBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgSerial\");\n        this.config.hasDefault = true;\n        this.config.notNull = true;\n    }\n    /** @internal */ build(table) {\n        return new PgSerial(table, this.config);\n    }\n}\nclass PgSerial extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSerial\";\n    }\n    getSQLType() {\n        return \"serial\";\n    }\n}\nfunction serial(name) {\n    return new PgSerialBuilder(name);\n}\nclass PgSmallIntBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSmallIntBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgSmallInt\");\n    }\n    /** @internal */ build(table) {\n        return new PgSmallInt(table, this.config);\n    }\n}\nclass PgSmallInt extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSmallInt\";\n    }\n    getSQLType() {\n        return \"smallint\";\n    }\n    constructor(...args){\n        super(...args);\n        this.mapFromDriverValue = (value)=>{\n            if (typeof value === \"string\") {\n                return Number(value);\n            }\n            return value;\n        };\n    }\n}\nfunction smallint(name) {\n    return new PgSmallIntBuilder(name);\n}\nclass PgSmallSerialBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSmallSerialBuilder\";\n    }\n    constructor(name){\n        super(name, \"number\", \"PgSmallSerial\");\n        this.config.hasDefault = true;\n        this.config.notNull = true;\n    }\n    /** @internal */ build(table) {\n        return new PgSmallSerial(table, this.config);\n    }\n}\nclass PgSmallSerial extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSmallSerial\";\n    }\n    getSQLType() {\n        return \"smallserial\";\n    }\n}\nfunction smallserial(name) {\n    return new PgSmallSerialBuilder(name);\n}\nclass PgTextBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgTextBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"PgText\");\n        this.config.enumValues = config.enum;\n    }\n    /** @internal */ build(table) {\n        return new PgText(table, this.config);\n    }\n}\nclass PgText extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgText\";\n    }\n    getSQLType() {\n        return \"text\";\n    }\n    constructor(...args){\n        super(...args);\n        this.enumValues = this.config.enumValues;\n    }\n}\nfunction text(name, config = {}) {\n    return new PgTextBuilder(name, config);\n}\nclass PgVarcharBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.L {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgVarcharBuilder\";\n    }\n    constructor(name, config){\n        super(name, \"string\", \"PgVarchar\");\n        this.config.length = config.length;\n        this.config.enumValues = config.enum;\n    }\n    /** @internal */ build(table) {\n        return new PgVarchar(table, this.config);\n    }\n}\nclass PgVarchar extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.N {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgVarchar\";\n    }\n    getSQLType() {\n        return this.length === undefined ? `varchar` : `varchar(${this.length})`;\n    }\n    constructor(...args){\n        super(...args);\n        this.length = this.config.length;\n        this.enumValues = this.config.enumValues;\n    }\n}\nfunction varchar(name, config = {}) {\n    return new PgVarcharBuilder(name, config);\n}\nfunction alias(table, alias) {\n    return new Proxy(table, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.n(alias, false));\n}\nclass PgSchema {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSchema\";\n    }\n    constructor(schemaName){\n        this.table = (name, columns, extraConfig)=>{\n            return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(name, columns, extraConfig, this.schemaName);\n        };\n        this.view = (name, columns)=>{\n            return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.U)(name, columns, this.schemaName);\n        };\n        this.materializedView = (name, columns)=>{\n            return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(name, columns, this.schemaName);\n        };\n        this.schemaName = schemaName;\n    }\n}\nfunction isPgSchema(obj) {\n    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj, PgSchema);\n}\nfunction pgSchema(name) {\n    if (name === \"public\") {\n        throw new Error(`You can't specify 'public' as schema name. Postgres is using public schema by default. If you want to use 'public' schema, just use pgTable() instead of creating a schema`);\n    }\n    return new PgSchema(name);\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/drizzle-orm/pg-core/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/drizzle-orm/postgres-js/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/drizzle-orm/postgres-js/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostgresJsPreparedQuery: () => (/* binding */ PostgresJsPreparedQuery),\n/* harmony export */   PostgresJsSession: () => (/* binding */ PostgresJsSession),\n/* harmony export */   PostgresJsTransaction: () => (/* binding */ PostgresJsTransaction),\n/* harmony export */   drizzle: () => (/* binding */ drizzle)\n/* harmony export */ });\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.mjs */ \"(action-browser)/./node_modules/drizzle-orm/index.mjs\");\n/* harmony import */ var _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../session-6ea797a6.mjs */ \"(action-browser)/./node_modules/drizzle-orm/session-6ea797a6.mjs\");\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alias-cf8e03cd.mjs */ \"(action-browser)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n\n\nclass PostgresJsPreparedQuery extends _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_0__.P {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"PostgresJsPreparedQuery\";\n    }\n    constructor(client, query, params, logger, fields, customResultMapper){\n        super();\n        this.client = client;\n        this.query = query;\n        this.params = params;\n        this.logger = logger;\n        this.fields = fields;\n        this.customResultMapper = customResultMapper;\n    }\n    async execute(placeholderValues = {}) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.t.startActiveSpan(\"drizzle.execute\", async (span)=>{\n            const params = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues);\n            span?.setAttributes({\n                \"drizzle.query.text\": this.query,\n                \"drizzle.query.params\": JSON.stringify(params)\n            });\n            this.logger.logQuery(this.query, params);\n            const { fields, query, client, joinsNotNullableMap, customResultMapper } = this;\n            if (!fields && !customResultMapper) {\n                return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.t.startActiveSpan(\"drizzle.driver.execute\", ()=>{\n                    return client.unsafe(query, params);\n                });\n            }\n            const rows = await _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.t.startActiveSpan(\"drizzle.driver.execute\", ()=>{\n                span?.setAttributes({\n                    \"drizzle.query.text\": query,\n                    \"drizzle.query.params\": JSON.stringify(params)\n                });\n                return client.unsafe(query, params).values();\n            });\n            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.t.startActiveSpan(\"drizzle.mapResponse\", ()=>{\n                return customResultMapper ? customResultMapper(rows) : rows.map((row)=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(fields, row, joinsNotNullableMap));\n            });\n        });\n    }\n    all(placeholderValues = {}) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.t.startActiveSpan(\"drizzle.execute\", async (span)=>{\n            const params = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues);\n            span?.setAttributes({\n                \"drizzle.query.text\": this.query,\n                \"drizzle.query.params\": JSON.stringify(params)\n            });\n            this.logger.logQuery(this.query, params);\n            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.t.startActiveSpan(\"drizzle.driver.execute\", ()=>{\n                span?.setAttributes({\n                    \"drizzle.query.text\": this.query,\n                    \"drizzle.query.params\": JSON.stringify(params)\n                });\n                return this.client.unsafe(this.query, params);\n            });\n        });\n    }\n}\nclass PostgresJsSession extends _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_0__.a {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"PostgresJsSession\";\n    }\n    constructor(client, dialect, schema, /** @internal */ options = {}){\n        super(dialect);\n        this.client = client;\n        this.schema = schema;\n        this.options = options;\n        this.logger = options.logger ?? new _index_mjs__WEBPACK_IMPORTED_MODULE_2__.NoopLogger();\n    }\n    prepareQuery(query, fields, name, customResultMapper) {\n        return new PostgresJsPreparedQuery(this.client, query.sql, query.params, this.logger, fields, customResultMapper);\n    }\n    query(query, params) {\n        this.logger.logQuery(query, params);\n        return this.client.unsafe(query, params).values();\n    }\n    queryObjects(query, params) {\n        return this.client.unsafe(query, params);\n    }\n    transaction(transaction, config) {\n        return this.client.begin(async (client)=>{\n            const session = new PostgresJsSession(client, this.dialect, this.schema, this.options);\n            const tx = new PostgresJsTransaction(this.dialect, session, this.schema);\n            if (config) {\n                await tx.setTransaction(config);\n            }\n            return transaction(tx);\n        });\n    }\n}\nclass PostgresJsTransaction extends _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_0__.b {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"PostgresJsTransaction\";\n    }\n    constructor(dialect, /** @internal */ session, schema, nestedIndex = 0){\n        super(dialect, session, schema, nestedIndex);\n        this.session = session;\n    }\n    transaction(transaction) {\n        return this.session.client.savepoint((client)=>{\n            const session = new PostgresJsSession(client, this.dialect, this.schema, this.session.options);\n            const tx = new PostgresJsTransaction(this.dialect, session, this.schema);\n            return transaction(tx);\n        });\n    }\n}\nfunction drizzle(client, config = {}) {\n    const dialect = new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.P();\n    let logger;\n    if (config.logger === true) {\n        logger = new _index_mjs__WEBPACK_IMPORTED_MODULE_2__.DefaultLogger();\n    } else if (config.logger !== false) {\n        logger = config.logger;\n    }\n    let schema;\n    if (config.schema) {\n        const tablesConfig = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(config.schema, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.c);\n        schema = {\n            fullSchema: config.schema,\n            schema: tablesConfig.tables,\n            tableNamesMap: tablesConfig.tableNamesMap\n        };\n    }\n    const session = new PostgresJsSession(client, dialect, schema, {\n        logger\n    });\n    return new _session_6ea797a6_mjs__WEBPACK_IMPORTED_MODULE_0__.c(dialect, session, schema);\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/drizzle-orm/postgres-js/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/drizzle-orm/session-6ea797a6.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/drizzle-orm/session-6ea797a6.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ PreparedQuery),\n/* harmony export */   a: () => (/* binding */ PgSession),\n/* harmony export */   b: () => (/* binding */ PgTransaction),\n/* harmony export */   c: () => (/* binding */ PgDatabase),\n/* harmony export */   d: () => (/* binding */ PgDelete),\n/* harmony export */   e: () => (/* binding */ PgInsertBuilder),\n/* harmony export */   f: () => (/* binding */ PgInsert),\n/* harmony export */   g: () => (/* binding */ PgRefreshMaterializedView),\n/* harmony export */   h: () => (/* binding */ PgUpdateBuilder),\n/* harmony export */   i: () => (/* binding */ PgUpdate)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-cf8e03cd.mjs */ \"(action-browser)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\nclass PgDelete extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgDelete\";\n    }\n    constructor(table, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.operation\", ()=>{\n                return this._prepare().execute(placeholderValues);\n            });\n        };\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            table\n        };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    returning(fields = this.config.table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns]) {\n        this.config.returning = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildDeleteQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    _prepare(name) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name);\n        });\n    }\n    prepare(name) {\n        return this._prepare(name);\n    }\n}\nclass PgInsertBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgInsertBuilder\";\n    }\n    constructor(table, session, dialect){\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    values(values) {\n        values = Array.isArray(values) ? values : [\n            values\n        ];\n        if (values.length === 0) {\n            throw new Error(\"values() must be called with at least one value\");\n        }\n        const mappedValues = values.map((entry)=>{\n            const result = {};\n            const cols = this.table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n            for (const colKey of Object.keys(entry)){\n                const colValue = entry[colKey];\n                result[colKey] = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? colValue : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b(colValue, cols[colKey]);\n            }\n            return result;\n        });\n        return new PgInsert(this.table, mappedValues, this.session, this.dialect);\n    }\n}\nclass PgInsert extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgInsert\";\n    }\n    constructor(table, values, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.operation\", ()=>{\n                return this._prepare().execute(placeholderValues);\n            });\n        };\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            table,\n            values\n        };\n    }\n    returning(fields = this.config.table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns]) {\n        this.config.returning = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        return this;\n    }\n    onConflictDoNothing(config = {}) {\n        if (config.target === undefined) {\n            this.config.onConflict = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`do nothing`;\n        } else {\n            let targetColumn = \"\";\n            targetColumn = Array.isArray(config.target) ? config.target.map((it)=>this.dialect.escapeName(it.name)).join(\",\") : this.dialect.escapeName(config.target.name);\n            const whereSql = config.where ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${config.where}` : undefined;\n            this.config.onConflict = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`(${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(targetColumn)}) do nothing${whereSql}`;\n        }\n        return this;\n    }\n    onConflictDoUpdate(config) {\n        const whereSql = config.where ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${config.where}` : undefined;\n        const setSql = this.dialect.buildUpdateSet(this.config.table, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.config.table, config.set));\n        let targetColumn = \"\";\n        targetColumn = Array.isArray(config.target) ? config.target.map((it)=>this.dialect.escapeName(it.name)).join(\",\") : this.dialect.escapeName(config.target.name);\n        this.config.onConflict = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`(${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(targetColumn)}) do update set ${setSql}${whereSql}`;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildInsertQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    _prepare(name) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name);\n        });\n    }\n    prepare(name) {\n        return this._prepare(name);\n    }\n}\nclass PgRefreshMaterializedView extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgRefreshMaterializedView\";\n    }\n    constructor(view, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.operation\", ()=>{\n                return this._prepare().execute(placeholderValues);\n            });\n        };\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            view\n        };\n    }\n    concurrently() {\n        if (this.config.withNoData !== undefined) {\n            throw new Error(\"Cannot use concurrently and withNoData together\");\n        }\n        this.config.concurrently = true;\n        return this;\n    }\n    withNoData() {\n        if (this.config.concurrently !== undefined) {\n            throw new Error(\"Cannot use concurrently and withNoData together\");\n        }\n        this.config.withNoData = true;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildRefreshMaterializedViewQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    _prepare(name) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), undefined, name);\n        });\n    }\n    prepare(name) {\n        return this._prepare(name);\n    }\n}\nclass PgUpdateBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgUpdateBuilder\";\n    }\n    constructor(table, session, dialect){\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    set(values) {\n        return new PgUpdate(this.table, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.table, values), this.session, this.dialect);\n    }\n}\nclass PgUpdate extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgUpdate\";\n    }\n    constructor(table, set, session, dialect){\n        super();\n        this.execute = (placeholderValues)=>{\n            return this._prepare().execute(placeholderValues);\n        };\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            set,\n            table\n        };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    returning(fields = this.config.table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns]) {\n        this.config.returning = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildUpdateQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    _prepare(name) {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name);\n    }\n    prepare(name) {\n        return this._prepare(name);\n    }\n}\nclass RelationalQueryBuilder {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgRelationalQueryBuilder\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session){\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n    }\n    findMany(config) {\n        return new PgRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? config : {}, \"many\");\n    }\n    findFirst(config) {\n        return new PgRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? {\n            ...config,\n            limit: 1\n        } : {\n            limit: 1\n        }, \"first\");\n    }\n}\nclass PgRelationalQuery extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgRelationalQuery\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode){\n        super();\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n        this.config = config;\n        this.mode = mode;\n    }\n    _prepare(name) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            const { query, builtQuery } = this._toSQL();\n            return this.session.prepareQuery(builtQuery, undefined, name, (rawRows, mapColumnValue)=>{\n                const rows = rawRows.map((row)=>(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(this.schema, this.tableConfig, row, query.selection, mapColumnValue));\n                if (this.mode === \"first\") {\n                    return rows[0];\n                }\n                return rows;\n            });\n        });\n    }\n    prepare(name) {\n        return this._prepare(name);\n    }\n    _toSQL() {\n        const query = this.dialect.buildRelationalQueryWithoutPK({\n            fullSchema: this.fullSchema,\n            schema: this.schema,\n            tableNamesMap: this.tableNamesMap,\n            table: this.table,\n            tableConfig: this.tableConfig,\n            queryConfig: this.config,\n            tableAlias: this.tableConfig.tsName\n        });\n        const builtQuery = this.dialect.sqlToQuery(query.sql);\n        return {\n            query,\n            builtQuery\n        };\n    }\n    toSQL() {\n        return this._toSQL().builtQuery;\n    }\n    execute() {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.operation\", ()=>{\n            return this._prepare().execute();\n        });\n    }\n}\nclass PgDatabase {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgDatabase\";\n    }\n    constructor(/** @internal */ dialect, /** @internal */ session, schema){\n        this.dialect = dialect;\n        this.session = session;\n        this._ = schema ? {\n            schema: schema.schema,\n            tableNamesMap: schema.tableNamesMap\n        } : {\n            schema: undefined,\n            tableNamesMap: {}\n        };\n        this.query = {};\n        if (this._.schema) {\n            for (const [tableName, columns] of Object.entries(this._.schema)){\n                this.query[tableName] = new RelationalQueryBuilder(schema.fullSchema, this._.schema, this._.tableNamesMap, schema.fullSchema[tableName], columns, dialect, session);\n            }\n        }\n    }\n    $with(alias) {\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.h());\n                }\n                return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.k({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries\n            });\n        }\n        return {\n            select\n        };\n    }\n    select(fields) {\n        return new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.k({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect\n        });\n    }\n    selectDistinct(fields) {\n        return new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.k({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect,\n            distinct: true\n        });\n    }\n    selectDistinctOn(on, fields) {\n        return new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.k({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect,\n            distinct: {\n                on\n            }\n        });\n    }\n    update(table) {\n        return new PgUpdateBuilder(table, this.session, this.dialect);\n    }\n    insert(table) {\n        return new PgInsertBuilder(table, this.session, this.dialect);\n    }\n    delete(table) {\n        return new PgDelete(table, this.session, this.dialect);\n    }\n    refreshMaterializedView(view) {\n        return new PgRefreshMaterializedView(view, this.session, this.dialect);\n    }\n    execute(query) {\n        return this.session.execute(query.getSQL());\n    }\n    transaction(transaction, config) {\n        return this.session.transaction(transaction, config);\n    }\n}\nclass PreparedQuery {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgPreparedQuery\";\n    }\n}\nclass PgSession {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgSession\";\n    }\n    constructor(dialect){\n        this.dialect = dialect;\n    }\n    execute(query) {\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.operation\", ()=>{\n            const prepared = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.t.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n                return this.prepareQuery(this.dialect.sqlToQuery(query), undefined, undefined);\n            });\n            return prepared.execute();\n        });\n    }\n    all(query) {\n        return this.prepareQuery(this.dialect.sqlToQuery(query), undefined, undefined).all();\n    }\n}\nclass PgTransaction extends PgDatabase {\n    static{\n        this[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PgTransaction\";\n    }\n    constructor(dialect, session, schema, nestedIndex = 0){\n        super(dialect, session, schema);\n        this.schema = schema;\n        this.nestedIndex = nestedIndex;\n    }\n    rollback() {\n        throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.l();\n    }\n    /** @internal */ getTransactionConfigSQL(config) {\n        const chunks = [];\n        if (config.isolationLevel) {\n            chunks.push(`isolation level ${config.isolationLevel}`);\n        }\n        if (config.accessMode) {\n            chunks.push(config.accessMode);\n        }\n        if (typeof config.deferrable === \"boolean\") {\n            chunks.push(config.deferrable ? \"deferrable\" : \"not deferrable\");\n        }\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(chunks.join(\" \"));\n    }\n    setTransaction(config) {\n        return this.session.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s`set transaction ${this.getTransactionConfigSQL(config)}`);\n    }\n}\n //# sourceMappingURL=session-6ea797a6.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kcml6emxlLW9ybS9zZXNzaW9uLTZlYTc5N2E2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUF1VTtBQUV2VSxNQUFNZ0MsaUJBQWlCL0Isa0RBQVlBOztZQUd4QixDQUFDRSxrREFBVUEsQ0FBQyxHQUFHOztJQUV0QjhCLFlBQVlDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxPQUFPLENBQUU7UUFDakMsS0FBSzthQTZCVEMsVUFBVSxDQUFDQztZQUNQLE9BQU83QixrREFBTUEsQ0FBQzhCLGVBQWUsQ0FBQyxxQkFBcUI7Z0JBQy9DLE9BQU8sSUFBSSxDQUFDQyxRQUFRLEdBQUdILE9BQU8sQ0FBQ0M7WUFDbkM7UUFDSjtRQWhDSSxJQUFJLENBQUNILE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNLLE1BQU0sR0FBRztZQUFFUDtRQUFNO0lBQzFCO0lBQ0FRLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxLQUFLLEdBQUdBO1FBQ3BCLE9BQU8sSUFBSTtJQUNmO0lBQ0FDLFVBQVVDLFNBQVMsSUFBSSxDQUFDSCxNQUFNLENBQUNQLEtBQUssQ0FBQzNCLGtEQUFLQSxDQUFDc0MsTUFBTSxDQUFDQyxPQUFPLENBQUMsRUFBRTtRQUN4RCxJQUFJLENBQUNMLE1BQU0sQ0FBQ0UsU0FBUyxHQUFHdEMsc0RBQW1CQSxDQUFDdUM7UUFDNUMsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxjQUFjLEdBQ2RHLFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQ1gsT0FBTyxDQUFDWSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNQLE1BQU07SUFDcEQ7SUFDQVEsUUFBUTtRQUNKLE1BQU0sRUFBRUMsU0FBU0MsUUFBUSxFQUFFLEdBQUdDLE1BQU0sR0FBRyxJQUFJLENBQUNoQixPQUFPLENBQUNpQixVQUFVLENBQUMsSUFBSSxDQUFDTixNQUFNO1FBQzFF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LHNCQUFzQi9COztZQUdqQixDQUFDbkgsa0RBQVVBLENBQUMsR0FBRzs7SUFDdEI4QixZQUFZRyxPQUFPLEVBQUVELE9BQU8sRUFBRStELE1BQU0sRUFBRW9ELGNBQWMsQ0FBQyxDQUFFO1FBQ25ELEtBQUssQ0FBQ2xILFNBQVNELFNBQVMrRDtRQUN4QixJQUFJLENBQUNBLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNvRCxXQUFXLEdBQUdBO0lBQ3ZCO0lBQ0FDLFdBQVc7UUFDUCxNQUFNLElBQUl4SCxrREFBd0JBO0lBQ3RDO0lBQ0EsY0FBYyxHQUNkeUgsd0JBQXdCL0csTUFBTSxFQUFFO1FBQzVCLE1BQU1nSCxTQUFTLEVBQUU7UUFDakIsSUFBSWhILE9BQU9pSCxjQUFjLEVBQUU7WUFDdkJELE9BQU9FLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFbEgsT0FBT2lILGNBQWMsQ0FBQyxDQUFDO1FBQzFEO1FBQ0EsSUFBSWpILE9BQU9tSCxVQUFVLEVBQUU7WUFDbkJILE9BQU9FLElBQUksQ0FBQ2xILE9BQU9tSCxVQUFVO1FBQ2pDO1FBQ0EsSUFBSSxPQUFPbkgsT0FBT29ILFVBQVUsS0FBSyxXQUFXO1lBQ3hDSixPQUFPRSxJQUFJLENBQUNsSCxPQUFPb0gsVUFBVSxHQUFHLGVBQWU7UUFDbkQ7UUFDQSxPQUFPNUksa0RBQUdBLENBQUNpRSxHQUFHLENBQUN1RSxPQUFPekUsSUFBSSxDQUFDO0lBQy9CO0lBQ0E4RSxlQUFlckgsTUFBTSxFQUFFO1FBQ25CLE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNFLE9BQU8sQ0FBQ3BCLGtEQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDdUksdUJBQXVCLENBQUMvRyxRQUFRLENBQUM7SUFDN0Y7QUFDSjtBQUU0TSxDQUM1TSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwcm9kaWdpZXMtY3lwcmVzcy8uL25vZGVfbW9kdWxlcy9kcml6emxlLW9ybS9zZXNzaW9uLTZlYTc5N2E2Lm1qcz9hMjVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFEgYXMgUXVlcnlQcm9taXNlLCBlIGFzIGVudGl0eUtpbmQsIG8gYXMgb3JkZXJTZWxlY3RlZEZpZWxkcywgVCBhcyBUYWJsZSwgdCBhcyB0cmFjZXIsIGkgYXMgaXMsIFMgYXMgU1FMLCBiIGFzIFBhcmFtLCBzIGFzIHNxbCwgZCBhcyBtYXBVcGRhdGVTZXQsIGcgYXMgbWFwUmVsYXRpb25hbFJvdywgaCBhcyBRdWVyeUJ1aWxkZXIsIFcgYXMgV2l0aFN1YnF1ZXJ5LCBqIGFzIFNlbGVjdGlvblByb3h5SGFuZGxlciwgayBhcyBQZ1NlbGVjdEJ1aWxkZXIsIGwgYXMgVHJhbnNhY3Rpb25Sb2xsYmFja0Vycm9yIH0gZnJvbSAnLi9hbGlhcy1jZjhlMDNjZC5tanMnO1xuXG5jbGFzcyBQZ0RlbGV0ZSBleHRlbmRzIFF1ZXJ5UHJvbWlzZSB7XG4gICAgc2Vzc2lvbjtcbiAgICBkaWFsZWN0O1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnUGdEZWxldGUnO1xuICAgIGNvbmZpZztcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgc2Vzc2lvbiwgZGlhbGVjdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICB0aGlzLmRpYWxlY3QgPSBkaWFsZWN0O1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgdGFibGUgfTtcbiAgICB9XG4gICAgd2hlcmUod2hlcmUpIHtcbiAgICAgICAgdGhpcy5jb25maWcud2hlcmUgPSB3aGVyZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybmluZyhmaWVsZHMgPSB0aGlzLmNvbmZpZy50YWJsZVtUYWJsZS5TeW1ib2wuQ29sdW1uc10pIHtcbiAgICAgICAgdGhpcy5jb25maWcucmV0dXJuaW5nID0gb3JkZXJTZWxlY3RlZEZpZWxkcyhmaWVsZHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGdldFNRTCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlhbGVjdC5idWlsZERlbGV0ZVF1ZXJ5KHRoaXMuY29uZmlnKTtcbiAgICB9XG4gICAgdG9TUUwoKSB7XG4gICAgICAgIGNvbnN0IHsgdHlwaW5nczogX3R5cGluZ3MsIC4uLnJlc3QgfSA9IHRoaXMuZGlhbGVjdC5zcWxUb1F1ZXJ5KHRoaXMuZ2V0U1FMKCkpO1xuICAgICAgICByZXR1cm4gcmVzdDtcbiAgICB9XG4gICAgX3ByZXBhcmUobmFtZSkge1xuICAgICAgICByZXR1cm4gdHJhY2VyLnN0YXJ0QWN0aXZlU3BhbignZHJpenpsZS5wcmVwYXJlUXVlcnknLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uLnByZXBhcmVRdWVyeSh0aGlzLmRpYWxlY3Quc3FsVG9RdWVyeSh0aGlzLmdldFNRTCgpKSwgdGhpcy5jb25maWcucmV0dXJuaW5nLCBuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByZXBhcmUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJlcGFyZShuYW1lKTtcbiAgICB9XG4gICAgZXhlY3V0ZSA9IChwbGFjZWhvbGRlclZhbHVlcykgPT4ge1xuICAgICAgICByZXR1cm4gdHJhY2VyLnN0YXJ0QWN0aXZlU3BhbignZHJpenpsZS5vcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJlcGFyZSgpLmV4ZWN1dGUocGxhY2Vob2xkZXJWYWx1ZXMpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5jbGFzcyBQZ0luc2VydEJ1aWxkZXIge1xuICAgIHRhYmxlO1xuICAgIHNlc3Npb247XG4gICAgZGlhbGVjdDtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ1BnSW5zZXJ0QnVpbGRlcic7XG4gICAgY29uc3RydWN0b3IodGFibGUsIHNlc3Npb24sIGRpYWxlY3QpIHtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICB0aGlzLmRpYWxlY3QgPSBkaWFsZWN0O1xuICAgIH1cbiAgICB2YWx1ZXModmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWVzKSA/IHZhbHVlcyA6IFt2YWx1ZXNdO1xuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZXMoKSBtdXN0IGJlIGNhbGxlZCB3aXRoIGF0IGxlYXN0IG9uZSB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hcHBlZFZhbHVlcyA9IHZhbHVlcy5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGNvbHMgPSB0aGlzLnRhYmxlW1RhYmxlLlN5bWJvbC5Db2x1bW5zXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29sS2V5IG9mIE9iamVjdC5rZXlzKGVudHJ5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbFZhbHVlID0gZW50cnlbY29sS2V5XTtcbiAgICAgICAgICAgICAgICByZXN1bHRbY29sS2V5XSA9IGlzKGNvbFZhbHVlLCBTUUwpID8gY29sVmFsdWUgOiBuZXcgUGFyYW0oY29sVmFsdWUsIGNvbHNbY29sS2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQZ0luc2VydCh0aGlzLnRhYmxlLCBtYXBwZWRWYWx1ZXMsIHRoaXMuc2Vzc2lvbiwgdGhpcy5kaWFsZWN0KTtcbiAgICB9XG59XG5jbGFzcyBQZ0luc2VydCBleHRlbmRzIFF1ZXJ5UHJvbWlzZSB7XG4gICAgc2Vzc2lvbjtcbiAgICBkaWFsZWN0O1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnUGdJbnNlcnQnO1xuICAgIGNvbmZpZztcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgdmFsdWVzLCBzZXNzaW9uLCBkaWFsZWN0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgICAgIHRoaXMuZGlhbGVjdCA9IGRpYWxlY3Q7XG4gICAgICAgIHRoaXMuY29uZmlnID0geyB0YWJsZSwgdmFsdWVzIH07XG4gICAgfVxuICAgIHJldHVybmluZyhmaWVsZHMgPSB0aGlzLmNvbmZpZy50YWJsZVtUYWJsZS5TeW1ib2wuQ29sdW1uc10pIHtcbiAgICAgICAgdGhpcy5jb25maWcucmV0dXJuaW5nID0gb3JkZXJTZWxlY3RlZEZpZWxkcyhmaWVsZHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb25Db25mbGljdERvTm90aGluZyhjb25maWcgPSB7fSkge1xuICAgICAgICBpZiAoY29uZmlnLnRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5vbkNvbmZsaWN0ID0gc3FsIGBkbyBub3RoaW5nYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCB0YXJnZXRDb2x1bW4gPSAnJztcbiAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IEFycmF5LmlzQXJyYXkoY29uZmlnLnRhcmdldClcbiAgICAgICAgICAgICAgICA/IGNvbmZpZy50YXJnZXQubWFwKChpdCkgPT4gdGhpcy5kaWFsZWN0LmVzY2FwZU5hbWUoaXQubmFtZSkpLmpvaW4oJywnKVxuICAgICAgICAgICAgICAgIDogdGhpcy5kaWFsZWN0LmVzY2FwZU5hbWUoY29uZmlnLnRhcmdldC5uYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHdoZXJlU3FsID0gY29uZmlnLndoZXJlID8gc3FsIGAgd2hlcmUgJHtjb25maWcud2hlcmV9YCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLm9uQ29uZmxpY3QgPSBzcWwgYCgke3NxbC5yYXcodGFyZ2V0Q29sdW1uKX0pIGRvIG5vdGhpbmcke3doZXJlU3FsfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG9uQ29uZmxpY3REb1VwZGF0ZShjb25maWcpIHtcbiAgICAgICAgY29uc3Qgd2hlcmVTcWwgPSBjb25maWcud2hlcmUgPyBzcWwgYCB3aGVyZSAke2NvbmZpZy53aGVyZX1gIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzZXRTcWwgPSB0aGlzLmRpYWxlY3QuYnVpbGRVcGRhdGVTZXQodGhpcy5jb25maWcudGFibGUsIG1hcFVwZGF0ZVNldCh0aGlzLmNvbmZpZy50YWJsZSwgY29uZmlnLnNldCkpO1xuICAgICAgICBsZXQgdGFyZ2V0Q29sdW1uID0gJyc7XG4gICAgICAgIHRhcmdldENvbHVtbiA9IEFycmF5LmlzQXJyYXkoY29uZmlnLnRhcmdldClcbiAgICAgICAgICAgID8gY29uZmlnLnRhcmdldC5tYXAoKGl0KSA9PiB0aGlzLmRpYWxlY3QuZXNjYXBlTmFtZShpdC5uYW1lKSkuam9pbignLCcpXG4gICAgICAgICAgICA6IHRoaXMuZGlhbGVjdC5lc2NhcGVOYW1lKGNvbmZpZy50YXJnZXQubmFtZSk7XG4gICAgICAgIHRoaXMuY29uZmlnLm9uQ29uZmxpY3QgPSBzcWwgYCgke3NxbC5yYXcodGFyZ2V0Q29sdW1uKX0pIGRvIHVwZGF0ZSBzZXQgJHtzZXRTcWx9JHt3aGVyZVNxbH1gO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGdldFNRTCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlhbGVjdC5idWlsZEluc2VydFF1ZXJ5KHRoaXMuY29uZmlnKTtcbiAgICB9XG4gICAgdG9TUUwoKSB7XG4gICAgICAgIGNvbnN0IHsgdHlwaW5nczogX3R5cGluZ3MsIC4uLnJlc3QgfSA9IHRoaXMuZGlhbGVjdC5zcWxUb1F1ZXJ5KHRoaXMuZ2V0U1FMKCkpO1xuICAgICAgICByZXR1cm4gcmVzdDtcbiAgICB9XG4gICAgX3ByZXBhcmUobmFtZSkge1xuICAgICAgICByZXR1cm4gdHJhY2VyLnN0YXJ0QWN0aXZlU3BhbignZHJpenpsZS5wcmVwYXJlUXVlcnknLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uLnByZXBhcmVRdWVyeSh0aGlzLmRpYWxlY3Quc3FsVG9RdWVyeSh0aGlzLmdldFNRTCgpKSwgdGhpcy5jb25maWcucmV0dXJuaW5nLCBuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByZXBhcmUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJlcGFyZShuYW1lKTtcbiAgICB9XG4gICAgZXhlY3V0ZSA9IChwbGFjZWhvbGRlclZhbHVlcykgPT4ge1xuICAgICAgICByZXR1cm4gdHJhY2VyLnN0YXJ0QWN0aXZlU3BhbignZHJpenpsZS5vcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJlcGFyZSgpLmV4ZWN1dGUocGxhY2Vob2xkZXJWYWx1ZXMpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5jbGFzcyBQZ1JlZnJlc2hNYXRlcmlhbGl6ZWRWaWV3IGV4dGVuZHMgUXVlcnlQcm9taXNlIHtcbiAgICBzZXNzaW9uO1xuICAgIGRpYWxlY3Q7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdQZ1JlZnJlc2hNYXRlcmlhbGl6ZWRWaWV3JztcbiAgICBjb25maWc7XG4gICAgY29uc3RydWN0b3Iodmlldywgc2Vzc2lvbiwgZGlhbGVjdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICB0aGlzLmRpYWxlY3QgPSBkaWFsZWN0O1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgdmlldyB9O1xuICAgIH1cbiAgICBjb25jdXJyZW50bHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy53aXRoTm9EYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBjb25jdXJyZW50bHkgYW5kIHdpdGhOb0RhdGEgdG9nZXRoZXInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbmZpZy5jb25jdXJyZW50bHkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgd2l0aE5vRGF0YSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNvbmN1cnJlbnRseSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2UgY29uY3VycmVudGx5IGFuZCB3aXRoTm9EYXRhIHRvZ2V0aGVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25maWcud2l0aE5vRGF0YSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0U1FMKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaWFsZWN0LmJ1aWxkUmVmcmVzaE1hdGVyaWFsaXplZFZpZXdRdWVyeSh0aGlzLmNvbmZpZyk7XG4gICAgfVxuICAgIHRvU1FMKCkge1xuICAgICAgICBjb25zdCB7IHR5cGluZ3M6IF90eXBpbmdzLCAuLi5yZXN0IH0gPSB0aGlzLmRpYWxlY3Quc3FsVG9RdWVyeSh0aGlzLmdldFNRTCgpKTtcbiAgICAgICAgcmV0dXJuIHJlc3Q7XG4gICAgfVxuICAgIF9wcmVwYXJlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRyYWNlci5zdGFydEFjdGl2ZVNwYW4oJ2RyaXp6bGUucHJlcGFyZVF1ZXJ5JywgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbi5wcmVwYXJlUXVlcnkodGhpcy5kaWFsZWN0LnNxbFRvUXVlcnkodGhpcy5nZXRTUUwoKSksIHVuZGVmaW5lZCwgbmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwcmVwYXJlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmUobmFtZSk7XG4gICAgfVxuICAgIGV4ZWN1dGUgPSAocGxhY2Vob2xkZXJWYWx1ZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIHRyYWNlci5zdGFydEFjdGl2ZVNwYW4oJ2RyaXp6bGUub3BlcmF0aW9uJywgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmUoKS5leGVjdXRlKHBsYWNlaG9sZGVyVmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuY2xhc3MgUGdVcGRhdGVCdWlsZGVyIHtcbiAgICB0YWJsZTtcbiAgICBzZXNzaW9uO1xuICAgIGRpYWxlY3Q7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdQZ1VwZGF0ZUJ1aWxkZXInO1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBzZXNzaW9uLCBkaWFsZWN0KSB7XG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgdGhpcy5kaWFsZWN0ID0gZGlhbGVjdDtcbiAgICB9XG4gICAgc2V0KHZhbHVlcykge1xuICAgICAgICByZXR1cm4gbmV3IFBnVXBkYXRlKHRoaXMudGFibGUsIG1hcFVwZGF0ZVNldCh0aGlzLnRhYmxlLCB2YWx1ZXMpLCB0aGlzLnNlc3Npb24sIHRoaXMuZGlhbGVjdCk7XG4gICAgfVxufVxuY2xhc3MgUGdVcGRhdGUgZXh0ZW5kcyBRdWVyeVByb21pc2Uge1xuICAgIHNlc3Npb247XG4gICAgZGlhbGVjdDtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ1BnVXBkYXRlJztcbiAgICBjb25maWc7XG4gICAgY29uc3RydWN0b3IodGFibGUsIHNldCwgc2Vzc2lvbiwgZGlhbGVjdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICB0aGlzLmRpYWxlY3QgPSBkaWFsZWN0O1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgc2V0LCB0YWJsZSB9O1xuICAgIH1cbiAgICB3aGVyZSh3aGVyZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy53aGVyZSA9IHdoZXJlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuaW5nKGZpZWxkcyA9IHRoaXMuY29uZmlnLnRhYmxlW1RhYmxlLlN5bWJvbC5Db2x1bW5zXSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5yZXR1cm5pbmcgPSBvcmRlclNlbGVjdGVkRmllbGRzKGZpZWxkcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0U1FMKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaWFsZWN0LmJ1aWxkVXBkYXRlUXVlcnkodGhpcy5jb25maWcpO1xuICAgIH1cbiAgICB0b1NRTCgpIHtcbiAgICAgICAgY29uc3QgeyB0eXBpbmdzOiBfdHlwaW5ncywgLi4ucmVzdCB9ID0gdGhpcy5kaWFsZWN0LnNxbFRvUXVlcnkodGhpcy5nZXRTUUwoKSk7XG4gICAgICAgIHJldHVybiByZXN0O1xuICAgIH1cbiAgICBfcHJlcGFyZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb24ucHJlcGFyZVF1ZXJ5KHRoaXMuZGlhbGVjdC5zcWxUb1F1ZXJ5KHRoaXMuZ2V0U1FMKCkpLCB0aGlzLmNvbmZpZy5yZXR1cm5pbmcsIG5hbWUpO1xuICAgIH1cbiAgICBwcmVwYXJlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmUobmFtZSk7XG4gICAgfVxuICAgIGV4ZWN1dGUgPSAocGxhY2Vob2xkZXJWYWx1ZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmUoKS5leGVjdXRlKHBsYWNlaG9sZGVyVmFsdWVzKTtcbiAgICB9O1xufVxuXG5jbGFzcyBSZWxhdGlvbmFsUXVlcnlCdWlsZGVyIHtcbiAgICBmdWxsU2NoZW1hO1xuICAgIHNjaGVtYTtcbiAgICB0YWJsZU5hbWVzTWFwO1xuICAgIHRhYmxlO1xuICAgIHRhYmxlQ29uZmlnO1xuICAgIGRpYWxlY3Q7XG4gICAgc2Vzc2lvbjtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ1BnUmVsYXRpb25hbFF1ZXJ5QnVpbGRlcic7XG4gICAgY29uc3RydWN0b3IoZnVsbFNjaGVtYSwgc2NoZW1hLCB0YWJsZU5hbWVzTWFwLCB0YWJsZSwgdGFibGVDb25maWcsIGRpYWxlY3QsIHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5mdWxsU2NoZW1hID0gZnVsbFNjaGVtYTtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMudGFibGVOYW1lc01hcCA9IHRhYmxlTmFtZXNNYXA7XG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgICAgdGhpcy50YWJsZUNvbmZpZyA9IHRhYmxlQ29uZmlnO1xuICAgICAgICB0aGlzLmRpYWxlY3QgPSBkaWFsZWN0O1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgIH1cbiAgICBmaW5kTWFueShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQZ1JlbGF0aW9uYWxRdWVyeSh0aGlzLmZ1bGxTY2hlbWEsIHRoaXMuc2NoZW1hLCB0aGlzLnRhYmxlTmFtZXNNYXAsIHRoaXMudGFibGUsIHRoaXMudGFibGVDb25maWcsIHRoaXMuZGlhbGVjdCwgdGhpcy5zZXNzaW9uLCBjb25maWcgPyBjb25maWcgOiB7fSwgJ21hbnknKTtcbiAgICB9XG4gICAgZmluZEZpcnN0KGNvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IFBnUmVsYXRpb25hbFF1ZXJ5KHRoaXMuZnVsbFNjaGVtYSwgdGhpcy5zY2hlbWEsIHRoaXMudGFibGVOYW1lc01hcCwgdGhpcy50YWJsZSwgdGhpcy50YWJsZUNvbmZpZywgdGhpcy5kaWFsZWN0LCB0aGlzLnNlc3Npb24sIGNvbmZpZyA/IHsgLi4uY29uZmlnLCBsaW1pdDogMSB9IDogeyBsaW1pdDogMSB9LCAnZmlyc3QnKTtcbiAgICB9XG59XG5jbGFzcyBQZ1JlbGF0aW9uYWxRdWVyeSBleHRlbmRzIFF1ZXJ5UHJvbWlzZSB7XG4gICAgZnVsbFNjaGVtYTtcbiAgICBzY2hlbWE7XG4gICAgdGFibGVOYW1lc01hcDtcbiAgICB0YWJsZTtcbiAgICB0YWJsZUNvbmZpZztcbiAgICBkaWFsZWN0O1xuICAgIHNlc3Npb247XG4gICAgY29uZmlnO1xuICAgIG1vZGU7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdQZ1JlbGF0aW9uYWxRdWVyeSc7XG4gICAgY29uc3RydWN0b3IoZnVsbFNjaGVtYSwgc2NoZW1hLCB0YWJsZU5hbWVzTWFwLCB0YWJsZSwgdGFibGVDb25maWcsIGRpYWxlY3QsIHNlc3Npb24sIGNvbmZpZywgbW9kZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZ1bGxTY2hlbWEgPSBmdWxsU2NoZW1hO1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy50YWJsZU5hbWVzTWFwID0gdGFibGVOYW1lc01hcDtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgICAgICB0aGlzLnRhYmxlQ29uZmlnID0gdGFibGVDb25maWc7XG4gICAgICAgIHRoaXMuZGlhbGVjdCA9IGRpYWxlY3Q7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIH1cbiAgICBfcHJlcGFyZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0cmFjZXIuc3RhcnRBY3RpdmVTcGFuKCdkcml6emxlLnByZXBhcmVRdWVyeScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcXVlcnksIGJ1aWx0UXVlcnkgfSA9IHRoaXMuX3RvU1FMKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uLnByZXBhcmVRdWVyeShidWlsdFF1ZXJ5LCB1bmRlZmluZWQsIG5hbWUsIChyYXdSb3dzLCBtYXBDb2x1bW5WYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvd3MgPSByYXdSb3dzLm1hcCgocm93KSA9PiBtYXBSZWxhdGlvbmFsUm93KHRoaXMuc2NoZW1hLCB0aGlzLnRhYmxlQ29uZmlnLCByb3csIHF1ZXJ5LnNlbGVjdGlvbiwgbWFwQ29sdW1uVmFsdWUpKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3dzWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcm93cztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHJlcGFyZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVwYXJlKG5hbWUpO1xuICAgIH1cbiAgICBfdG9TUUwoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5kaWFsZWN0LmJ1aWxkUmVsYXRpb25hbFF1ZXJ5V2l0aG91dFBLKHtcbiAgICAgICAgICAgIGZ1bGxTY2hlbWE6IHRoaXMuZnVsbFNjaGVtYSxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXG4gICAgICAgICAgICB0YWJsZU5hbWVzTWFwOiB0aGlzLnRhYmxlTmFtZXNNYXAsXG4gICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcbiAgICAgICAgICAgIHRhYmxlQ29uZmlnOiB0aGlzLnRhYmxlQ29uZmlnLFxuICAgICAgICAgICAgcXVlcnlDb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgICAgICAgdGFibGVBbGlhczogdGhpcy50YWJsZUNvbmZpZy50c05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBidWlsdFF1ZXJ5ID0gdGhpcy5kaWFsZWN0LnNxbFRvUXVlcnkocXVlcnkuc3FsKTtcbiAgICAgICAgcmV0dXJuIHsgcXVlcnksIGJ1aWx0UXVlcnkgfTtcbiAgICB9XG4gICAgdG9TUUwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b1NRTCgpLmJ1aWx0UXVlcnk7XG4gICAgfVxuICAgIGV4ZWN1dGUoKSB7XG4gICAgICAgIHJldHVybiB0cmFjZXIuc3RhcnRBY3RpdmVTcGFuKCdkcml6emxlLm9wZXJhdGlvbicsICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmVwYXJlKCkuZXhlY3V0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFBnRGF0YWJhc2Uge1xuICAgIGRpYWxlY3Q7XG4gICAgc2Vzc2lvbjtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ1BnRGF0YWJhc2UnO1xuICAgIHF1ZXJ5O1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBkaWFsZWN0LCBcbiAgICAvKiogQGludGVybmFsICovXG4gICAgc2Vzc2lvbiwgc2NoZW1hKSB7XG4gICAgICAgIHRoaXMuZGlhbGVjdCA9IGRpYWxlY3Q7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgICAgIHRoaXMuXyA9IHNjaGVtYVxuICAgICAgICAgICAgPyB7IHNjaGVtYTogc2NoZW1hLnNjaGVtYSwgdGFibGVOYW1lc01hcDogc2NoZW1hLnRhYmxlTmFtZXNNYXAgfVxuICAgICAgICAgICAgOiB7IHNjaGVtYTogdW5kZWZpbmVkLCB0YWJsZU5hbWVzTWFwOiB7fSB9O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICAgIGlmICh0aGlzLl8uc2NoZW1hKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFt0YWJsZU5hbWUsIGNvbHVtbnNdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuXy5zY2hlbWEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVt0YWJsZU5hbWVdID0gbmV3IFJlbGF0aW9uYWxRdWVyeUJ1aWxkZXIoc2NoZW1hLmZ1bGxTY2hlbWEsIHRoaXMuXy5zY2hlbWEsIHRoaXMuXy50YWJsZU5hbWVzTWFwLCBzY2hlbWEuZnVsbFNjaGVtYVt0YWJsZU5hbWVdLCBjb2x1bW5zLCBkaWFsZWN0LCBzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAkd2l0aChhbGlhcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXMocWIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHFiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHFiID0gcWIobmV3IFF1ZXJ5QnVpbGRlcigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShuZXcgV2l0aFN1YnF1ZXJ5KHFiLmdldFNRTCgpLCBxYi5nZXRTZWxlY3RlZEZpZWxkcygpLCBhbGlhcywgdHJ1ZSksIG5ldyBTZWxlY3Rpb25Qcm94eUhhbmRsZXIoeyBhbGlhcywgc3FsQWxpYXNlZEJlaGF2aW9yOiAnYWxpYXMnLCBzcWxCZWhhdmlvcjogJ2Vycm9yJyB9KSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB3aXRoKC4uLnF1ZXJpZXMpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdChmaWVsZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGdTZWxlY3RCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGZpZWxkcyA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogc2VsZi5zZXNzaW9uLFxuICAgICAgICAgICAgICAgIGRpYWxlY3Q6IHNlbGYuZGlhbGVjdCxcbiAgICAgICAgICAgICAgICB3aXRoTGlzdDogcXVlcmllcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNlbGVjdCB9O1xuICAgIH1cbiAgICBzZWxlY3QoZmllbGRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGdTZWxlY3RCdWlsZGVyKHtcbiAgICAgICAgICAgIGZpZWxkczogZmllbGRzID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNlc3Npb246IHRoaXMuc2Vzc2lvbixcbiAgICAgICAgICAgIGRpYWxlY3Q6IHRoaXMuZGlhbGVjdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNlbGVjdERpc3RpbmN0KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gbmV3IFBnU2VsZWN0QnVpbGRlcih7XG4gICAgICAgICAgICBmaWVsZHM6IGZpZWxkcyA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICBzZXNzaW9uOiB0aGlzLnNlc3Npb24sXG4gICAgICAgICAgICBkaWFsZWN0OiB0aGlzLmRpYWxlY3QsXG4gICAgICAgICAgICBkaXN0aW5jdDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNlbGVjdERpc3RpbmN0T24ob24sIGZpZWxkcykge1xuICAgICAgICByZXR1cm4gbmV3IFBnU2VsZWN0QnVpbGRlcih7XG4gICAgICAgICAgICBmaWVsZHM6IGZpZWxkcyA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICBzZXNzaW9uOiB0aGlzLnNlc3Npb24sXG4gICAgICAgICAgICBkaWFsZWN0OiB0aGlzLmRpYWxlY3QsXG4gICAgICAgICAgICBkaXN0aW5jdDogeyBvbiB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXBkYXRlKHRhYmxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGdVcGRhdGVCdWlsZGVyKHRhYmxlLCB0aGlzLnNlc3Npb24sIHRoaXMuZGlhbGVjdCk7XG4gICAgfVxuICAgIGluc2VydCh0YWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFBnSW5zZXJ0QnVpbGRlcih0YWJsZSwgdGhpcy5zZXNzaW9uLCB0aGlzLmRpYWxlY3QpO1xuICAgIH1cbiAgICBkZWxldGUodGFibGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQZ0RlbGV0ZSh0YWJsZSwgdGhpcy5zZXNzaW9uLCB0aGlzLmRpYWxlY3QpO1xuICAgIH1cbiAgICByZWZyZXNoTWF0ZXJpYWxpemVkVmlldyh2aWV3KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGdSZWZyZXNoTWF0ZXJpYWxpemVkVmlldyh2aWV3LCB0aGlzLnNlc3Npb24sIHRoaXMuZGlhbGVjdCk7XG4gICAgfVxuICAgIGV4ZWN1dGUocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbi5leGVjdXRlKHF1ZXJ5LmdldFNRTCgpKTtcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uLnRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLCBjb25maWcpO1xuICAgIH1cbn1cblxuY2xhc3MgUHJlcGFyZWRRdWVyeSB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdQZ1ByZXBhcmVkUXVlcnknO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBqb2luc05vdE51bGxhYmxlTWFwO1xufVxuY2xhc3MgUGdTZXNzaW9uIHtcbiAgICBkaWFsZWN0O1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnUGdTZXNzaW9uJztcbiAgICBjb25zdHJ1Y3RvcihkaWFsZWN0KSB7XG4gICAgICAgIHRoaXMuZGlhbGVjdCA9IGRpYWxlY3Q7XG4gICAgfVxuICAgIGV4ZWN1dGUocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHRyYWNlci5zdGFydEFjdGl2ZVNwYW4oJ2RyaXp6bGUub3BlcmF0aW9uJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJlcGFyZWQgPSB0cmFjZXIuc3RhcnRBY3RpdmVTcGFuKCdkcml6emxlLnByZXBhcmVRdWVyeScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcmVwYXJlUXVlcnkodGhpcy5kaWFsZWN0LnNxbFRvUXVlcnkocXVlcnkpLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwcmVwYXJlZC5leGVjdXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhbGwocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlcGFyZVF1ZXJ5KHRoaXMuZGlhbGVjdC5zcWxUb1F1ZXJ5KHF1ZXJ5KSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpLmFsbCgpO1xuICAgIH1cbn1cbmNsYXNzIFBnVHJhbnNhY3Rpb24gZXh0ZW5kcyBQZ0RhdGFiYXNlIHtcbiAgICBzY2hlbWE7XG4gICAgbmVzdGVkSW5kZXg7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdQZ1RyYW5zYWN0aW9uJztcbiAgICBjb25zdHJ1Y3RvcihkaWFsZWN0LCBzZXNzaW9uLCBzY2hlbWEsIG5lc3RlZEluZGV4ID0gMCkge1xuICAgICAgICBzdXBlcihkaWFsZWN0LCBzZXNzaW9uLCBzY2hlbWEpO1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5uZXN0ZWRJbmRleCA9IG5lc3RlZEluZGV4O1xuICAgIH1cbiAgICByb2xsYmFjaygpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zYWN0aW9uUm9sbGJhY2tFcnJvcigpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0VHJhbnNhY3Rpb25Db25maWdTUUwoY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgICBpZiAoY29uZmlnLmlzb2xhdGlvbkxldmVsKSB7XG4gICAgICAgICAgICBjaHVua3MucHVzaChgaXNvbGF0aW9uIGxldmVsICR7Y29uZmlnLmlzb2xhdGlvbkxldmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuYWNjZXNzTW9kZSkge1xuICAgICAgICAgICAgY2h1bmtzLnB1c2goY29uZmlnLmFjY2Vzc01vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmRlZmVycmFibGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY2h1bmtzLnB1c2goY29uZmlnLmRlZmVycmFibGUgPyAnZGVmZXJyYWJsZScgOiAnbm90IGRlZmVycmFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3FsLnJhdyhjaHVua3Muam9pbignICcpKTtcbiAgICB9XG4gICAgc2V0VHJhbnNhY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb24uZXhlY3V0ZShzcWwgYHNldCB0cmFuc2FjdGlvbiAke3RoaXMuZ2V0VHJhbnNhY3Rpb25Db25maWdTUUwoY29uZmlnKX1gKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFByZXBhcmVkUXVlcnkgYXMgUCwgUGdTZXNzaW9uIGFzIGEsIFBnVHJhbnNhY3Rpb24gYXMgYiwgUGdEYXRhYmFzZSBhcyBjLCBQZ0RlbGV0ZSBhcyBkLCBQZ0luc2VydEJ1aWxkZXIgYXMgZSwgUGdJbnNlcnQgYXMgZiwgUGdSZWZyZXNoTWF0ZXJpYWxpemVkVmlldyBhcyBnLCBQZ1VwZGF0ZUJ1aWxkZXIgYXMgaCwgUGdVcGRhdGUgYXMgaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Vzc2lvbi02ZWE3OTdhNi5tanMubWFwXG4iXSwibmFtZXMiOlsiUSIsIlF1ZXJ5UHJvbWlzZSIsImUiLCJlbnRpdHlLaW5kIiwibyIsIm9yZGVyU2VsZWN0ZWRGaWVsZHMiLCJUIiwiVGFibGUiLCJ0IiwidHJhY2VyIiwiaSIsImlzIiwiUyIsIlNRTCIsImIiLCJQYXJhbSIsInMiLCJzcWwiLCJkIiwibWFwVXBkYXRlU2V0IiwiZyIsIm1hcFJlbGF0aW9uYWxSb3ciLCJoIiwiUXVlcnlCdWlsZGVyIiwiVyIsIldpdGhTdWJxdWVyeSIsImoiLCJTZWxlY3Rpb25Qcm94eUhhbmRsZXIiLCJrIiwiUGdTZWxlY3RCdWlsZGVyIiwibCIsIlRyYW5zYWN0aW9uUm9sbGJhY2tFcnJvciIsIlBnRGVsZXRlIiwiY29uc3RydWN0b3IiLCJ0YWJsZSIsInNlc3Npb24iLCJkaWFsZWN0IiwiZXhlY3V0ZSIsInBsYWNlaG9sZGVyVmFsdWVzIiwic3RhcnRBY3RpdmVTcGFuIiwiX3ByZXBhcmUiLCJjb25maWciLCJ3aGVyZSIsInJldHVybmluZyIsImZpZWxkcyIsIlN5bWJvbCIsIkNvbHVtbnMiLCJnZXRTUUwiLCJidWlsZERlbGV0ZVF1ZXJ5IiwidG9TUUwiLCJ0eXBpbmdzIiwiX3R5cGluZ3MiLCJyZXN0Iiwic3FsVG9RdWVyeSIsIm5hbWUiLCJwcmVwYXJlUXVlcnkiLCJwcmVwYXJlIiwiUGdJbnNlcnRCdWlsZGVyIiwidmFsdWVzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiRXJyb3IiLCJtYXBwZWRWYWx1ZXMiLCJtYXAiLCJlbnRyeSIsInJlc3VsdCIsImNvbHMiLCJjb2xLZXkiLCJPYmplY3QiLCJrZXlzIiwiY29sVmFsdWUiLCJQZ0luc2VydCIsIm9uQ29uZmxpY3REb05vdGhpbmciLCJ0YXJnZXQiLCJ1bmRlZmluZWQiLCJvbkNvbmZsaWN0IiwidGFyZ2V0Q29sdW1uIiwiaXQiLCJlc2NhcGVOYW1lIiwiam9pbiIsIndoZXJlU3FsIiwicmF3Iiwib25Db25mbGljdERvVXBkYXRlIiwic2V0U3FsIiwiYnVpbGRVcGRhdGVTZXQiLCJzZXQiLCJidWlsZEluc2VydFF1ZXJ5IiwiUGdSZWZyZXNoTWF0ZXJpYWxpemVkVmlldyIsInZpZXciLCJjb25jdXJyZW50bHkiLCJ3aXRoTm9EYXRhIiwiYnVpbGRSZWZyZXNoTWF0ZXJpYWxpemVkVmlld1F1ZXJ5IiwiUGdVcGRhdGVCdWlsZGVyIiwiUGdVcGRhdGUiLCJidWlsZFVwZGF0ZVF1ZXJ5IiwiUmVsYXRpb25hbFF1ZXJ5QnVpbGRlciIsImZ1bGxTY2hlbWEiLCJzY2hlbWEiLCJ0YWJsZU5hbWVzTWFwIiwidGFibGVDb25maWciLCJmaW5kTWFueSIsIlBnUmVsYXRpb25hbFF1ZXJ5IiwiZmluZEZpcnN0IiwibGltaXQiLCJtb2RlIiwicXVlcnkiLCJidWlsdFF1ZXJ5IiwiX3RvU1FMIiwicmF3Um93cyIsIm1hcENvbHVtblZhbHVlIiwicm93cyIsInJvdyIsInNlbGVjdGlvbiIsImJ1aWxkUmVsYXRpb25hbFF1ZXJ5V2l0aG91dFBLIiwicXVlcnlDb25maWciLCJ0YWJsZUFsaWFzIiwidHNOYW1lIiwiUGdEYXRhYmFzZSIsIl8iLCJ0YWJsZU5hbWUiLCJjb2x1bW5zIiwiZW50cmllcyIsIiR3aXRoIiwiYWxpYXMiLCJhcyIsInFiIiwiUHJveHkiLCJnZXRTZWxlY3RlZEZpZWxkcyIsInNxbEFsaWFzZWRCZWhhdmlvciIsInNxbEJlaGF2aW9yIiwid2l0aCIsInF1ZXJpZXMiLCJzZWxmIiwic2VsZWN0Iiwid2l0aExpc3QiLCJzZWxlY3REaXN0aW5jdCIsImRpc3RpbmN0Iiwic2VsZWN0RGlzdGluY3RPbiIsIm9uIiwidXBkYXRlIiwiaW5zZXJ0IiwiZGVsZXRlIiwicmVmcmVzaE1hdGVyaWFsaXplZFZpZXciLCJ0cmFuc2FjdGlvbiIsIlByZXBhcmVkUXVlcnkiLCJQZ1Nlc3Npb24iLCJwcmVwYXJlZCIsImFsbCIsIlBnVHJhbnNhY3Rpb24iLCJuZXN0ZWRJbmRleCIsInJvbGxiYWNrIiwiZ2V0VHJhbnNhY3Rpb25Db25maWdTUUwiLCJjaHVua3MiLCJpc29sYXRpb25MZXZlbCIsInB1c2giLCJhY2Nlc3NNb2RlIiwiZGVmZXJyYWJsZSIsInNldFRyYW5zYWN0aW9uIiwiUCIsImEiLCJjIiwiZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/drizzle-orm/session-6ea797a6.mjs\n");

/***/ })

};
;