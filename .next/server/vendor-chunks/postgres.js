"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres";
exports.ids = ["vendor-chunks/postgres"];
exports.modules = {

/***/ "(action-browser)/./node_modules/postgres/src/bytes.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/bytes.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst size = 256;\nlet buffer = Buffer.allocUnsafe(size);\nconst messages = \"BCcDdEFfHPpQSX\".split(\"\").reduce((acc, x)=>{\n    const v = x.charCodeAt(0);\n    acc[x] = ()=>{\n        buffer[0] = v;\n        b.i = 5;\n        return b;\n    };\n    return acc;\n}, {});\nconst b = Object.assign(reset, messages, {\n    N: String.fromCharCode(0),\n    i: 0,\n    inc (x) {\n        b.i += x;\n        return b;\n    },\n    str (x) {\n        const length = Buffer.byteLength(x);\n        fit(length);\n        b.i += buffer.write(x, b.i, length, \"utf8\");\n        return b;\n    },\n    i16 (x) {\n        fit(2);\n        buffer.writeUInt16BE(x, b.i);\n        b.i += 2;\n        return b;\n    },\n    i32 (x, i) {\n        if (i || i === 0) {\n            buffer.writeUInt32BE(x, i);\n            return b;\n        }\n        fit(4);\n        buffer.writeUInt32BE(x, b.i);\n        b.i += 4;\n        return b;\n    },\n    z (x) {\n        fit(x);\n        buffer.fill(0, b.i, b.i + x);\n        b.i += x;\n        return b;\n    },\n    raw (x) {\n        buffer = Buffer.concat([\n            buffer.subarray(0, b.i),\n            x\n        ]);\n        b.i = buffer.length;\n        return b;\n    },\n    end (at = 1) {\n        buffer.writeUInt32BE(b.i - at, at);\n        const out = buffer.subarray(0, b.i);\n        b.i = 0;\n        buffer = Buffer.allocUnsafe(size);\n        return out;\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (b);\nfunction fit(x) {\n    if (buffer.length - b.i < x) {\n        const prev = buffer, length = prev.length;\n        buffer = Buffer.allocUnsafe(length + (length >> 1) + x);\n        prev.copy(buffer);\n    }\n}\nfunction reset() {\n    b.i = 0;\n    return b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU87QUFDYixJQUFJQyxTQUFTQyxPQUFPQyxXQUFXLENBQUNIO0FBRWhDLE1BQU1JLFdBQVcsaUJBQWlCQyxLQUFLLENBQUMsSUFBSUMsTUFBTSxDQUFDLENBQUNDLEtBQUtDO0lBQ3ZELE1BQU1DLElBQUlELEVBQUVFLFVBQVUsQ0FBQztJQUN2QkgsR0FBRyxDQUFDQyxFQUFFLEdBQUc7UUFDUFAsTUFBTSxDQUFDLEVBQUUsR0FBR1E7UUFDWkUsRUFBRUMsQ0FBQyxHQUFHO1FBQ04sT0FBT0Q7SUFDVDtJQUNBLE9BQU9KO0FBQ1QsR0FBRyxDQUFDO0FBRUosTUFBTUksSUFBSUUsT0FBT0MsTUFBTSxDQUFDQyxPQUFPWCxVQUFVO0lBQ3ZDWSxHQUFHQyxPQUFPQyxZQUFZLENBQUM7SUFDdkJOLEdBQUc7SUFDSE8sS0FBSVgsQ0FBQztRQUNIRyxFQUFFQyxDQUFDLElBQUlKO1FBQ1AsT0FBT0c7SUFDVDtJQUNBUyxLQUFJWixDQUFDO1FBQ0gsTUFBTWEsU0FBU25CLE9BQU9vQixVQUFVLENBQUNkO1FBQ2pDZSxJQUFJRjtRQUNKVixFQUFFQyxDQUFDLElBQUlYLE9BQU91QixLQUFLLENBQUNoQixHQUFHRyxFQUFFQyxDQUFDLEVBQUVTLFFBQVE7UUFDcEMsT0FBT1Y7SUFDVDtJQUNBYyxLQUFJakIsQ0FBQztRQUNIZSxJQUFJO1FBQ0p0QixPQUFPeUIsYUFBYSxDQUFDbEIsR0FBR0csRUFBRUMsQ0FBQztRQUMzQkQsRUFBRUMsQ0FBQyxJQUFJO1FBQ1AsT0FBT0Q7SUFDVDtJQUNBZ0IsS0FBSW5CLENBQUMsRUFBRUksQ0FBQztRQUNOLElBQUlBLEtBQUtBLE1BQU0sR0FBRztZQUNoQlgsT0FBTzJCLGFBQWEsQ0FBQ3BCLEdBQUdJO1lBQ3hCLE9BQU9EO1FBQ1Q7UUFDQVksSUFBSTtRQUNKdEIsT0FBTzJCLGFBQWEsQ0FBQ3BCLEdBQUdHLEVBQUVDLENBQUM7UUFDM0JELEVBQUVDLENBQUMsSUFBSTtRQUNQLE9BQU9EO0lBQ1Q7SUFDQWtCLEdBQUVyQixDQUFDO1FBQ0RlLElBQUlmO1FBQ0pQLE9BQU82QixJQUFJLENBQUMsR0FBR25CLEVBQUVDLENBQUMsRUFBRUQsRUFBRUMsQ0FBQyxHQUFHSjtRQUMxQkcsRUFBRUMsQ0FBQyxJQUFJSjtRQUNQLE9BQU9HO0lBQ1Q7SUFDQW9CLEtBQUl2QixDQUFDO1FBQ0hQLFNBQVNDLE9BQU84QixNQUFNLENBQUM7WUFBQy9CLE9BQU9nQyxRQUFRLENBQUMsR0FBR3RCLEVBQUVDLENBQUM7WUFBR0o7U0FBRTtRQUNuREcsRUFBRUMsQ0FBQyxHQUFHWCxPQUFPb0IsTUFBTTtRQUNuQixPQUFPVjtJQUNUO0lBQ0F1QixLQUFJQyxLQUFLLENBQUM7UUFDUmxDLE9BQU8yQixhQUFhLENBQUNqQixFQUFFQyxDQUFDLEdBQUd1QixJQUFJQTtRQUMvQixNQUFNQyxNQUFNbkMsT0FBT2dDLFFBQVEsQ0FBQyxHQUFHdEIsRUFBRUMsQ0FBQztRQUNsQ0QsRUFBRUMsQ0FBQyxHQUFHO1FBQ05YLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0g7UUFDNUIsT0FBT29DO0lBQ1Q7QUFDRjtBQUVBLGlFQUFlekIsQ0FBQ0EsRUFBQTtBQUVoQixTQUFTWSxJQUFJZixDQUFDO0lBQ1osSUFBSVAsT0FBT29CLE1BQU0sR0FBR1YsRUFBRUMsQ0FBQyxHQUFHSixHQUFHO1FBQzNCLE1BQU02QixPQUFPcEMsUUFDUG9CLFNBQVNnQixLQUFLaEIsTUFBTTtRQUUxQnBCLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ2tCLFNBQVVBLENBQUFBLFVBQVUsS0FBS2I7UUFDckQ2QixLQUFLQyxJQUFJLENBQUNyQztJQUNaO0FBQ0Y7QUFFQSxTQUFTYztJQUNQSixFQUFFQyxDQUFDLEdBQUc7SUFDTixPQUFPRDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicHJvZGlnaWVzLWN5cHJlc3MvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2J5dGVzLmpzP2ZiZDEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2l6ZSA9IDI1NlxubGV0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKVxuXG5jb25zdCBtZXNzYWdlcyA9ICdCQ2NEZEVGZkhQcFFTWCcuc3BsaXQoJycpLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gIGNvbnN0IHYgPSB4LmNoYXJDb2RlQXQoMClcbiAgYWNjW3hdID0gKCkgPT4ge1xuICAgIGJ1ZmZlclswXSA9IHZcbiAgICBiLmkgPSA1XG4gICAgcmV0dXJuIGJcbiAgfVxuICByZXR1cm4gYWNjXG59LCB7fSlcblxuY29uc3QgYiA9IE9iamVjdC5hc3NpZ24ocmVzZXQsIG1lc3NhZ2VzLCB7XG4gIE46IFN0cmluZy5mcm9tQ2hhckNvZGUoMCksXG4gIGk6IDAsXG4gIGluYyh4KSB7XG4gICAgYi5pICs9IHhcbiAgICByZXR1cm4gYlxuICB9LFxuICBzdHIoeCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHgpXG4gICAgZml0KGxlbmd0aClcbiAgICBiLmkgKz0gYnVmZmVyLndyaXRlKHgsIGIuaSwgbGVuZ3RoLCAndXRmOCcpXG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgaTE2KHgpIHtcbiAgICBmaXQoMilcbiAgICBidWZmZXIud3JpdGVVSW50MTZCRSh4LCBiLmkpXG4gICAgYi5pICs9IDJcbiAgICByZXR1cm4gYlxuICB9LFxuICBpMzIoeCwgaSkge1xuICAgIGlmIChpIHx8IGkgPT09IDApIHtcbiAgICAgIGJ1ZmZlci53cml0ZVVJbnQzMkJFKHgsIGkpXG4gICAgICByZXR1cm4gYlxuICAgIH1cbiAgICBmaXQoNClcbiAgICBidWZmZXIud3JpdGVVSW50MzJCRSh4LCBiLmkpXG4gICAgYi5pICs9IDRcbiAgICByZXR1cm4gYlxuICB9LFxuICB6KHgpIHtcbiAgICBmaXQoeClcbiAgICBidWZmZXIuZmlsbCgwLCBiLmksIGIuaSArIHgpXG4gICAgYi5pICs9IHhcbiAgICByZXR1cm4gYlxuICB9LFxuICByYXcoeCkge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlci5zdWJhcnJheSgwLCBiLmkpLCB4XSlcbiAgICBiLmkgPSBidWZmZXIubGVuZ3RoXG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgZW5kKGF0ID0gMSkge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkJFKGIuaSAtIGF0LCBhdClcbiAgICBjb25zdCBvdXQgPSBidWZmZXIuc3ViYXJyYXkoMCwgYi5pKVxuICAgIGIuaSA9IDBcbiAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcbiAgICByZXR1cm4gb3V0XG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGJcblxuZnVuY3Rpb24gZml0KHgpIHtcbiAgaWYgKGJ1ZmZlci5sZW5ndGggLSBiLmkgPCB4KSB7XG4gICAgY29uc3QgcHJldiA9IGJ1ZmZlclxuICAgICAgICAsIGxlbmd0aCA9IHByZXYubGVuZ3RoXG5cbiAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoICsgKGxlbmd0aCA+PiAxKSArIHgpXG4gICAgcHJldi5jb3B5KGJ1ZmZlcilcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgYi5pID0gMFxuICByZXR1cm4gYlxufVxuIl0sIm5hbWVzIjpbInNpemUiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm1lc3NhZ2VzIiwic3BsaXQiLCJyZWR1Y2UiLCJhY2MiLCJ4IiwidiIsImNoYXJDb2RlQXQiLCJiIiwiaSIsIk9iamVjdCIsImFzc2lnbiIsInJlc2V0IiwiTiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImluYyIsInN0ciIsImxlbmd0aCIsImJ5dGVMZW5ndGgiLCJmaXQiLCJ3cml0ZSIsImkxNiIsIndyaXRlVUludDE2QkUiLCJpMzIiLCJ3cml0ZVVJbnQzMkJFIiwieiIsImZpbGwiLCJyYXciLCJjb25jYXQiLCJzdWJhcnJheSIsImVuZCIsImF0Iiwib3V0IiwicHJldiIsImNvcHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/bytes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/connection.js":
/*!*************************************************!*\
  !*** ./node_modules/postgres/src/connection.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! net */ \"net\");\n/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tls */ \"tls\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var perf_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/postgres/src/types.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(action-browser)/./node_modules/postgres/src/errors.js\");\n/* harmony import */ var _result_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./result.js */ \"(action-browser)/./node_modules/postgres/src/result.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./queue.js */ \"(action-browser)/./node_modules/postgres/src/queue.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./query.js */ \"(action-browser)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytes.js */ \"(action-browser)/./node_modules/postgres/src/bytes.js\");\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Connection);\nlet uid = 1;\nconst Sync = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().S().end(), Flush = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().H().end(), SSLRequest = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().i32(8).i32(80877103).end(8), ExecuteUnnamed = Buffer.concat([\n    (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().E().str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i32(0).end(),\n    Sync\n]), DescribeUnnamed = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().D().str(\"S\").str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end(), noop = ()=>{};\nconst retryRoutines = new Set([\n    \"FetchPreparedStatement\",\n    \"RevalidateCachedQuery\",\n    \"transformAssignedExpr\"\n]);\nconst errorFields = {\n    83: \"severity_local\",\n    86: \"severity\",\n    67: \"code\",\n    77: \"message\",\n    68: \"detail\",\n    72: \"hint\",\n    80: \"position\",\n    112: \"internal_position\",\n    113: \"internal_query\",\n    87: \"where\",\n    115: \"schema_name\",\n    116: \"table_name\",\n    99: \"column_name\",\n    100: \"data type_name\",\n    110: \"constraint_name\",\n    70: \"file\",\n    76: \"line\",\n    82: \"routine\" // R\n};\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n    const { ssl, max, user, host, port, database, parsers, transform, onnotice, onnotify, onparameter, max_pipeline, keep_alive, backoff, target_session_attrs } = options;\n    const sent = (0,_queue_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(), id = uid++, backend = {\n        pid: null,\n        secret: null\n    }, idleTimer = timer(end, options.idle_timeout), lifeTimer = timer(end, options.max_lifetime), connectTimer = timer(connectTimedOut, options.connect_timeout);\n    let socket = null, cancelMessage, result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), incoming = Buffer.alloc(0), needsTypes = options.fetch_types, backendParameters = {}, statements = {}, statementId = Math.random().toString(36).slice(2), statementCount = 1, closedDate = 0, remaining = 0, hostIndex = 0, retries = 0, length = 0, delay = 0, rows = 0, serverSignature = null, nextWriteTimer = null, terminated = false, incomings = null, results = null, initial = null, ending = null, stream = null, chunk = null, ended = null, nonce = null, query = null, final = null;\n    const connection = {\n        queue: queues.closed,\n        idleTimer,\n        connect (query) {\n            initial = query;\n            reconnect();\n        },\n        terminate,\n        execute,\n        cancel,\n        end,\n        count: 0,\n        id\n    };\n    queues.closed && queues.closed.push(connection);\n    return connection;\n    async function createSocket() {\n        let x;\n        try {\n            x = options.socket ? await Promise.resolve(options.socket(options)) : new net__WEBPACK_IMPORTED_MODULE_0__.Socket();\n        } catch (e) {\n            error(e);\n            return;\n        }\n        x.on(\"error\", error);\n        x.on(\"close\", closed);\n        x.on(\"drain\", drain);\n        return x;\n    }\n    async function cancel({ pid, secret }, resolve, reject) {\n        try {\n            cancelMessage = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().i32(16).i32(80877102).i32(pid).i32(secret).end(16);\n            await connect();\n            socket.once(\"error\", reject);\n            socket.once(\"close\", resolve);\n        } catch (error) {\n            reject(error);\n        }\n    }\n    function execute(q) {\n        if (terminated) return queryError(q, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        if (q.cancelled) return;\n        try {\n            q.state = backend;\n            query ? sent.push(q) : (query = q, query.active = true);\n            build(q);\n            return write(toBuffer(q)) && !q.describeFirst && !q.cursorFn && sent.length < max_pipeline && (!q.options.onexecute || q.options.onexecute(connection));\n        } catch (error) {\n            sent.length === 0 && write(Sync);\n            errored(error);\n            return true;\n        }\n    }\n    function toBuffer(q) {\n        if (q.parameters.length >= 65534) throw _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"MAX_PARAMETERS_EXCEEDED\", \"Max number of parameters (65534) exceeded\");\n        return q.options.simple ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().Q().str(q.statement.string + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end() : q.describeFirst ? Buffer.concat([\n            describe(q),\n            Flush\n        ]) : q.prepare ? q.prepared ? prepared(q) : Buffer.concat([\n            describe(q),\n            prepared(q)\n        ]) : unnamed(q);\n    }\n    function describe(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n            Describe(\"S\", q.statement.name)\n        ]);\n    }\n    function prepared(q) {\n        return Buffer.concat([\n            Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n            q.cursorFn ? Execute(\"\", q.cursorRows) : ExecuteUnnamed\n        ]);\n    }\n    function unnamed(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types),\n            DescribeUnnamed,\n            prepared(q)\n        ]);\n    }\n    function build(q) {\n        const parameters = [], types = [];\n        const string = (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(q, q.strings[0], q.args[0], parameters, types, options);\n        !q.tagged && q.args.forEach((x)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.handleValue)(x, parameters, types, options));\n        q.prepare = options.prepare && (\"prepare\" in q.options ? q.options.prepare : true);\n        q.string = string;\n        q.signature = q.prepare && types + string;\n        q.onlyDescribe && delete statements[q.signature];\n        q.parameters = q.parameters || parameters;\n        q.prepared = q.prepare && q.signature in statements;\n        q.describeFirst = q.onlyDescribe || parameters.length && !q.prepared;\n        q.statement = q.prepared ? statements[q.signature] : {\n            string,\n            types,\n            name: q.prepare ? statementId + statementCount++ : \"\"\n        };\n        typeof options.debug === \"function\" && options.debug(id, string, parameters, types);\n    }\n    function write(x, fn) {\n        chunk = chunk ? Buffer.concat([\n            chunk,\n            x\n        ]) : Buffer.from(x);\n        if (fn || chunk.length >= 1024) return nextWrite(fn);\n        nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite));\n        return true;\n    }\n    function nextWrite(fn) {\n        const x = socket.write(chunk, fn);\n        nextWriteTimer !== null && clearImmediate(nextWriteTimer);\n        chunk = nextWriteTimer = null;\n        return x;\n    }\n    function connectTimedOut() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECT_TIMEOUT\", options, socket));\n        socket.destroy();\n    }\n    async function secure() {\n        write(SSLRequest);\n        const canSSL = await new Promise((r)=>socket.once(\"data\", (x)=>r(x[0] === 83))) // S\n        ;\n        if (!canSSL && ssl === \"prefer\") return connected();\n        socket.removeAllListeners();\n        socket = tls__WEBPACK_IMPORTED_MODULE_1__.connect({\n            socket,\n            servername: net__WEBPACK_IMPORTED_MODULE_0__.isIP(socket.host) ? undefined : socket.host,\n            ...ssl === \"require\" || ssl === \"allow\" || ssl === \"prefer\" ? {\n                rejectUnauthorized: false\n            } : ssl === \"verify-full\" ? {} : typeof ssl === \"object\" ? ssl : {}\n        });\n        socket.on(\"secureConnect\", connected);\n        socket.on(\"error\", error);\n        socket.on(\"close\", closed);\n        socket.on(\"drain\", drain);\n    }\n    /* c8 ignore next 3 */ function drain() {\n        !query && onopen(connection);\n    }\n    function data(x) {\n        if (incomings) {\n            incomings.push(x);\n            remaining -= x.length;\n            if (remaining >= 0) return;\n        }\n        incoming = incomings ? Buffer.concat(incomings, length - remaining) : incoming.length === 0 ? x : Buffer.concat([\n            incoming,\n            x\n        ], incoming.length + x.length);\n        while(incoming.length > 4){\n            length = incoming.readUInt32BE(1);\n            if (length >= incoming.length) {\n                remaining = length - incoming.length;\n                incomings = [\n                    incoming\n                ];\n                break;\n            }\n            try {\n                handle(incoming.subarray(0, length + 1));\n            } catch (e) {\n                query && (query.cursorFn || query.describeFirst) && write(Sync);\n                errored(e);\n            }\n            incoming = incoming.subarray(length + 1);\n            remaining = 0;\n            incomings = null;\n        }\n    }\n    async function connect() {\n        terminated = false;\n        backendParameters = {};\n        socket || (socket = await createSocket());\n        if (!socket) return;\n        connectTimer.start();\n        if (options.socket) return ssl ? secure() : connected();\n        socket.on(\"connect\", ssl ? secure : connected);\n        if (options.path) return socket.connect(options.path);\n        socket.ssl = ssl;\n        socket.connect(port[hostIndex], host[hostIndex]);\n        socket.host = host[hostIndex];\n        socket.port = port[hostIndex];\n        hostIndex = (hostIndex + 1) % port.length;\n    }\n    function reconnect() {\n        setTimeout(connect, closedDate ? closedDate + delay - perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now() : 0);\n    }\n    function connected() {\n        try {\n            statements = {};\n            needsTypes = options.fetch_types;\n            statementId = Math.random().toString(36).slice(2);\n            statementCount = 1;\n            lifeTimer.start();\n            socket.on(\"data\", data);\n            keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive);\n            const s = StartupMessage();\n            write(s);\n        } catch (err) {\n            error(err);\n        }\n    }\n    function error(err) {\n        if (connection.queue === queues.connecting && options.host[retries + 1]) return;\n        errored(err);\n        while(sent.length)queryError(sent.shift(), err);\n    }\n    function errored(err) {\n        stream && (stream.destroy(err), stream = null);\n        query && queryError(query, err);\n        initial && (queryError(initial, err), initial = null);\n    }\n    function queryError(query, err) {\n        query.reject(Object.create(err, {\n            stack: {\n                value: err.stack + query.origin.replace(/.*\\n/, \"\\n\"),\n                enumerable: options.debug\n            },\n            query: {\n                value: query.string,\n                enumerable: options.debug\n            },\n            parameters: {\n                value: query.parameters,\n                enumerable: options.debug\n            },\n            args: {\n                value: query.args,\n                enumerable: options.debug\n            },\n            types: {\n                value: query.statement && query.statement.types,\n                enumerable: options.debug\n            }\n        }));\n    }\n    function end() {\n        return ending || (!connection.reserved && onend(connection), !connection.reserved && !initial && !query && sent.length === 0 ? (terminate(), new Promise((r)=>socket && socket.readyState !== \"closed\" ? socket.once(\"close\", r) : r())) : ending = new Promise((r)=>ended = r));\n    }\n    function terminate() {\n        terminated = true;\n        if (stream || query || initial || sent.length) error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        clearImmediate(nextWriteTimer);\n        if (socket) {\n            socket.removeListener(\"data\", data);\n            socket.removeListener(\"connect\", connected);\n            socket.readyState === \"open\" && socket.end((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().X().end());\n        }\n        ended && (ended(), ending = ended = null);\n    }\n    async function closed(hadError) {\n        incoming = Buffer.alloc(0);\n        remaining = 0;\n        incomings = null;\n        clearImmediate(nextWriteTimer);\n        socket.removeListener(\"data\", data);\n        socket.removeListener(\"connect\", connected);\n        idleTimer.cancel();\n        lifeTimer.cancel();\n        connectTimer.cancel();\n        if (socket.encrypted) {\n            socket.removeAllListeners();\n            socket = null;\n        }\n        if (initial) return reconnect();\n        !hadError && (query || sent.length) && error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_CLOSED\", options, socket));\n        closedDate = perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now();\n        hadError && options.shared.retries++;\n        delay = (typeof backoff === \"function\" ? backoff(options.shared.retries) : backoff) * 1000;\n        onclose(connection);\n    }\n    /* Handlers */ function handle(xs, x = xs[0]) {\n        (x === 68 ? DataRow : x === 100 ? CopyData : x === 65 ? NotificationResponse : x === 83 ? ParameterStatus : x === 90 ? ReadyForQuery : x === 67 ? CommandComplete : x === 50 ? BindComplete : x === 49 ? ParseComplete : x === 116 ? ParameterDescription : x === 84 ? RowDescription : x === 82 ? Authentication : x === 110 ? NoData : x === 75 ? BackendKeyData : x === 69 ? ErrorResponse : x === 115 ? PortalSuspended : x === 51 ? CloseComplete : x === 71 ? CopyInResponse : x === 78 ? NoticeResponse : x === 72 ? CopyOutResponse : x === 99 ? CopyDone : x === 73 ? EmptyQueryResponse : x === 86 ? FunctionCallResponse : x === 118 ? NegotiateProtocolVersion : x === 87 ? CopyBothResponse : /* c8 ignore next */ UnknownMessage)(xs);\n    }\n    function DataRow(x) {\n        let index = 7;\n        let length;\n        let column;\n        let value;\n        const row = query.isRaw ? new Array(query.statement.columns.length) : {};\n        for(let i = 0; i < query.statement.columns.length; i++){\n            column = query.statement.columns[i];\n            length = x.readInt32BE(index);\n            index += 4;\n            value = length === -1 ? null : query.isRaw === true ? x.subarray(index, index += length) : column.parser === undefined ? x.toString(\"utf8\", index, index += length) : column.parser.array === true ? column.parser(x.toString(\"utf8\", index + 1, index += length)) : column.parser(x.toString(\"utf8\", index, index += length));\n            query.isRaw ? row[i] = query.isRaw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n        }\n        query.forEachFn ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result) : result[rows++] = transform.row.from ? transform.row.from(row) : row;\n    }\n    function ParameterStatus(x) {\n        const [k, v] = x.toString(\"utf8\", 5, x.length - 1).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N);\n        backendParameters[k] = v;\n        if (options.parameters[k] !== v) {\n            options.parameters[k] = v;\n            onparameter && onparameter(k, v);\n        }\n    }\n    function ReadyForQuery(x) {\n        query && query.options.simple && query.resolve(results || result);\n        query = results = null;\n        result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        connectTimer.cancel();\n        if (initial) {\n            if (target_session_attrs) {\n                if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only) return fetchState();\n                else if (tryNext(target_session_attrs, backendParameters)) return terminate();\n            }\n            if (needsTypes) return fetchArrayTypes();\n            execute(initial);\n            options.shared.retries = retries = initial = 0;\n            return;\n        }\n        while(sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject);\n        if (query) return; // Consider opening if able and sent.length < 50\n        connection.reserved ? !connection.reserved.release && x[5] === 73 // I\n         ? ending ? terminate() : (connection.reserved = null, onopen(connection)) : connection.reserved() : ending ? terminate() : onopen(connection);\n    }\n    function CommandComplete(x) {\n        rows = 0;\n        for(let i = x.length - 1; i > 0; i--){\n            if (x[i] === 32 && x[i + 1] < 58 && result.count === null) result.count = +x.toString(\"utf8\", i + 1, x.length - 1);\n            if (x[i - 1] >= 65) {\n                result.command = x.toString(\"utf8\", 5, i);\n                result.state = backend;\n                break;\n            }\n        }\n        final && (final(), final = null);\n        if (result.command === \"BEGIN\" && max !== 1 && !connection.reserved) return errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"UNSAFE_TRANSACTION\", \"Only use sql.begin, sql.reserved or max: 1\"));\n        if (query.options.simple) return BindComplete();\n        if (query.cursorFn) {\n            result.count && query.cursorFn(result);\n            write(Sync);\n        }\n        query.resolve(result);\n    }\n    function ParseComplete() {\n        query.parsing = false;\n    }\n    function BindComplete() {\n        !result.statement && (result.statement = query.statement);\n        result.columns = query.statement.columns;\n    }\n    function ParameterDescription(x) {\n        const length = x.readUInt16BE(5);\n        for(let i = 0; i < length; ++i)!query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4));\n        query.prepare && (statements[query.signature] = query.statement);\n        query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false);\n    }\n    function RowDescription(x) {\n        if (result.command) {\n            results = results || [\n                result\n            ];\n            results.push(result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]());\n            result.count = null;\n            query.statement.columns = null;\n        }\n        const length = x.readUInt16BE(5);\n        let index = 7;\n        let start;\n        query.statement.columns = Array(length);\n        for(let i = 0; i < length; ++i){\n            start = index;\n            while(x[index++] !== 0);\n            const table = x.readUInt32BE(index);\n            const number = x.readUInt16BE(index + 4);\n            const type = x.readUInt32BE(index + 6);\n            query.statement.columns[i] = {\n                name: transform.column.from ? transform.column.from(x.toString(\"utf8\", start, index - 1)) : x.toString(\"utf8\", start, index - 1),\n                parser: parsers[type],\n                table,\n                number,\n                type\n            };\n            index += 18;\n        }\n        result.statement = query.statement;\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    async function Authentication(x, type = x.readUInt32BE(5)) {\n        (type === 3 ? AuthenticationCleartextPassword : type === 5 ? AuthenticationMD5Password : type === 10 ? SASL : type === 11 ? SASLContinue : type === 12 ? SASLFinal : type !== 0 ? UnknownAuth : noop)(x, type);\n    }\n    /* c8 ignore next 5 */ async function AuthenticationCleartextPassword() {\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(await Pass()).z(1).end());\n    }\n    async function AuthenticationMD5Password(x) {\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(\"md5\" + await md5(Buffer.concat([\n            Buffer.from(await md5(await Pass() + user)),\n            x.subarray(9)\n        ]))).z(1).end());\n    }\n    async function SASL() {\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(\"SCRAM-SHA-256\" + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N);\n        const i = _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i;\n        nonce = (await crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(18)).toString(\"base64\");\n        write(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].inc(4).str(\"n,,n=*,r=\" + nonce).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i - i - 4, i).end());\n    }\n    async function SASLContinue(x) {\n        const res = x.toString(\"utf8\", 9).split(\",\").reduce((acc, x)=>(acc[x[0]] = x.slice(2), acc), {});\n        const saltedPassword = await crypto__WEBPACK_IMPORTED_MODULE_2__.pbkdf2Sync(await Pass(), Buffer.from(res.s, \"base64\"), parseInt(res.i), 32, \"sha256\");\n        const clientKey = await hmac(saltedPassword, \"Client Key\");\n        const auth = \"n=*,r=\" + nonce + \",\" + \"r=\" + res.r + \",s=\" + res.s + \",i=\" + res.i + \",c=biws,r=\" + res.r;\n        serverSignature = (await hmac(await hmac(saltedPassword, \"Server Key\"), auth)).toString(\"base64\");\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(\"c=biws,r=\" + res.r + \",p=\" + xor(clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))).toString(\"base64\")).end());\n    }\n    function SASLFinal(x) {\n        if (x.toString(\"utf8\", 9).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N, 1)[0].slice(2) === serverSignature) return;\n        /* c8 ignore next 5 */ errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"SASL_SIGNATURE_MISMATCH\", \"The server did not return the correct signature\"));\n        socket.destroy();\n    }\n    function Pass() {\n        return Promise.resolve(typeof options.pass === \"function\" ? options.pass() : options.pass);\n    }\n    function NoData() {\n        result.statement = query.statement;\n        result.statement.columns = [];\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    function BackendKeyData(x) {\n        backend.pid = x.readUInt32BE(5);\n        backend.secret = x.readUInt32BE(9);\n    }\n    async function fetchArrayTypes() {\n        needsTypes = false;\n        const types = await new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = 'A'\n      group by b.oid, b.typarray\n      order by b.oid\n    `\n        ], [], execute);\n        types.forEach(({ oid, typarray })=>addArrayType(oid, typarray));\n    }\n    function addArrayType(oid, typarray) {\n        if (!!options.parsers[typarray] && !!options.serializers[typarray]) return;\n        const parser = options.parsers[oid];\n        options.shared.typeArrayMap[oid] = typarray;\n        options.parsers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arrayParser)(xs, parser, typarray);\n        options.parsers[typarray].array = true;\n        options.serializers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arraySerializer)(xs, options.serializers[oid], options, typarray);\n    }\n    function tryNext(x, xs) {\n        return x === \"read-write\" && xs.default_transaction_read_only === \"on\" || x === \"read-only\" && xs.default_transaction_read_only === \"off\" || x === \"primary\" && xs.in_hot_standby === \"on\" || x === \"standby\" && xs.in_hot_standby === \"off\" || x === \"prefer-standby\" && xs.in_hot_standby === \"off\" && options.host[retries];\n    }\n    function fetchState() {\n        const query = new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `\n        ], [], execute, null, {\n            simple: true\n        });\n        query.resolve = ([[a], [b]])=>{\n            backendParameters.default_transaction_read_only = a.transaction_read_only;\n            backendParameters.in_hot_standby = b.pg_is_in_recovery ? \"on\" : \"off\";\n        };\n        query.execute();\n    }\n    function ErrorResponse(x) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync);\n        const error = _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.postgres(parseError(x));\n        query && query.retried ? errored(query.retried) : query && retryRoutines.has(error.routine) ? retry(query, error) : errored(error);\n    }\n    function retry(q, error) {\n        delete statements[q.signature];\n        q.retried = error;\n        execute(q);\n    }\n    function NotificationResponse(x) {\n        if (!onnotify) return;\n        let index = 9;\n        while(x[index++] !== 0);\n        onnotify(x.toString(\"utf8\", 9, index - 1), x.toString(\"utf8\", index, x.length - 1));\n    }\n    async function PortalSuspended() {\n        try {\n            const x = await Promise.resolve(query.cursorFn(result));\n            rows = 0;\n            x === _query_js__WEBPACK_IMPORTED_MODULE_9__.CLOSE ? write(Close(query.portal)) : (result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), write(Execute(\"\", query.cursorRows)));\n        } catch (err) {\n            write(Sync);\n            query.reject(err);\n        }\n    }\n    function CloseComplete() {\n        result.count && query.cursorFn(result);\n        query.resolve(result);\n    }\n    function CopyInResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Writable({\n            autoDestroy: true,\n            write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyOutResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Readable({\n            read () {\n                socket.resume();\n            }\n        });\n        query.resolve(stream);\n    }\n    /* c8 ignore next 3 */ function CopyBothResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Duplex({\n            autoDestroy: true,\n            read () {\n                socket.resume();\n            },\n            /* c8 ignore next 11 */ write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyData(x) {\n        stream && (stream.push(x.subarray(5)) || socket.pause());\n    }\n    function CopyDone() {\n        stream && stream.push(null);\n        stream = null;\n    }\n    function NoticeResponse(x) {\n        onnotice ? onnotice(parseError(x)) : console.log(parseError(x)) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function EmptyQueryResponse() {\n    /* noop */ }\n    /* c8 ignore next 3 */ function FunctionCallResponse() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported(\"FunctionCallResponse\"));\n    }\n    /* c8 ignore next 3 */ function NegotiateProtocolVersion() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported(\"NegotiateProtocolVersion\"));\n    }\n    /* c8 ignore next 3 */ function UnknownMessage(x) {\n        console.error(\"Postgres.js : Unknown Message:\", x[0]) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function UnknownAuth(x, type) {\n        console.error(\"Postgres.js : Unknown Auth:\", type) // eslint-disable-line\n        ;\n    }\n    /* Messages */ function Bind(parameters, types, statement = \"\", portal = \"\") {\n        let prev, type;\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().B().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).str(statement + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i16(0).i16(parameters.length);\n        parameters.forEach((x, i)=>{\n            if (x === null) return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i32(0xFFFFFFFF);\n            type = types[i];\n            parameters[i] = x = type in options.serializers ? options.serializers[type](x) : \"\" + x;\n            prev = _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i;\n            _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].inc(4).str(x).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i - prev - 4, prev);\n        });\n        _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i16(0);\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].end();\n    }\n    function Parse(str, parameters, types, name = \"\") {\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().P().str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).str(str + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i16(parameters.length);\n        parameters.forEach((x, i)=>_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i32(types[i] || 0));\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].end();\n    }\n    function Describe(x, name = \"\") {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().D().str(x).str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end();\n    }\n    function Execute(portal = \"\", rows = 0) {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().E().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i32(rows).end(),\n            Flush\n        ]);\n    }\n    function Close(portal = \"\") {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().C().str(\"P\").str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end(),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().S().end()\n        ]);\n    }\n    function StartupMessage() {\n        return cancelMessage || (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().inc(4).i16(3).z(2).str(Object.entries(Object.assign({\n            user,\n            database,\n            client_encoding: \"UTF8\"\n        }, options.connection)).filter(([, v])=>v).map(([k, v])=>k + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N + v).join(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N)).z(2).end(0);\n    }\n}\nfunction parseError(x) {\n    const error = {};\n    let start = 5;\n    for(let i = 5; i < x.length - 1; i++){\n        if (x[i] === 0) {\n            error[errorFields[x[start]]] = x.toString(\"utf8\", start + 1, i);\n            start = i + 1;\n        }\n    }\n    return error;\n}\nfunction md5(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash(\"md5\").update(x).digest(\"hex\");\n}\nfunction hmac(key, x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHmac(\"sha256\", key).update(x).digest();\n}\nfunction sha256(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash(\"sha256\").update(x).digest();\n}\nfunction xor(a, b) {\n    const length = Math.max(a.length, b.length);\n    const buffer = Buffer.allocUnsafe(length);\n    for(let i = 0; i < length; i++)buffer[i] = a[i] ^ b[i];\n    return buffer;\n}\nfunction timer(fn, seconds) {\n    seconds = typeof seconds === \"function\" ? seconds() : seconds;\n    if (!seconds) return {\n        cancel: noop,\n        start: noop\n    };\n    let timer;\n    return {\n        cancel () {\n            timer && (clearTimeout(timer), timer = null);\n        },\n        start () {\n            timer && clearTimeout(timer);\n            timer = setTimeout(done, seconds * 1000, arguments);\n        }\n    };\n    function done(args) {\n        fn.apply(null, args);\n        timer = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/connection.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres/src/errors.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   PostgresError: () => (/* binding */ PostgresError)\n/* harmony export */ });\nclass PostgresError extends Error {\n    constructor(x){\n        super(x.message);\n        this.name = this.constructor.name;\n        Object.assign(this, x);\n    }\n}\nconst Errors = {\n    connection,\n    postgres,\n    generic,\n    notSupported\n};\nfunction connection(x, options, socket) {\n    const { host, port } = socket || options;\n    const error = Object.assign(new Error(\"write \" + x + \" \" + (options.path || host + \":\" + port)), {\n        code: x,\n        errno: x,\n        address: options.path || host\n    }, options.path ? {} : {\n        port: port\n    });\n    Error.captureStackTrace(error, connection);\n    return error;\n}\nfunction postgres(x) {\n    const error = new PostgresError(x);\n    Error.captureStackTrace(error, postgres);\n    return error;\n}\nfunction generic(code, message) {\n    const error = Object.assign(new Error(code + \": \" + message), {\n        code\n    });\n    Error.captureStackTrace(error, generic);\n    return error;\n}\n/* c8 ignore next 10 */ function notSupported(x) {\n    const error = Object.assign(new Error(x + \" (B) is not supported\"), {\n        code: \"MESSAGE_NOT_SUPPORTED\",\n        name: x\n    });\n    Error.captureStackTrace(error, notSupported);\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsc0JBQXNCQztJQUNqQ0MsWUFBWUMsQ0FBQyxDQUFFO1FBQ2IsS0FBSyxDQUFDQSxFQUFFQyxPQUFPO1FBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDSCxXQUFXLENBQUNHLElBQUk7UUFDakNDLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLEVBQUVKO0lBQ3RCO0FBQ0Y7QUFFTyxNQUFNSyxTQUFTO0lBQ3BCQztJQUNBQztJQUNBQztJQUNBQztBQUNGLEVBQUM7QUFFRCxTQUFTSCxXQUFXTixDQUFDLEVBQUVVLE9BQU8sRUFBRUMsTUFBTTtJQUNwQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdGLFVBQVVEO0lBQ2pDLE1BQU1JLFFBQVFYLE9BQU9DLE1BQU0sQ0FDekIsSUFBSU4sTUFBTyxXQUFXRSxJQUFJLE1BQU9VLENBQUFBLFFBQVFLLElBQUksSUFBS0gsT0FBTyxNQUFNQyxJQUFJLElBQ25FO1FBQ0VHLE1BQU1oQjtRQUNOaUIsT0FBT2pCO1FBQ1BrQixTQUFTUixRQUFRSyxJQUFJLElBQUlIO0lBQzNCLEdBQUdGLFFBQVFLLElBQUksR0FBRyxDQUFDLElBQUk7UUFBRUYsTUFBTUE7SUFBSztJQUV0Q2YsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPUjtJQUMvQixPQUFPUTtBQUNUO0FBRUEsU0FBU1AsU0FBU1AsQ0FBQztJQUNqQixNQUFNYyxRQUFRLElBQUlqQixjQUFjRztJQUNoQ0YsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPUDtJQUMvQixPQUFPTztBQUNUO0FBRUEsU0FBU04sUUFBUVEsSUFBSSxFQUFFZixPQUFPO0lBQzVCLE1BQU1hLFFBQVFYLE9BQU9DLE1BQU0sQ0FBQyxJQUFJTixNQUFNa0IsT0FBTyxPQUFPZixVQUFVO1FBQUVlO0lBQUs7SUFDckVsQixNQUFNcUIsaUJBQWlCLENBQUNMLE9BQU9OO0lBQy9CLE9BQU9NO0FBQ1Q7QUFFQSxxQkFBcUIsR0FDckIsU0FBU0wsYUFBYVQsQ0FBQztJQUNyQixNQUFNYyxRQUFRWCxPQUFPQyxNQUFNLENBQ3pCLElBQUlOLE1BQU1FLElBQUksMEJBQ2Q7UUFDRWdCLE1BQU07UUFDTmQsTUFBTUY7SUFDUjtJQUVGRixNQUFNcUIsaUJBQWlCLENBQUNMLE9BQU9MO0lBQy9CLE9BQU9LO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwcm9kaWdpZXMtY3lwcmVzcy8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvZXJyb3JzLmpzPzhkMzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFBvc3RncmVzRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHgpIHtcbiAgICBzdXBlcih4Lm1lc3NhZ2UpXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB4KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvcnMgPSB7XG4gIGNvbm5lY3Rpb24sXG4gIHBvc3RncmVzLFxuICBnZW5lcmljLFxuICBub3RTdXBwb3J0ZWRcbn1cblxuZnVuY3Rpb24gY29ubmVjdGlvbih4LCBvcHRpb25zLCBzb2NrZXQpIHtcbiAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSBzb2NrZXQgfHwgb3B0aW9uc1xuICBjb25zdCBlcnJvciA9IE9iamVjdC5hc3NpZ24oXG4gICAgbmV3IEVycm9yKCgnd3JpdGUgJyArIHggKyAnICcgKyAob3B0aW9ucy5wYXRoIHx8IChob3N0ICsgJzonICsgcG9ydCkpKSksXG4gICAge1xuICAgICAgY29kZTogeCxcbiAgICAgIGVycm5vOiB4LFxuICAgICAgYWRkcmVzczogb3B0aW9ucy5wYXRoIHx8IGhvc3RcbiAgICB9LCBvcHRpb25zLnBhdGggPyB7fSA6IHsgcG9ydDogcG9ydCB9XG4gIClcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIGNvbm5lY3Rpb24pXG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBwb3N0Z3Jlcyh4KSB7XG4gIGNvbnN0IGVycm9yID0gbmV3IFBvc3RncmVzRXJyb3IoeClcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIHBvc3RncmVzKVxuICByZXR1cm4gZXJyb3Jcbn1cblxuZnVuY3Rpb24gZ2VuZXJpYyhjb2RlLCBtZXNzYWdlKSB7XG4gIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoY29kZSArICc6ICcgKyBtZXNzYWdlKSwgeyBjb2RlIH0pXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVycm9yLCBnZW5lcmljKVxuICByZXR1cm4gZXJyb3Jcbn1cblxuLyogYzggaWdub3JlIG5leHQgMTAgKi9cbmZ1bmN0aW9uIG5vdFN1cHBvcnRlZCh4KSB7XG4gIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihcbiAgICBuZXcgRXJyb3IoeCArICcgKEIpIGlzIG5vdCBzdXBwb3J0ZWQnKSxcbiAgICB7XG4gICAgICBjb2RlOiAnTUVTU0FHRV9OT1RfU1VQUE9SVEVEJyxcbiAgICAgIG5hbWU6IHhcbiAgICB9XG4gIClcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIG5vdFN1cHBvcnRlZClcbiAgcmV0dXJuIGVycm9yXG59XG4iXSwibmFtZXMiOlsiUG9zdGdyZXNFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJ4IiwibWVzc2FnZSIsIm5hbWUiLCJPYmplY3QiLCJhc3NpZ24iLCJFcnJvcnMiLCJjb25uZWN0aW9uIiwicG9zdGdyZXMiLCJnZW5lcmljIiwibm90U3VwcG9ydGVkIiwib3B0aW9ucyIsInNvY2tldCIsImhvc3QiLCJwb3J0IiwiZXJyb3IiLCJwYXRoIiwiY29kZSIsImVycm5vIiwiYWRkcmVzcyIsImNhcHR1cmVTdGFja1RyYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/errors.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/postgres/src/types.js\");\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connection.js */ \"(action-browser)/./node_modules/postgres/src/connection.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./query.js */ \"(action-browser)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./queue.js */ \"(action-browser)/./node_modules/postgres/src/queue.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(action-browser)/./node_modules/postgres/src/errors.js\");\n/* harmony import */ var _subscribe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subscribe.js */ \"(action-browser)/./node_modules/postgres/src/subscribe.js\");\n/* harmony import */ var _large_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./large.js */ \"(action-browser)/./node_modules/postgres/src/large.js\");\n\n\n\n\n\n\n\n\n\nObject.assign(Postgres, {\n    PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n    toPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.toPascal,\n    pascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.pascal,\n    toCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.toCamel,\n    camel: _types_js__WEBPACK_IMPORTED_MODULE_2__.camel,\n    toKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.toKebab,\n    kebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.kebab,\n    fromPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromPascal,\n    fromCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromCamel,\n    fromKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromKebab,\n    BigInt: {\n        to: 20,\n        from: [\n            20\n        ],\n        parse: (x)=>BigInt(x),\n        serialize: (x)=>x.toString()\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Postgres);\nfunction Postgres(a, b) {\n    const options = parseOptions(a, b), subscribe = options.no_subscribe || (0,_subscribe_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Postgres, {\n        ...options\n    });\n    let ending = false;\n    const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), connecting = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), reserved = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), closed = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), ended = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), open = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), busy = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), full = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), queues = {\n        connecting,\n        reserved,\n        closed,\n        ended,\n        open,\n        busy,\n        full\n    };\n    const connections = [\n        ...Array(options.max)\n    ].map(()=>(0,_connection_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, queues, {\n            onopen,\n            onend,\n            onclose\n        }));\n    const sql = Sql(handler);\n    Object.assign(sql, {\n        get parameters () {\n            return options.parameters;\n        },\n        largeObject: _large_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].bind(null, sql),\n        subscribe,\n        CLOSE: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        END: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n        options,\n        reserve,\n        listen,\n        begin,\n        close,\n        end\n    });\n    return sql;\n    function Sql(handler) {\n        handler.debug = options.debug;\n        Object.entries(options.types).reduce((acc, [name, type])=>{\n            acc[name] = (x)=>new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type.to);\n            return acc;\n        }, typed);\n        Object.assign(sql, {\n            types: typed,\n            typed,\n            unsafe,\n            notify,\n            array,\n            json,\n            file\n        });\n        return sql;\n        function typed(value, type) {\n            return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(value, type);\n        }\n        function sql(strings, ...args) {\n            const query = strings && Array.isArray(strings.raw) ? new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query(strings, args, handler, cancel) : typeof strings === \"string\" && !args.length ? new _types_js__WEBPACK_IMPORTED_MODULE_2__.Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings) : new _types_js__WEBPACK_IMPORTED_MODULE_2__.Builder(strings, args);\n            return query;\n        }\n        function unsafe(string, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([\n                string\n            ], args, handler, cancel, {\n                prepare: false,\n                ...options,\n                simple: \"simple\" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n        function file(path, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([], args, (query)=>{\n                fs__WEBPACK_IMPORTED_MODULE_1__.readFile(path, \"utf8\", (err, string)=>{\n                    if (err) return query.reject(err);\n                    query.strings = [\n                        string\n                    ];\n                    handler(query);\n                });\n            }, cancel, {\n                ...options,\n                simple: \"simple\" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n    }\n    async function listen(name, fn, onlisten) {\n        const listener = {\n            fn,\n            onlisten\n        };\n        const sql = listen.sql || (listen.sql = Postgres({\n            ...options,\n            max: 1,\n            idle_timeout: null,\n            max_lifetime: null,\n            fetch_types: false,\n            onclose () {\n                Object.entries(listen.channels).forEach(([name, { listeners }])=>{\n                    delete listen.channels[name];\n                    Promise.all(listeners.map((l)=>listen(name, l.fn, l.onlisten).catch(()=>{})));\n                });\n            },\n            onnotify (c, x) {\n                c in listen.channels && listen.channels[c].listeners.forEach((l)=>l.fn(x));\n            }\n        }));\n        const channels = listen.channels || (listen.channels = {}), exists = name in channels;\n        if (exists) {\n            channels[name].listeners.push(listener);\n            const result = await channels[name].result;\n            listener.onlisten && listener.onlisten();\n            return {\n                state: result.state,\n                unlisten\n            };\n        }\n        channels[name] = {\n            result: sql`listen ${sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')}`,\n            listeners: [\n                listener\n            ]\n        };\n        const result = await channels[name].result;\n        listener.onlisten && listener.onlisten();\n        return {\n            state: result.state,\n            unlisten\n        };\n        async function unlisten() {\n            if (name in channels === false) return;\n            channels[name].listeners = channels[name].listeners.filter((x)=>x !== listener);\n            if (channels[name].listeners.length) return;\n            delete channels[name];\n            return sql`unlisten ${sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')}`;\n        }\n    }\n    async function notify(channel, payload) {\n        return await sql`select pg_notify(${channel}, ${\"\" + payload})`;\n    }\n    async function reserve() {\n        const queue = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        const c = open.length ? open.shift() : await new Promise((r)=>{\n            queries.push({\n                reserve: r\n            });\n            closed.length && connect(closed.shift());\n        });\n        move(c, reserved);\n        c.reserved = ()=>queue.length ? c.execute(queue.shift()) : move(c, reserved);\n        c.reserved.release = true;\n        const sql = Sql(handler);\n        sql.release = ()=>{\n            c.reserved = null;\n            onopen(c);\n        };\n        return sql;\n        function handler(q) {\n            c.queue === full ? queue.push(q) : c.execute(q) || move(c, full);\n        }\n    }\n    async function begin(options, fn) {\n        !fn && (fn = options, options = \"\");\n        const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        let savepoints = 0, connection, prepare = null;\n        try {\n            await sql.unsafe(\"begin \" + options.replace(/[^a-z ]/ig, \"\"), [], {\n                onexecute\n            }).execute();\n            return await scope(connection, fn);\n        } catch (error) {\n            throw error;\n        }\n        async function scope(c, fn, name) {\n            const sql = Sql(handler);\n            sql.savepoint = savepoint;\n            sql.prepare = (x)=>prepare = x.replace(/[^a-z0-9$-_. ]/gi);\n            let uncaughtError, result;\n            name && await sql`savepoint ${sql(name)}`;\n            try {\n                result = await new Promise((resolve, reject)=>{\n                    const x = fn(sql);\n                    Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject);\n                });\n                if (uncaughtError) throw uncaughtError;\n            } catch (e) {\n                await (name ? sql`rollback to ${sql(name)}` : sql`rollback`);\n                throw e instanceof _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError && e.code === \"25P02\" && uncaughtError || e;\n            }\n            if (!name) {\n                prepare ? await sql`prepare transaction '${sql.unsafe(prepare)}'` : await sql`commit`;\n            }\n            return result;\n            function savepoint(name, fn) {\n                if (name && Array.isArray(name.raw)) return savepoint((sql)=>sql.apply(sql, arguments));\n                arguments.length === 1 && (fn = name, name = null);\n                return scope(c, fn, \"s\" + savepoints++ + (name ? \"_\" + name : \"\"));\n            }\n            function handler(q) {\n                q.catch((e)=>uncaughtError || (uncaughtError = e));\n                c.queue === full ? queries.push(q) : c.execute(q) || move(c, full);\n            }\n        }\n        function onexecute(c) {\n            connection = c;\n            move(c, reserved);\n            c.reserved = ()=>queries.length ? c.execute(queries.shift()) : move(c, reserved);\n        }\n    }\n    function move(c, queue) {\n        c.queue.remove(c);\n        queue.push(c);\n        c.queue = queue;\n        queue === open ? c.idleTimer.start() : c.idleTimer.cancel();\n        return c;\n    }\n    function json(x) {\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, 3802);\n    }\n    function array(x, type) {\n        if (!Array.isArray(x)) return array(Array.from(arguments));\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type || (x.length ? (0,_types_js__WEBPACK_IMPORTED_MODULE_2__.inferType)(x) || 25 : 0), options.shared.typeArrayMap);\n    }\n    function handler(query) {\n        if (ending) return query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_ENDED\", options, options));\n        if (open.length) return go(open.shift(), query);\n        if (closed.length) return connect(closed.shift(), query);\n        busy.length ? go(busy.shift(), query) : queries.push(query);\n    }\n    function go(c, query) {\n        return c.execute(query) ? move(c, busy) : move(c, full);\n    }\n    function cancel(query) {\n        return new Promise((resolve, reject)=>{\n            query.state ? query.active ? (0,_connection_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options).cancel(query.state, resolve, reject) : query.cancelled = {\n                resolve,\n                reject\n            } : (queries.remove(query), query.cancelled = true, query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"57014\", \"canceling statement due to user request\")), resolve());\n        });\n    }\n    async function end({ timeout = null } = {}) {\n        if (ending) return ending;\n        await 1;\n        let timer;\n        return ending = Promise.race([\n            new Promise((r)=>timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n            Promise.all(connections.map((c)=>c.end()).concat(listen.sql ? listen.sql.end({\n                timeout: 0\n            }) : [], subscribe.sql ? subscribe.sql.end({\n                timeout: 0\n            }) : []))\n        ]).then(()=>clearTimeout(timer));\n    }\n    async function close() {\n        await Promise.all(connections.map((c)=>c.end()));\n    }\n    async function destroy(resolve) {\n        await Promise.all(connections.map((c)=>c.terminate()));\n        while(queries.length)queries.shift().reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        resolve();\n    }\n    function connect(c, query) {\n        move(c, connecting);\n        c.connect(query);\n        return c;\n    }\n    function onend(c) {\n        move(c, ended);\n    }\n    function onopen(c) {\n        if (queries.length === 0) return move(c, open);\n        let max = Math.ceil(queries.length / (connecting.length + 1)), ready = true;\n        while(ready && queries.length && max-- > 0){\n            const query = queries.shift();\n            if (query.reserve) return query.reserve(c);\n            ready = c.execute(query);\n        }\n        ready ? move(c, busy) : move(c, full);\n    }\n    function onclose(c) {\n        move(c, closed);\n        c.reserved = null;\n        options.onclose && options.onclose(c.id);\n        queries.length && connect(c, queries.shift());\n    }\n}\nfunction parseOptions(a, b) {\n    if (a && a.shared) return a;\n    const env = process.env // eslint-disable-line\n    , o = (!a || typeof a === \"string\" ? b : a) || {}, { url, multihost } = parseUrl(a), query = [\n        ...url.searchParams\n    ].reduce((a, [b, c])=>(a[b] = c, a), {}), host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || \"localhost\", port = o.port || url.port || env.PGPORT || 5432, user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername();\n    o.no_prepare && (o.prepare = false);\n    query.sslmode && (query.ssl = query.sslmode, delete query.sslmode);\n    \"timeout\" in o && (console.log(\"The timeout option is deprecated, use idle_timeout instead\"), o.idle_timeout = o.timeout // eslint-disable-line\n    );\n    const ints = [\n        \"idle_timeout\",\n        \"connect_timeout\",\n        \"max_lifetime\",\n        \"max_pipeline\",\n        \"backoff\",\n        \"keep_alive\"\n    ];\n    const defaults = {\n        max: 10,\n        ssl: false,\n        idle_timeout: null,\n        connect_timeout: 30,\n        max_lifetime: max_lifetime,\n        max_pipeline: 100,\n        backoff: backoff,\n        keep_alive: 60,\n        prepare: true,\n        debug: false,\n        fetch_types: true,\n        publications: \"alltables\",\n        target_session_attrs: null\n    };\n    return {\n        host: Array.isArray(host) ? host : host.split(\",\").map((x)=>x.split(\":\")[0]),\n        port: Array.isArray(port) ? port : host.split(\",\").map((x)=>parseInt(x.split(\":\")[1] || port)),\n        path: o.path || host.indexOf(\"/\") > -1 && host + \"/.s.PGSQL.\" + port,\n        database: o.database || o.db || (url.pathname || \"\").slice(1) || env.PGDATABASE || user,\n        user: user,\n        pass: o.pass || o.password || url.password || env.PGPASSWORD || \"\",\n        ...Object.entries(defaults).reduce((acc, [k, d])=>{\n            const value = k in o ? o[k] : k in query ? query[k] === \"disable\" || query[k] === \"false\" ? false : query[k] : env[\"PG\" + k.toUpperCase()] || d;\n            acc[k] = typeof value === \"string\" && ints.includes(k) ? +value : value;\n            return acc;\n        }, {}),\n        connection: {\n            application_name: \"postgres.js\",\n            ...o.connection,\n            ...Object.entries(query).reduce((acc, [k, v])=>(k in defaults || (acc[k] = v), acc), {})\n        },\n        types: o.types || {},\n        target_session_attrs: tsa(o, url, env),\n        onnotice: o.onnotice,\n        onnotify: o.onnotify,\n        onclose: o.onclose,\n        onparameter: o.onparameter,\n        socket: o.socket,\n        transform: parseTransform(o.transform || {\n            undefined: undefined\n        }),\n        parameters: {},\n        shared: {\n            retries: 0,\n            typeArrayMap: {}\n        },\n        ...(0,_types_js__WEBPACK_IMPORTED_MODULE_2__.mergeUserTypes)(o.types)\n    };\n}\nfunction tsa(o, url, env) {\n    const x = o.target_session_attrs || url.searchParams.get(\"target_session_attrs\") || env.PGTARGETSESSIONATTRS;\n    if (!x || [\n        \"read-write\",\n        \"read-only\",\n        \"primary\",\n        \"standby\",\n        \"prefer-standby\"\n    ].includes(x)) return x;\n    throw new Error(\"target_session_attrs \" + x + \" is not supported\");\n}\nfunction backoff(retries) {\n    return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20);\n}\nfunction max_lifetime() {\n    return 60 * (30 + Math.random() * 30);\n}\nfunction parseTransform(x) {\n    return {\n        undefined: x.undefined,\n        column: {\n            from: typeof x.column === \"function\" ? x.column : x.column && x.column.from,\n            to: x.column && x.column.to\n        },\n        value: {\n            from: typeof x.value === \"function\" ? x.value : x.value && x.value.from,\n            to: x.value && x.value.to\n        },\n        row: {\n            from: typeof x.row === \"function\" ? x.row : x.row && x.row.from,\n            to: x.row && x.row.to\n        }\n    };\n}\nfunction parseUrl(url) {\n    if (!url || typeof url !== \"string\") return {\n        url: {\n            searchParams: new Map()\n        }\n    };\n    let host = url;\n    host = host.slice(host.indexOf(\"://\") + 3).split(/[?/]/)[0];\n    host = decodeURIComponent(host.slice(host.indexOf(\"@\") + 1));\n    const urlObj = new URL(url.replace(host, host.split(\",\")[0]));\n    return {\n        url: {\n            username: decodeURIComponent(urlObj.username),\n            password: decodeURIComponent(urlObj.password),\n            host: urlObj.host,\n            hostname: urlObj.hostname,\n            port: urlObj.port,\n            pathname: urlObj.pathname,\n            searchParams: urlObj.searchParams\n        },\n        multihost: host.indexOf(\",\") > -1 && host\n    };\n}\nfunction osUsername() {\n    try {\n        return os__WEBPACK_IMPORTED_MODULE_0__.userInfo().username // eslint-disable-line\n        ;\n    } catch (_) {\n        return process.env.USERNAME || process.env.USER || process.env.LOGNAME // eslint-disable-line\n        ;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/large.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/large.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ largeObject)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n\nfunction largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n    return new Promise(async (resolve, reject)=>{\n        await sql.begin(async (sql)=>{\n            let finish;\n            !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`);\n            const [{ fd }] = await sql`select lo_open(${oid}, ${mode}) as fd`;\n            const lo = {\n                writable,\n                readable,\n                close: ()=>sql`select lo_close(${fd})`.then(finish),\n                tell: ()=>sql`select lo_tell64(${fd})`,\n                read: (x)=>sql`select loread(${fd}, ${x}) as data`,\n                write: (x)=>sql`select lowrite(${fd}, ${x})`,\n                truncate: (x)=>sql`select lo_truncate64(${fd}, ${x})`,\n                seek: (x, whence = 0)=>sql`select lo_lseek64(${fd}, ${x}, ${whence})`,\n                size: ()=>sql`\n          select\n            lo_lseek64(${fd}, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n            };\n            resolve(lo);\n            return new Promise(async (r)=>finish = r);\n            async function readable({ highWaterMark = 2048 * 8, start = 0, end = Infinity } = {}) {\n                let max = end - start;\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Readable({\n                    highWaterMark,\n                    async read (size) {\n                        const l = size > max ? size - max : size;\n                        max -= size;\n                        const [{ data }] = await lo.read(l);\n                        this.push(data);\n                        if (data.length < size) this.push(null);\n                    }\n                });\n            }\n            async function writable({ highWaterMark = 2048 * 8, start = 0 } = {}) {\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Writable({\n                    highWaterMark,\n                    write (chunk, encoding, callback) {\n                        lo.write(chunk).then(()=>callback(), callback);\n                    }\n                });\n            }\n        }).catch(reject);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvbGFyZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkI7QUFFWixTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxhQUFhLFVBQVU7SUFDMUUsT0FBTyxJQUFJQyxRQUFRLE9BQU1DLFNBQVNDO1FBQ2hDLE1BQU1MLElBQUlNLEtBQUssQ0FBQyxPQUFNTjtZQUNwQixJQUFJTztZQUNKLENBQUNOLE9BQVEsRUFBQyxFQUFFQSxHQUFHLEVBQUUsQ0FBQyxHQUFHLE1BQU1ELEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztZQUMxRCxNQUFNLENBQUMsRUFBRVEsRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNUixHQUFHLENBQUMsZUFBZSxFQUFHQyxJQUFLLEVBQUUsRUFBR0MsS0FBTSxPQUFPLENBQUM7WUFFckUsTUFBTU8sS0FBSztnQkFDVEM7Z0JBQ0FDO2dCQUNBQyxPQUFZLElBQU1aLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBR1EsR0FBSSxDQUFDLENBQUMsQ0FBQ0ssSUFBSSxDQUFDTjtnQkFDckRPLE1BQVksSUFBTWQsR0FBRyxDQUFDLGlCQUFpQixFQUFHUSxHQUFJLENBQUMsQ0FBQztnQkFDaERPLE1BQVksQ0FBQ0MsSUFBTWhCLEdBQUcsQ0FBQyxjQUFjLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLFNBQVMsQ0FBQztnQkFDOURDLE9BQVksQ0FBQ0QsSUFBTWhCLEdBQUcsQ0FBQyxlQUFlLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLENBQUMsQ0FBQztnQkFDdkRFLFVBQVksQ0FBQ0YsSUFBTWhCLEdBQUcsQ0FBQyxxQkFBcUIsRUFBR1EsR0FBSSxFQUFFLEVBQUdRLEVBQUcsQ0FBQyxDQUFDO2dCQUM3REcsTUFBWSxDQUFDSCxHQUFHSSxTQUFTLENBQUMsR0FBS3BCLEdBQUcsQ0FBQyxrQkFBa0IsRUFBR1EsR0FBSSxFQUFFLEVBQUdRLEVBQUcsRUFBRSxFQUFHSSxPQUFRLENBQUMsQ0FBQztnQkFDbkZDLE1BQVksSUFBTXJCLEdBQUcsQ0FBQzs7dUJBRVAsRUFBR1EsR0FBSTs7Ozs7Ozs7UUFRdEIsQ0FBQztZQUNIO1lBRUFKLFFBQVFLO1lBRVIsT0FBTyxJQUFJTixRQUFRLE9BQU1tQixJQUFLZixTQUFTZTtZQUV2QyxlQUFlWCxTQUFTLEVBQ3RCWSxnQkFBZ0IsT0FBTyxDQUFDLEVBQ3hCQyxRQUFRLENBQUMsRUFDVEMsTUFBTUMsUUFBUSxFQUNmLEdBQUcsQ0FBQyxDQUFDO2dCQUNKLElBQUlDLE1BQU1GLE1BQU1EO2dCQUNoQkEsU0FBUyxNQUFNZixHQUFHVSxJQUFJLENBQUNLO2dCQUN2QixPQUFPLElBQUkxQiw0Q0FBZSxDQUFDO29CQUN6QnlCO29CQUNBLE1BQU1SLE1BQUtNLElBQUk7d0JBQ2IsTUFBTVEsSUFBSVIsT0FBT00sTUFBTU4sT0FBT00sTUFBTU47d0JBQ3BDTSxPQUFPTjt3QkFDUCxNQUFNLENBQUMsRUFBRVMsSUFBSSxFQUFFLENBQUMsR0FBRyxNQUFNckIsR0FBR00sSUFBSSxDQUFDYzt3QkFDakMsSUFBSSxDQUFDRSxJQUFJLENBQUNEO3dCQUNWLElBQUlBLEtBQUtFLE1BQU0sR0FBR1gsTUFDaEIsSUFBSSxDQUFDVSxJQUFJLENBQUM7b0JBQ2Q7Z0JBQ0Y7WUFDRjtZQUVBLGVBQWVyQixTQUFTLEVBQ3RCYSxnQkFBZ0IsT0FBTyxDQUFDLEVBQ3hCQyxRQUFRLENBQUMsRUFDVixHQUFHLENBQUMsQ0FBQztnQkFDSkEsU0FBUyxNQUFNZixHQUFHVSxJQUFJLENBQUNLO2dCQUN2QixPQUFPLElBQUkxQiw0Q0FBZSxDQUFDO29CQUN6QnlCO29CQUNBTixPQUFNaUIsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVE7d0JBQzdCM0IsR0FBR1EsS0FBSyxDQUFDaUIsT0FBT3JCLElBQUksQ0FBQyxJQUFNdUIsWUFBWUE7b0JBQ3pDO2dCQUNGO1lBQ0Y7UUFDRixHQUFHQyxLQUFLLENBQUNoQztJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwcm9kaWdpZXMtY3lwcmVzcy8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvbGFyZ2UuanM/NjZjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFyZ2VPYmplY3Qoc3FsLCBvaWQsIG1vZGUgPSAweDAwMDIwMDAwIHwgMHgwMDA0MDAwMCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXdhaXQgc3FsLmJlZ2luKGFzeW5jIHNxbCA9PiB7XG4gICAgICBsZXQgZmluaXNoXG4gICAgICAhb2lkICYmIChbeyBvaWQgfV0gPSBhd2FpdCBzcWxgc2VsZWN0IGxvX2NyZWF0KC0xKSBhcyBvaWRgKVxuICAgICAgY29uc3QgW3sgZmQgfV0gPSBhd2FpdCBzcWxgc2VsZWN0IGxvX29wZW4oJHsgb2lkIH0sICR7IG1vZGUgfSkgYXMgZmRgXG5cbiAgICAgIGNvbnN0IGxvID0ge1xuICAgICAgICB3cml0YWJsZSxcbiAgICAgICAgcmVhZGFibGUsXG4gICAgICAgIGNsb3NlICAgICA6ICgpID0+IHNxbGBzZWxlY3QgbG9fY2xvc2UoJHsgZmQgfSlgLnRoZW4oZmluaXNoKSxcbiAgICAgICAgdGVsbCAgICAgIDogKCkgPT4gc3FsYHNlbGVjdCBsb190ZWxsNjQoJHsgZmQgfSlgLFxuICAgICAgICByZWFkICAgICAgOiAoeCkgPT4gc3FsYHNlbGVjdCBsb3JlYWQoJHsgZmQgfSwgJHsgeCB9KSBhcyBkYXRhYCxcbiAgICAgICAgd3JpdGUgICAgIDogKHgpID0+IHNxbGBzZWxlY3QgbG93cml0ZSgkeyBmZCB9LCAkeyB4IH0pYCxcbiAgICAgICAgdHJ1bmNhdGUgIDogKHgpID0+IHNxbGBzZWxlY3QgbG9fdHJ1bmNhdGU2NCgkeyBmZCB9LCAkeyB4IH0pYCxcbiAgICAgICAgc2VlayAgICAgIDogKHgsIHdoZW5jZSA9IDApID0+IHNxbGBzZWxlY3QgbG9fbHNlZWs2NCgkeyBmZCB9LCAkeyB4IH0sICR7IHdoZW5jZSB9KWAsXG4gICAgICAgIHNpemUgICAgICA6ICgpID0+IHNxbGBcbiAgICAgICAgICBzZWxlY3RcbiAgICAgICAgICAgIGxvX2xzZWVrNjQoJHsgZmQgfSwgbG9jYXRpb24sIDApIGFzIHBvc2l0aW9uLFxuICAgICAgICAgICAgc2Vlay5zaXplXG4gICAgICAgICAgZnJvbSAoXG4gICAgICAgICAgICBzZWxlY3RcbiAgICAgICAgICAgICAgbG9fbHNlZWs2NCgkMSwgMCwgMikgYXMgc2l6ZSxcbiAgICAgICAgICAgICAgdGVsbC5sb2NhdGlvblxuICAgICAgICAgICAgZnJvbSAoc2VsZWN0IGxvX3RlbGw2NCgkMSkgYXMgbG9jYXRpb24pIHRlbGxcbiAgICAgICAgICApIHNlZWtcbiAgICAgICAgYFxuICAgICAgfVxuXG4gICAgICByZXNvbHZlKGxvKVxuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgciA9PiBmaW5pc2ggPSByKVxuXG4gICAgICBhc3luYyBmdW5jdGlvbiByZWFkYWJsZSh7XG4gICAgICAgIGhpZ2hXYXRlck1hcmsgPSAyMDQ4ICogOCxcbiAgICAgICAgc3RhcnQgPSAwLFxuICAgICAgICBlbmQgPSBJbmZpbml0eVxuICAgICAgfSA9IHt9KSB7XG4gICAgICAgIGxldCBtYXggPSBlbmQgLSBzdGFydFxuICAgICAgICBzdGFydCAmJiBhd2FpdCBsby5zZWVrKHN0YXJ0KVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbS5SZWFkYWJsZSh7XG4gICAgICAgICAgaGlnaFdhdGVyTWFyayxcbiAgICAgICAgICBhc3luYyByZWFkKHNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBzaXplID4gbWF4ID8gc2l6ZSAtIG1heCA6IHNpemVcbiAgICAgICAgICAgIG1heCAtPSBzaXplXG4gICAgICAgICAgICBjb25zdCBbeyBkYXRhIH1dID0gYXdhaXQgbG8ucmVhZChsKVxuICAgICAgICAgICAgdGhpcy5wdXNoKGRhdGEpXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzaXplKVxuICAgICAgICAgICAgICB0aGlzLnB1c2gobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIHdyaXRhYmxlKHtcbiAgICAgICAgaGlnaFdhdGVyTWFyayA9IDIwNDggKiA4LFxuICAgICAgICBzdGFydCA9IDBcbiAgICAgIH0gPSB7fSkge1xuICAgICAgICBzdGFydCAmJiBhd2FpdCBsby5zZWVrKHN0YXJ0KVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbS5Xcml0YWJsZSh7XG4gICAgICAgICAgaGlnaFdhdGVyTWFyayxcbiAgICAgICAgICB3cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBsby53cml0ZShjaHVuaykudGhlbigoKSA9PiBjYWxsYmFjaygpLCBjYWxsYmFjaylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSkuY2F0Y2gocmVqZWN0KVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIlN0cmVhbSIsImxhcmdlT2JqZWN0Iiwic3FsIiwib2lkIiwibW9kZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYmVnaW4iLCJmaW5pc2giLCJmZCIsImxvIiwid3JpdGFibGUiLCJyZWFkYWJsZSIsImNsb3NlIiwidGhlbiIsInRlbGwiLCJyZWFkIiwieCIsIndyaXRlIiwidHJ1bmNhdGUiLCJzZWVrIiwid2hlbmNlIiwic2l6ZSIsInIiLCJoaWdoV2F0ZXJNYXJrIiwic3RhcnQiLCJlbmQiLCJJbmZpbml0eSIsIm1heCIsIlJlYWRhYmxlIiwibCIsImRhdGEiLCJwdXNoIiwibGVuZ3RoIiwiV3JpdGFibGUiLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/large.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/query.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/query.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLOSE: () => (/* binding */ CLOSE),\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\nconst originCache = new Map(), originStackCache = new Map(), originError = Symbol(\"OriginError\");\nconst CLOSE = {};\nclass Query extends Promise {\n    constructor(strings, args, handler, canceller, options = {}){\n        let resolve, reject;\n        super((a, b)=>{\n            resolve = a;\n            reject = b;\n        });\n        this.tagged = Array.isArray(strings.raw);\n        this.strings = strings;\n        this.args = args;\n        this.handler = handler;\n        this.canceller = canceller;\n        this.options = options;\n        this.state = null;\n        this.statement = null;\n        this.resolve = (x)=>(this.active = false, resolve(x));\n        this.reject = (x)=>(this.active = false, reject(x));\n        this.active = false;\n        this.cancelled = null;\n        this.executed = false;\n        this.signature = \"\";\n        this[originError] = this.handler.debug ? new Error() : this.tagged && cachedError(this.strings);\n    }\n    get origin() {\n        return (this.handler.debug ? this[originError].stack : this.tagged && originStackCache.has(this.strings) ? originStackCache.get(this.strings) : originStackCache.set(this.strings, this[originError].stack).get(this.strings)) || \"\";\n    }\n    static get [Symbol.species]() {\n        return Promise;\n    }\n    cancel() {\n        return this.canceller && (this.canceller(this), this.canceller = null);\n    }\n    simple() {\n        this.options.simple = true;\n        this.options.prepare = false;\n        return this;\n    }\n    async readable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    async writable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    cursor(rows = 1, fn) {\n        this.options.simple = false;\n        if (typeof rows === \"function\") {\n            fn = rows;\n            rows = 1;\n        }\n        this.cursorRows = rows;\n        if (typeof fn === \"function\") return this.cursorFn = fn, this;\n        let prev;\n        return {\n            [Symbol.asyncIterator]: ()=>({\n                    next: ()=>{\n                        if (this.executed && !this.active) return {\n                            done: true\n                        };\n                        prev && prev();\n                        const promise = new Promise((resolve, reject)=>{\n                            this.cursorFn = (value)=>{\n                                resolve({\n                                    value,\n                                    done: false\n                                });\n                                return new Promise((r)=>prev = r);\n                            };\n                            this.resolve = ()=>(this.active = false, resolve({\n                                    done: true\n                                }));\n                            this.reject = (x)=>(this.active = false, reject(x));\n                        });\n                        this.execute();\n                        return promise;\n                    },\n                    return () {\n                        prev && prev(CLOSE);\n                        return {\n                            done: true\n                        };\n                    }\n                })\n        };\n    }\n    describe() {\n        this.options.simple = false;\n        this.onlyDescribe = this.options.prepare = true;\n        return this;\n    }\n    stream() {\n        throw new Error(\".stream has been renamed to .forEach\");\n    }\n    forEach(fn) {\n        this.forEachFn = fn;\n        this.handle();\n        return this;\n    }\n    raw() {\n        this.isRaw = true;\n        return this;\n    }\n    values() {\n        this.isRaw = \"values\";\n        return this;\n    }\n    async handle() {\n        !this.executed && (this.executed = true) && await 1 && this.handler(this);\n    }\n    execute() {\n        this.handle();\n        return this;\n    }\n    then() {\n        this.handle();\n        return super.then.apply(this, arguments);\n    }\n    catch() {\n        this.handle();\n        return super.catch.apply(this, arguments);\n    }\n    finally() {\n        this.handle();\n        return super.finally.apply(this, arguments);\n    }\n}\nfunction cachedError(xs) {\n    if (originCache.has(xs)) return originCache.get(xs);\n    const x = Error.stackTraceLimit;\n    Error.stackTraceLimit = 4;\n    originCache.set(xs, new Error());\n    Error.stackTraceLimit = x;\n    return originCache.get(xs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/query.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/queue.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/queue.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Queue);\nfunction Queue(initial = []) {\n    let xs = initial.slice();\n    let index = 0;\n    return {\n        get length () {\n            return xs.length - index;\n        },\n        remove: (x)=>{\n            const index = xs.indexOf(x);\n            return index === -1 ? null : (xs.splice(index, 1), x);\n        },\n        push: (x)=>(xs.push(x), x),\n        shift: ()=>{\n            const out = xs[index++];\n            if (index === xs.length) {\n                index = 0;\n                xs = [];\n            } else {\n                xs[index - 1] = undefined;\n            }\n            return out;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcXVldWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlQSxLQUFLQSxFQUFBO0FBRXBCLFNBQVNBLE1BQU1DLFVBQVUsRUFBRTtJQUN6QixJQUFJQyxLQUFLRCxRQUFRRSxLQUFLO0lBQ3RCLElBQUlDLFFBQVE7SUFFWixPQUFPO1FBQ0wsSUFBSUMsVUFBUztZQUNYLE9BQU9ILEdBQUdHLE1BQU0sR0FBR0Q7UUFDckI7UUFDQUUsUUFBUSxDQUFDQztZQUNQLE1BQU1ILFFBQVFGLEdBQUdNLE9BQU8sQ0FBQ0Q7WUFDekIsT0FBT0gsVUFBVSxDQUFDLElBQ2QsT0FDQ0YsQ0FBQUEsR0FBR08sTUFBTSxDQUFDTCxPQUFPLElBQUlHLENBQUFBO1FBQzVCO1FBQ0FHLE1BQU0sQ0FBQ0gsSUFBT0wsQ0FBQUEsR0FBR1EsSUFBSSxDQUFDSCxJQUFJQSxDQUFBQTtRQUMxQkksT0FBTztZQUNMLE1BQU1DLE1BQU1WLEVBQUUsQ0FBQ0UsUUFBUTtZQUV2QixJQUFJQSxVQUFVRixHQUFHRyxNQUFNLEVBQUU7Z0JBQ3ZCRCxRQUFRO2dCQUNSRixLQUFLLEVBQUU7WUFDVCxPQUFPO2dCQUNMQSxFQUFFLENBQUNFLFFBQVEsRUFBRSxHQUFHUztZQUNsQjtZQUVBLE9BQU9EO1FBQ1Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicHJvZGlnaWVzLWN5cHJlc3MvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3F1ZXVlLmpzPzNjZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgUXVldWVcblxuZnVuY3Rpb24gUXVldWUoaW5pdGlhbCA9IFtdKSB7XG4gIGxldCB4cyA9IGluaXRpYWwuc2xpY2UoKVxuICBsZXQgaW5kZXggPSAwXG5cbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHhzLmxlbmd0aCAtIGluZGV4XG4gICAgfSxcbiAgICByZW1vdmU6ICh4KSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHhzLmluZGV4T2YoeClcbiAgICAgIHJldHVybiBpbmRleCA9PT0gLTFcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogKHhzLnNwbGljZShpbmRleCwgMSksIHgpXG4gICAgfSxcbiAgICBwdXNoOiAoeCkgPT4gKHhzLnB1c2goeCksIHgpLFxuICAgIHNoaWZ0OiAoKSA9PiB7XG4gICAgICBjb25zdCBvdXQgPSB4c1tpbmRleCsrXVxuXG4gICAgICBpZiAoaW5kZXggPT09IHhzLmxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IDBcbiAgICAgICAgeHMgPSBbXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeHNbaW5kZXggLSAxXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiUXVldWUiLCJpbml0aWFsIiwieHMiLCJzbGljZSIsImluZGV4IiwibGVuZ3RoIiwicmVtb3ZlIiwieCIsImluZGV4T2YiLCJzcGxpY2UiLCJwdXNoIiwic2hpZnQiLCJvdXQiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/queue.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/result.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres/src/result.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Result)\n/* harmony export */ });\nclass Result extends Array {\n    constructor(){\n        super();\n        Object.defineProperties(this, {\n            count: {\n                value: null,\n                writable: true\n            },\n            state: {\n                value: null,\n                writable: true\n            },\n            command: {\n                value: null,\n                writable: true\n            },\n            columns: {\n                value: null,\n                writable: true\n            },\n            statement: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    static get [Symbol.species]() {\n        return Array;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcmVzdWx0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxNQUFNQSxlQUFlQztJQUNsQ0MsYUFBYztRQUNaLEtBQUs7UUFDTEMsT0FBT0MsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1lBQzVCQyxPQUFPO2dCQUFFQyxPQUFPO2dCQUFNQyxVQUFVO1lBQUs7WUFDckNDLE9BQU87Z0JBQUVGLE9BQU87Z0JBQU1DLFVBQVU7WUFBSztZQUNyQ0UsU0FBUztnQkFBRUgsT0FBTztnQkFBTUMsVUFBVTtZQUFLO1lBQ3ZDRyxTQUFTO2dCQUFFSixPQUFPO2dCQUFNQyxVQUFVO1lBQUs7WUFDdkNJLFdBQVc7Z0JBQUVMLE9BQU87Z0JBQU1DLFVBQVU7WUFBSztRQUMzQztJQUNGO0lBRUEsV0FBVyxDQUFDSyxPQUFPQyxPQUFPLENBQUMsR0FBRztRQUM1QixPQUFPWjtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwcm9kaWdpZXMtY3lwcmVzcy8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcmVzdWx0LmpzP2Y1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdWx0IGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgY291bnQ6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBzdGF0ZTogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIGNvbW1hbmQ6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBjb2x1bW5zOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgc3RhdGVtZW50OiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHtcbiAgICByZXR1cm4gQXJyYXlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlJlc3VsdCIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY291bnQiLCJ2YWx1ZSIsIndyaXRhYmxlIiwic3RhdGUiLCJjb21tYW5kIiwiY29sdW1ucyIsInN0YXRlbWVudCIsIlN5bWJvbCIsInNwZWNpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/result.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/subscribe.js":
/*!************************************************!*\
  !*** ./node_modules/postgres/src/subscribe.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Subscribe)\n/* harmony export */ });\nconst noop = ()=>{};\nfunction Subscribe(postgres, options) {\n    const subscribers = new Map(), slot = \"postgresjs_\" + Math.random().toString(36).slice(2), state = {};\n    let connection, stream, ended = false;\n    const sql = subscribe.sql = postgres({\n        ...options,\n        transform: {\n            column: {},\n            value: {},\n            row: {}\n        },\n        max: 1,\n        fetch_types: false,\n        idle_timeout: null,\n        max_lifetime: null,\n        connection: {\n            ...options.connection,\n            replication: \"database\"\n        },\n        onclose: async function() {\n            if (ended) return;\n            stream = null;\n            state.pid = state.secret = undefined;\n            connected(await init(sql, slot, options.publications));\n            subscribers.forEach((event)=>event.forEach(({ onsubscribe })=>onsubscribe()));\n        },\n        no_subscribe: true\n    });\n    const end = sql.end, close = sql.close;\n    sql.end = async ()=>{\n        ended = true;\n        stream && await new Promise((r)=>(stream.once(\"close\", r), stream.end()));\n        return end();\n    };\n    sql.close = async ()=>{\n        stream && await new Promise((r)=>(stream.once(\"close\", r), stream.end()));\n        return close();\n    };\n    return subscribe;\n    async function subscribe(event, fn, onsubscribe = noop) {\n        event = parseEvent(event);\n        if (!connection) connection = init(sql, slot, options.publications);\n        const subscriber = {\n            fn,\n            onsubscribe\n        };\n        const fns = subscribers.has(event) ? subscribers.get(event).add(subscriber) : subscribers.set(event, new Set([\n            subscriber\n        ])).get(event);\n        const unsubscribe = ()=>{\n            fns.delete(subscriber);\n            fns.size === 0 && subscribers.delete(event);\n        };\n        return connection.then((x)=>{\n            connected(x);\n            onsubscribe();\n            return {\n                unsubscribe,\n                state,\n                sql\n            };\n        });\n    }\n    function connected(x) {\n        stream = x.stream;\n        state.pid = x.state.pid;\n        state.secret = x.state.secret;\n    }\n    async function init(sql, slot, publications) {\n        if (!publications) throw new Error(\"Missing publication names\");\n        const xs = await sql.unsafe(`CREATE_REPLICATION_SLOT ${slot} TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`);\n        const [x] = xs;\n        const stream = await sql.unsafe(`START_REPLICATION SLOT ${slot} LOGICAL ${x.consistent_point} (proto_version '1', publication_names '${publications}')`).writable();\n        const state = {\n            lsn: Buffer.concat(x.consistent_point.split(\"/\").map((x)=>Buffer.from((\"00000000\" + x).slice(-8), \"hex\")))\n        };\n        stream.on(\"data\", data);\n        stream.on(\"error\", error);\n        stream.on(\"close\", sql.close);\n        return {\n            stream,\n            state: xs.state\n        };\n        function error(e) {\n            console.error(\"Unexpected error during logical streaming - reconnecting\", e);\n        }\n        function data(x) {\n            if (x[0] === 0x77) parse(x.subarray(25), state, sql.options.parsers, handle, options.transform);\n            else if (x[0] === 0x6b && x[17]) pong();\n        }\n        function handle(a, b) {\n            const path = b.relation.schema + \".\" + b.relation.table;\n            call(\"*\", a, b);\n            call(\"*:\" + path, a, b);\n            b.relation.keys.length && call(\"*:\" + path + \"=\" + b.relation.keys.map((x)=>a[x.name]), a, b);\n            call(b.command, a, b);\n            call(b.command + \":\" + path, a, b);\n            b.relation.keys.length && call(b.command + \":\" + path + \"=\" + b.relation.keys.map((x)=>a[x.name]), a, b);\n        }\n        function pong() {\n            const x = Buffer.alloc(34);\n            x[0] = \"r\".charCodeAt(0);\n            x.fill(state.lsn, 1);\n            x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25);\n            stream.write(x);\n        }\n    }\n    function call(x, a, b) {\n        subscribers.has(x) && subscribers.get(x).forEach(({ fn })=>fn(a, b, x));\n    }\n}\nfunction Time(x) {\n    return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)));\n}\nfunction parse(x, state, parsers, handle, transform) {\n    const char = (acc, [k, v])=>(acc[k.charCodeAt(0)] = v, acc);\n    Object.entries({\n        R: (x)=>{\n            let i = 1;\n            const r = state[x.readUInt32BE(i)] = {\n                schema: x.toString(\"utf8\", i += 4, i = x.indexOf(0, i)) || \"pg_catalog\",\n                table: x.toString(\"utf8\", i + 1, i = x.indexOf(0, i + 1)),\n                columns: Array(x.readUInt16BE(i += 2)),\n                keys: []\n            };\n            i += 2;\n            let columnIndex = 0, column;\n            while(i < x.length){\n                column = r.columns[columnIndex++] = {\n                    key: x[i++],\n                    name: transform.column.from ? transform.column.from(x.toString(\"utf8\", i, i = x.indexOf(0, i))) : x.toString(\"utf8\", i, i = x.indexOf(0, i)),\n                    type: x.readUInt32BE(i += 1),\n                    parser: parsers[x.readUInt32BE(i)],\n                    atttypmod: x.readUInt32BE(i += 4)\n                };\n                column.key && r.keys.push(column);\n                i += 4;\n            }\n        },\n        Y: ()=>{},\n        O: ()=>{},\n        B: (x)=>{\n            state.date = Time(x.readBigInt64BE(9));\n            state.lsn = x.subarray(1, 9);\n        },\n        I: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            const { row } = tuples(x, relation.columns, i += 7, transform);\n            handle(row, {\n                command: \"insert\",\n                relation\n            });\n        },\n        D: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            handle(key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform).row : null, {\n                command: \"delete\",\n                relation,\n                key\n            });\n        },\n        U: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            const xs = key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform) : null;\n            xs && (i = xs.i);\n            const { row } = tuples(x, relation.columns, i + 3, transform);\n            handle(row, {\n                command: \"update\",\n                relation,\n                key,\n                old: xs && xs.row\n            });\n        },\n        T: ()=>{},\n        C: ()=>{} // Commit\n    }).reduce(char, {})[x[0]](x);\n}\nfunction tuples(x, columns, xi, transform) {\n    let type, column, value;\n    const row = transform.raw ? new Array(columns.length) : {};\n    for(let i = 0; i < columns.length; i++){\n        type = x[xi++];\n        column = columns[i];\n        value = type === 110 // n\n         ? null : type === 117 // u\n         ? undefined : column.parser === undefined ? x.toString(\"utf8\", xi + 4, xi += 4 + x.readUInt32BE(xi)) : column.parser.array === true ? column.parser(x.toString(\"utf8\", xi + 5, xi += 4 + x.readUInt32BE(xi))) : column.parser(x.toString(\"utf8\", xi + 4, xi += 4 + x.readUInt32BE(xi)));\n        transform.raw ? row[i] = transform.raw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n    }\n    return {\n        i: xi,\n        row: transform.row.from ? transform.row.from(row) : row\n    };\n}\nfunction parseEvent(x) {\n    const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || [];\n    if (!xs) throw new Error(\"Malformed subscribe pattern: \" + x);\n    const [, command, path, key] = xs;\n    return (command || \"*\") + (path ? \":\" + (path.indexOf(\".\") === -1 ? \"public.\" + path : path) : \"\") + (key ? \"=\" + key : \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/subscribe.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/postgres/src/types.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/types.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   END: () => (/* binding */ END),\n/* harmony export */   Identifier: () => (/* binding */ Identifier),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   arrayParser: () => (/* binding */ arrayParser),\n/* harmony export */   arraySerializer: () => (/* binding */ arraySerializer),\n/* harmony export */   camel: () => (/* binding */ camel),\n/* harmony export */   escapeIdentifier: () => (/* binding */ escapeIdentifier),\n/* harmony export */   fromCamel: () => (/* binding */ fromCamel),\n/* harmony export */   fromKebab: () => (/* binding */ fromKebab),\n/* harmony export */   fromPascal: () => (/* binding */ fromPascal),\n/* harmony export */   handleValue: () => (/* binding */ handleValue),\n/* harmony export */   inferType: () => (/* binding */ inferType),\n/* harmony export */   kebab: () => (/* binding */ kebab),\n/* harmony export */   mergeUserTypes: () => (/* binding */ mergeUserTypes),\n/* harmony export */   parsers: () => (/* binding */ parsers),\n/* harmony export */   pascal: () => (/* binding */ pascal),\n/* harmony export */   serializers: () => (/* binding */ serializers),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   toCamel: () => (/* binding */ toCamel),\n/* harmony export */   toKebab: () => (/* binding */ toKebab),\n/* harmony export */   toPascal: () => (/* binding */ toPascal),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./query.js */ \"(action-browser)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(action-browser)/./node_modules/postgres/src/errors.js\");\n\n\nconst types = {\n    string: {\n        to: 25,\n        from: null,\n        serialize: (x)=>\"\" + x\n    },\n    number: {\n        to: 0,\n        from: [\n            21,\n            23,\n            26,\n            700,\n            701\n        ],\n        serialize: (x)=>\"\" + x,\n        parse: (x)=>+x\n    },\n    json: {\n        to: 114,\n        from: [\n            114,\n            3802\n        ],\n        serialize: (x)=>JSON.stringify(x),\n        parse: (x)=>JSON.parse(x)\n    },\n    boolean: {\n        to: 16,\n        from: 16,\n        serialize: (x)=>x === true ? \"t\" : \"f\",\n        parse: (x)=>x === \"t\"\n    },\n    date: {\n        to: 1184,\n        from: [\n            1082,\n            1114,\n            1184\n        ],\n        serialize: (x)=>(x instanceof Date ? x : new Date(x)).toISOString(),\n        parse: (x)=>new Date(x)\n    },\n    bytea: {\n        to: 17,\n        from: 17,\n        serialize: (x)=>\"\\\\x\" + Buffer.from(x).toString(\"hex\"),\n        parse: (x)=>Buffer.from(x.slice(2), \"hex\")\n    }\n};\nclass NotTagged {\n    then() {\n        notTagged();\n    }\n    catch() {\n        notTagged();\n    }\n    finally() {\n        notTagged();\n    }\n}\nclass Identifier extends NotTagged {\n    constructor(value){\n        super();\n        this.value = escapeIdentifier(value);\n    }\n}\nclass Parameter extends NotTagged {\n    constructor(value, type, array){\n        super();\n        this.value = value;\n        this.type = type;\n        this.array = array;\n    }\n}\nclass Builder extends NotTagged {\n    constructor(first, rest){\n        super();\n        this.first = first;\n        this.rest = rest;\n    }\n    build(before, parameters, types, options) {\n        const keyword = builders.map(([x, fn])=>({\n                fn,\n                i: before.search(x)\n            })).sort((a, b)=>a.i - b.i).pop();\n        return keyword.i === -1 ? escapeIdentifiers(this.first, options) : keyword.fn(this.first, this.rest, parameters, types, options);\n    }\n}\nfunction handleValue(x, parameters, types, options) {\n    let value = x instanceof Parameter ? x.value : x;\n    if (value === undefined) {\n        x instanceof Parameter ? x.value = options.transform.undefined : value = x = options.transform.undefined;\n        if (value === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"UNDEFINED_VALUE\", \"Undefined values are not allowed\");\n    }\n    return \"$\" + types.push(x instanceof Parameter ? (parameters.push(x.value), x.array ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value) : x.type) : (parameters.push(x), inferType(x)));\n}\nconst defaultHandlers = typeHandlers(types);\nfunction stringify(q, string, value, parameters, types, options) {\n    for(let i = 1; i < q.strings.length; i++){\n        string += stringifyValue(string, value, parameters, types, options) + q.strings[i];\n        value = q.args[i];\n    }\n    return string;\n}\nfunction stringifyValue(string, value, parameters, types, o) {\n    return value instanceof Builder ? value.build(string, parameters, types, o) : value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, o) : value instanceof Identifier ? value.value : value && value[0] instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? value.reduce((acc, x)=>acc + \" \" + fragment(x, parameters, types, o), \"\") : handleValue(value, parameters, types, o);\n}\nfunction fragment(q, parameters, types, options) {\n    q.fragment = true;\n    return stringify(q, q.strings[0], q.args[0], parameters, types, options);\n}\nfunction valuesBuilder(first, parameters, types, columns, options) {\n    return first.map((row)=>\"(\" + columns.map((column)=>stringifyValue(\"values\", row[column], parameters, types, options)).join(\",\") + \")\").join(\",\");\n}\nfunction values(first, rest, parameters, types, options) {\n    const multi = Array.isArray(first[0]);\n    const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first);\n    return valuesBuilder(multi ? first : [\n        first\n    ], parameters, types, columns, options);\n}\nfunction select(first, rest, parameters, types, options) {\n    typeof first === \"string\" && (first = [\n        first\n    ].concat(rest));\n    if (Array.isArray(first)) return escapeIdentifiers(first, options);\n    let value;\n    const columns = rest.length ? rest.flat() : Object.keys(first);\n    return columns.map((x)=>{\n        value = first[x];\n        return (value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, options) : value instanceof Identifier ? value.value : handleValue(value, parameters, types, options)) + \" as \" + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x);\n    }).join(\",\");\n}\nconst builders = Object.entries({\n    values,\n    in: (...xs)=>{\n        const x = values(...xs);\n        return x === \"()\" ? \"(null)\" : x;\n    },\n    select,\n    as: select,\n    returning: select,\n    \"\\\\(\": select,\n    update (first, rest, parameters, types, options) {\n        return (rest.length ? rest.flat() : Object.keys(first)).map((x)=>escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) + \"=\" + stringifyValue(\"values\", first[x], parameters, types, options));\n    },\n    insert (first, rest, parameters, types, options) {\n        const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first);\n        return \"(\" + escapeIdentifiers(columns, options) + \")values\" + valuesBuilder(Array.isArray(first) ? first : [\n            first\n        ], parameters, types, columns, options);\n    }\n}).map(([x, fn])=>[\n        new RegExp(\"((?:^|[\\\\s(])\" + x + \"(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)\", \"i\"),\n        fn\n    ]);\nfunction notTagged() {\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"NOT_TAGGED_CALL\", \"Query not called as a tagged template literal\");\n}\nconst serializers = defaultHandlers.serializers;\nconst parsers = defaultHandlers.parsers;\nconst END = {};\nfunction firstIsString(x) {\n    if (Array.isArray(x)) return firstIsString(x[0]);\n    return typeof x === \"string\" ? 1009 : 0;\n}\nconst mergeUserTypes = function(types) {\n    const user = typeHandlers(types || {});\n    return {\n        serializers: Object.assign({}, serializers, user.serializers),\n        parsers: Object.assign({}, parsers, user.parsers)\n    };\n};\nfunction typeHandlers(types) {\n    return Object.keys(types).reduce((acc, k)=>{\n        types[k].from && [].concat(types[k].from).forEach((x)=>acc.parsers[x] = types[k].parse);\n        if (types[k].serialize) {\n            acc.serializers[types[k].to] = types[k].serialize;\n            types[k].from && [].concat(types[k].from).forEach((x)=>acc.serializers[x] = types[k].serialize);\n        }\n        return acc;\n    }, {\n        parsers: {},\n        serializers: {}\n    });\n}\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n    return xs.map((x)=>escapeIdentifier(column.to ? column.to(x) : x)).join(\",\");\n}\nconst escapeIdentifier = function escape(str) {\n    return '\"' + str.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"') + '\"';\n};\nconst inferType = function inferType(x) {\n    return x instanceof Parameter ? x.type : x instanceof Date ? 1184 : x instanceof Uint8Array ? 17 : x === true || x === false ? 16 : typeof x === \"bigint\" ? 20 : Array.isArray(x) ? inferType(x[0]) : 0;\n};\nconst escapeBackslash = /\\\\/g;\nconst escapeQuote = /\"/g;\nfunction arrayEscape(x) {\n    return x.replace(escapeBackslash, \"\\\\\\\\\").replace(escapeQuote, '\\\\\"');\n}\nconst arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n    if (Array.isArray(xs) === false) return xs;\n    if (!xs.length) return \"{}\";\n    const first = xs[0];\n    // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n    const delimiter = typarray === 1020 ? \";\" : \",\";\n    if (Array.isArray(first) && !first.type) return \"{\" + xs.map((x)=>arraySerializer(x, serializer, options, typarray)).join(delimiter) + \"}\";\n    return \"{\" + xs.map((x)=>{\n        if (x === undefined) {\n            x = options.transform.undefined;\n            if (x === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"UNDEFINED_VALUE\", \"Undefined values are not allowed\");\n        }\n        return x === null ? \"null\" : '\"' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : \"\" + x) + '\"';\n    }).join(delimiter) + \"}\";\n};\nconst arrayParserState = {\n    i: 0,\n    char: null,\n    str: \"\",\n    quoted: false,\n    last: 0\n};\nconst arrayParser = function arrayParser(x, parser, typarray) {\n    arrayParserState.i = arrayParserState.last = 0;\n    return arrayParserLoop(arrayParserState, x, parser, typarray);\n};\nfunction arrayParserLoop(s, x, parser, typarray) {\n    const xs = [];\n    // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n    const delimiter = typarray === 1020 ? \";\" : \",\";\n    for(; s.i < x.length; s.i++){\n        s.char = x[s.i];\n        if (s.quoted) {\n            if (s.char === \"\\\\\") {\n                s.str += x[++s.i];\n            } else if (s.char === '\"') {\n                xs.push(parser ? parser(s.str) : s.str);\n                s.str = \"\";\n                s.quoted = x[s.i + 1] === '\"';\n                s.last = s.i + 2;\n            } else {\n                s.str += s.char;\n            }\n        } else if (s.char === '\"') {\n            s.quoted = true;\n        } else if (s.char === \"{\") {\n            s.last = ++s.i;\n            xs.push(arrayParserLoop(s, x, parser, typarray));\n        } else if (s.char === \"}\") {\n            s.quoted = false;\n            s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n            break;\n        } else if (s.char === delimiter && s.p !== \"}\" && s.p !== '\"') {\n            xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n        }\n        s.p = s.char;\n    }\n    s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1));\n    return xs;\n}\nconst toCamel = (x)=>{\n    let str = x[0];\n    for(let i = 1; i < x.length; i++)str += x[i] === \"_\" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toPascal = (x)=>{\n    let str = x[0].toUpperCase();\n    for(let i = 1; i < x.length; i++)str += x[i] === \"_\" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toKebab = (x)=>x.replace(/_/g, \"-\");\nconst fromCamel = (x)=>x.replace(/([A-Z])/g, \"_$1\").toLowerCase();\nconst fromPascal = (x)=>(x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, \"_$1\")).toLowerCase();\nconst fromKebab = (x)=>x.replace(/-/g, \"_\");\nfunction createJsonTransform(fn) {\n    return function jsonTransform(x, column) {\n        return typeof x === \"object\" && x !== null && (column.type === 114 || column.type === 3802) ? Array.isArray(x) ? x.map((x)=>jsonTransform(x, column)) : Object.entries(x).reduce((acc, [k, v])=>Object.assign(acc, {\n                [fn(k)]: jsonTransform(v, column)\n            }), {}) : x;\n    };\n}\ntoCamel.column = {\n    from: toCamel\n};\ntoCamel.value = {\n    from: createJsonTransform(toCamel)\n};\nfromCamel.column = {\n    to: fromCamel\n};\nconst camel = {\n    ...toCamel\n};\ncamel.column.to = fromCamel;\ntoPascal.column = {\n    from: toPascal\n};\ntoPascal.value = {\n    from: createJsonTransform(toPascal)\n};\nfromPascal.column = {\n    to: fromPascal\n};\nconst pascal = {\n    ...toPascal\n};\npascal.column.to = fromPascal;\ntoKebab.column = {\n    from: toKebab\n};\ntoKebab.value = {\n    from: createJsonTransform(toKebab)\n};\nfromKebab.column = {\n    to: fromKebab\n};\nconst kebab = {\n    ...toKebab\n};\nkebab.column.to = fromKebab;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/postgres/src/types.js\n");

/***/ })

};
;